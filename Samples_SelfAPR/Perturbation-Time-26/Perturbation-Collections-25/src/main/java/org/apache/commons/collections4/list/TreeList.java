[P1_Replace_Type]^private  short  size;^68^^^^^63^73^private int size;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P8_Replace_Mix]^private  long  size;^68^^^^^63^73^private int size;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P1_Replace_Type]^private  short  height;^315^^^^^310^320^private int height;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P1_Replace_Type]^private  long  relativePosition;^317^^^^^312^322^private int relativePosition;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P8_Replace_Mix]^private  short  relativePosition;^317^^^^^312^322^private int relativePosition;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P8_Replace_Mix]^private  TreeList<E> parent;^983^^^^^978^988^private final TreeList<E> parent;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P1_Replace_Type]^private  short  nextIndex;^991^^^^^986^996^private int nextIndex;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P1_Replace_Type]^private  short  currentIndex;^1000^^^^^995^1005^private int currentIndex;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P1_Replace_Type]^private  long  expectedModCount;^1007^^^^^1002^1012^private int expectedModCount;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P8_Replace_Mix]^private  short  expectedModCount;^1007^^^^^1002^1012^private int expectedModCount;^[CLASS] TreeList AVLNode TreeListIterator   [VARIABLES] 
[P14_Delete_Statement]^^75^^^^^74^76^super (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList()   [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P14_Delete_Statement]^^85^^^^^84^90^super (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P7_Replace_Invocation]^if  ( !coll .iterator (  )   )  {^86^^^^^84^90^if  ( !coll.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^if  ( coll.isEmpty (  )  )  {^86^^^^^84^90^if  ( !coll.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P9_Replace_Statement]^if  ( c.isEmpty (  )  )  {^86^^^^^84^90^if  ( !coll.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P9_Replace_Statement]^if  ( !hasNext (  )  )  {^86^^^^^84^90^if  ( !coll.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P15_Unwrap_Block]^root = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(coll); size = coll.size();^86^87^88^89^^84^90^if  ( !coll.isEmpty (  )  )  { root = new AVLNode<E> ( coll ) ; size = coll.size (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P16_Remove_Block]^^86^87^88^89^^84^90^if  ( !coll.isEmpty (  )  )  { root = new AVLNode<E> ( coll ) ; size = coll.size (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P13_Insert_Block]^if  (  ( root )  == null )  {     root = new AVLNode<E> ( index, obj, null, null ) ; }else {     root = root.insert ( index, obj ) ; }^86^^^^^84^90^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P4_Replace_Constructor]^root = root =  new AVLNode<E> (  ( +1 ) , obj, right, this )  ;^87^^^^^84^90^root = new AVLNode<E> ( coll ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^root =  new AVLNode<E> ( null ) ;^87^^^^^84^90^root = new AVLNode<E> ( coll ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^root = new AVLNode<E> ( index, obj, null, null ) ;root = new AVLNode<E> ( coll ) ;^87^^^^^84^90^root = new AVLNode<E> ( coll ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P13_Insert_Block]^if  ( ! ( coll.isEmpty (  )  )  )  {     root = new AVLNode<E> ( coll ) ;     size = coll.size (  ) ; }^87^^^^^84^90^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^size = coll.size() - 8 ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^size =  null.size (  ) ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^modCount += c.size (  ) ;size = coll.size (  ) ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^size += c.size (  ) ;size = coll.size (  ) ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^size = coll.size() + 6 ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P7_Replace_Invocation]^size = coll .isEmpty (  )  ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^size = 1.size (  ) ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P14_Delete_Statement]^^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^size = coll.size() - 0 ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^size = coll.size() - 4 ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P5_Replace_Variable]^this.relativePosition = nextIndex;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^this.relativePosition =  size;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^node.relativePosition = newOffest;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^sAbsolutePosition += s.relativePosition;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P5_Replace_Variable]^value = value;^332^^^^^329^337^value = obj;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^value =  null;^332^^^^^329^337^value = obj;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^this.value = obj;value = obj;^332^^^^^329^337^value = obj;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^rightIsNext = false;^333^^^^^329^337^rightIsNext = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^rightIsNext = node == null;rightIsNext = true;^333^^^^^329^337^rightIsNext = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^leftIsPrevious = false;^334^^^^^329^337^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^334^^^^^329^337^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^right =  1;^335^^^^^329^337^right = rightFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;right = rightFollower;^335^^^^^329^337^right = rightFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^left = leftFollower;right = rightFollower;^335^^^^^329^337^right = rightFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^left =  null;^336^^^^^329^337^left = leftFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^right = rightFollower;left = leftFollower;^336^^^^^329^337^left = leftFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = leftFollower;^336^^^^^329^337^left = leftFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P2_Replace_Operator]^this ( coll.iterator (  ) , 0, coll.size (  )    instanceof   1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 9, coll.size (  )  - 1, 9, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 0, coll.size (  )  , 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^this ( coll.iterator (  ) , currentIndex, coll.size (  )  - 1, currentIndex, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 0, coll.size() + 1  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P7_Replace_Invocation]^this ( coll .isEmpty (  )  , 0, coll.size (  )  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P7_Replace_Invocation]^this ( coll.iterator (  ) , 0, coll .isEmpty (  )   - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P14_Delete_Statement]^^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 0, coll.size() + 6  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P8_Replace_Mix]^this ( null.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[P1_Replace_Type]^final  long  mid = start +  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^final int mid = start +  &&  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^final int mid = start +  ( end - start )  + 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^final int mid = start +  ( end  <  start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^final int mid = start +  ( end - start )  / 9;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final int mid = size +  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final int mid = start +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final int mid = end +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^final int mid = start +  ( size - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^if  ( start <= mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^if  ( size < mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^if  ( start < nextIndex )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^if  ( mid < start )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P6_Replace_Expression]^if  ( mid - 1 )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( mid < end )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P15_Unwrap_Block]^left = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(iterator, start, (mid - 1), mid, prev, this);^374^375^376^377^378^371^389^if  ( start < mid )  { left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ; } else { leftIsPrevious = true; left = prev; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P16_Remove_Block]^^374^375^376^377^378^371^389^if  ( start < mid )  { left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ; } else { leftIsPrevious = true; left = prev; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( root )  == null )  {     root = new AVLNode<E> ( index, obj, null, null ) ; }else {     root = root.insert ( index, obj ) ; }^374^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     setLeft ( new AVLNode<E> (  ( -1 ) , obj, this, left ) , null ) ; }else {     setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^374^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( mid < end )  {     right = new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next ) ; }else {     rightIsNext = true;     right = next; }^374^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^leftIsPrevious = false;^377^^^^^371^389^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^377^^^^^371^389^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { leftIsPrevious = true; }^377^^^^^371^389^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^left =  null;^378^^^^^371^389^left = prev;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = prev;^378^^^^^371^389^left = prev;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^left = new AVLNode<E> ( iterator, start, mid  |  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^left = new AVLNode<E> ( iterator, start, mid - end, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^left = left =  new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next )  ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^left = new AVLNode<E> (  start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^left = new AVLNode<E> ( iterator,  mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^left = new AVLNode<E> ( iterator, start, mid - 1,  prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^left = new AVLNode<E> ( iterator, start, mid - 1, mid,  this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( 4, start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, size, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( prev, start, mid - 1, mid, iterator, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, mid, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, prev, mid - 1, mid, start, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^left = new AVLNode<E> ( iterator, start, mid - 1 / 4, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^375^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^left = new AVLNode<E> ( iterator, start, mid  &  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^left = new AVLNode<E> ( iterator, start, mid - expectedModCount, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, mid - 1, mid, 3, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^left = new AVLNode<E> ( iterator, relativePosition, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^left = new AVLNode<E> ( iterator, start, mid  ||  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^left = new AVLNode<E> ( iterator, start, mid - relativePosition, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, nextIndex - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( start, iterator, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, prev - 1, mid, mid, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^left = new AVLNode<E> ( iterator, start, mid - 1 << 2, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^left = new AVLNode<E> ( iterator, start, mid  ==  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^left = new AVLNode<E> ( iterator, start, mid , mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, size - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^value =  null.next (  ) ;^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^next = next.next (  ) ;value = iterator.next (  ) ;^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^value = 3.next (  ) ;^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^relativePosition = mid  >>  absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^relativePosition = start - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^relativePosition = mid - start;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^relativePosition = absolutePositionOfParent - mid;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;relativePosition = mid - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;relativePosition = mid - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^if  ( mid <= end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^if  ( nextIndex < end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^if  ( end < mid )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P6_Replace_Expression]^if  ( mid + 1 )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^if  ( relativePosition < end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( start < mid )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P15_Unwrap_Block]^right = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(iterator, (mid + 1), end, mid, this, next);^382^383^384^385^386^371^389^if  ( mid < end )  { right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ; } else { rightIsNext = true; right = next; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P16_Remove_Block]^^382^383^384^385^386^371^389^if  ( mid < end )  { right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ; } else { rightIsNext = true; right = next; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( root )  == null )  {     root = new AVLNode<E> ( index, obj, null, null ) ; }else {     root = root.insert ( index, obj ) ; }^382^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     setRight ( new AVLNode<E> (  ( +1 ) , obj, right, this ) , null ) ; }else {     setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^382^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^382^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^rightIsNext = false;^385^^^^^371^389^rightIsNext = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^rightIsNext = node == null;rightIsNext = true;^385^^^^^371^389^rightIsNext = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^right =  null;^386^^^^^371^389^right = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^root = null;right = next;^386^^^^^371^389^right = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^right = leftMax.right;right = next;^386^^^^^371^389^right = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^current = next;right = next;^386^^^^^371^389^right = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^right = new AVLNode<E> ( iterator, mid + absolutePositionOfParent, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^right = right =  new AVLNode<E> (  ( +1 ) , obj, right, this )  ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^right = new AVLNode<E> (  mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^right = new AVLNode<E> ( iterator, mid + 1, end,  this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^right = new AVLNode<E> ( iterator, mid + 1,  mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, mid + 1, size, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( mid, iterator + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, end + 1, mid, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( next, mid + 1, end, mid, this, iterator ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^right = new AVLNode<E> ( iterator, mid + 1 << 4, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^root = new AVLNode<E> ( index, obj, null, null ) ;right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( root )  == null )  {     root = new AVLNode<E> ( index, obj, null, null ) ; }else {     root = root.insert ( index, obj ) ; }^383^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^383^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( mid < end )  {     right = new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next ) ; }else {     rightIsNext = true;     right = next; }^383^^^^^371^389^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^right = new AVLNode<E> ( iterator, mid + start, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, start + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, mid + 1, relativePosition, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( end, mid + 1, iterator, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^right = new AVLNode<E> ( iterator, mid + mid, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, mid + 1, nextIndex, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, mid + 1, next, mid, this, end ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, next + 1, end, mid, this, mid ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^right = new AVLNode<E> ( iterator, mid + 4, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^right = new AVLNode<E> ( iterator, mid , end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^right = new AVLNode<E> ( iterator, mid + 1, start, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^1016^1017^^^^1015^1022^super (  ) ; this.parent = parent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^this.parent =  null;^1017^^^^^1015^1022^this.parent = parent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.expectedModCount = 4.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.expectedModCount = start;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.expectedModCount = parent.modCount.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.expectedModCount = parent;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^this.expectedModCount =  0.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^this.next = parent.root != null ? null : parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.next = parent.root == null ? null : parent.root.get ( nextIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.next = fromIndex.root == null ? null : parent.root.get ( parent ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.next = parent == null ? null : parent.root.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P6_Replace_Expression]^this.next = parent.root ( parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^this.next = parent.root == null ? null : parent.root.insert ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^this.next = parent.root == true ? true : parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.next = 2.root == null ? null : parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.next = fromIndex == null ? null : parent.root.get ( parent.root ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^this.next = parent.root == null ? null : parent.root.insert ( start ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^1019^1020^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ; this.nextIndex = fromIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^this.nextIndex = mid;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^this.nextIndex =  nextIndex;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;this.nextIndex = fromIndex;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;this.nextIndex = fromIndex;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^this.currentIndex = -6;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^this.currentIndex = -1L;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^currentIndex = -1;this.currentIndex = -1;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P12_Insert_Condition]^if  ( currentIndex == -1 )  { this.currentIndex = -1; }^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^checkInterval ( index, 0, size (  )   ==  1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, -1, size (  )  - 1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size (  )   ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() + 0  - 1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^checkInterval ( mid, 0, size (  )  - 1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( fromIndex, 0, size (  )  ) ;checkInterval ( index, 0, size (  )  - 1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( index, 0, size (  )  ) ;checkInterval ( index, 0, size (  )  - 1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() + 2  - 1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^101^102^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ; return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return root.get ( mid ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return 1.get ( index ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return index.get ( root ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root.get ( index ) .setValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root.remove ( index ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root .set ( size , obj )^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return root.get ( nextIndex ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root .set ( absolutePositionOfParent , obj )^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root .set ( nextIndex , value )^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return mid;^112^^^^^111^113^return size;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] size [RETURN_TYPE] int   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return listIterator ( mid ) ;^123^^^^^121^124^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return get ( 0 ) ;^123^^^^^121^124^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return get ( 4 ) ;^123^^^^^121^124^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return listIterator ( 4 ) ;^123^^^^^121^124^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^123^^^^^121^124^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return listIterator ( 6 ) ;^134^^^^^132^135^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return get ( 0 ) ;^134^^^^^132^135^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return get ( 0L ) ;^134^^^^^132^135^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return listIterator ( 3 ) ;^134^^^^^132^135^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^134^^^^^132^135^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( fromIndex, 6, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( fromIndex, 0, size() - 5  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^checkInterval ( start, 0, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^set ( fromIndex, 0, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^checkInterval ( relativePosition, 0, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^147^148^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ; return new TreeListIterator<E> ( this, fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( index, 0, size (  )  ) ;checkInterval ( fromIndex, 0, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( index, 0, size (  )  - 1 ) ;checkInterval ( fromIndex, 0, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( fromIndex, 0, size() - 1  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return new TreeListIterator<E> ( this, size ) ;^148^^^^^144^149^return new TreeListIterator<E> ( this, fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return new TreeListIterator<E> ( this, mid ) ;^148^^^^^144^149^return new TreeListIterator<E> ( this, fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return new TreeListIterator<E> ( this, relativePosition ) ;^148^^^^^144^149^return new TreeListIterator<E> ( this, fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^if  ( root != null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^if  ( root == this )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( left == null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( current == null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( s != null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( node == null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( next == null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P15_Unwrap_Block]^return -1;^160^161^162^^^158^164^if  ( root == null )  { return -1; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P16_Remove_Block]^^160^161^162^^^158^164^if  ( root == null )  { return -1; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^160^^^^^158^164^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return -1L;^161^^^^^158^164^return -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return -end;^161^^^^^158^164^return -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return -3;^161^^^^^158^164^return -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return root.indexOf ( object, index ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return root.indexOf (  root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return root.indexOf ( object.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return root.indexOf ( object ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return object.indexOf ( root, root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return root.relativePosition.indexOf ( object, root ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root.AVLNode ( object, root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root .indexOf ( object , end )  ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^return root.AVLNode ( object, index ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return null.indexOf ( object, root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return root .indexOf ( object , size )  ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^return indexOf ( object )  > 0;^174^^^^^173^175^return indexOf ( object )  >= 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] contains [RETURN_TYPE] boolean   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return indexOf ( object )  >= -8;^174^^^^^173^175^return indexOf ( object )  >= 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] contains [RETURN_TYPE] boolean   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^return contains ( object )  >= 0;^174^^^^^173^175^return indexOf ( object )  >= 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] contains [RETURN_TYPE] boolean   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^174^^^^^173^175^return indexOf ( object )  >= 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] contains [RETURN_TYPE] boolean   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^final Object[] array = new Object[size() + 7 ];^185^^^^^183^190^final Object[] array = new Object[size (  ) ];^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P3_Replace_Literal]^final Object[] array = new Object[size() - 1 ];^185^^^^^183^190^final Object[] array = new Object[size (  ) ];^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P14_Delete_Statement]^^185^^^^^183^190^final Object[] array = new Object[size (  ) ];^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P2_Replace_Operator]^if  ( root == null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P8_Replace_Mix]^if  ( root != this )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( result != -1 )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( nextNode == null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( left == null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( current == null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( s != null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( node == null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( otherTree != null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P9_Replace_Statement]^if  ( next == null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P15_Unwrap_Block]^root.toArray(array, root.relativePosition);^186^187^188^^^183^190^if  ( root != null )  { root.toArray ( array, root.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P16_Remove_Block]^^186^187^188^^^183^190^if  ( root != null )  { root.toArray ( array, root.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get ( nextIndex ) ; }^186^^^^^183^190^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P13_Insert_Block]^if  ( s != null )  {     sAbsolutePosition += s.relativePosition; }^186^^^^^183^190^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^186^^^^^183^190^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^186^^^^^183^190^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P5_Replace_Variable]^root.toArray (  root.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P5_Replace_Variable]^root.toArray ( array.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P5_Replace_Variable]^root.toArray ( array ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P5_Replace_Variable]^root.toArray ( root, array.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P5_Replace_Variable]^root.toArray ( root.relativePosition, array ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P7_Replace_Invocation]^root.AVLNode ( array, root.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P8_Replace_Mix]^root.toArray ( array, mid ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P14_Delete_Statement]^^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P11_Insert_Donor_Statement]^left.toArray ( array, index + left.relativePosition ) ;root.toArray ( array, root.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P11_Insert_Donor_Statement]^right.toArray ( array, index + right.relativePosition ) ;root.toArray ( array, root.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P11_Insert_Donor_Statement]^return root.indexOf ( object, root.relativePosition ) ;root.toArray ( array, root.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P13_Insert_Block]^if  (  ( root )  != null )  {     root.toArray ( array, root.relativePosition ) ; }^187^^^^^183^190^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P5_Replace_Variable]^root.toArray ( array, root.relativePosition.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P5_Replace_Variable]^root.toArray ( array, root ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P8_Replace_Mix]^root.toArray ( array, relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[P3_Replace_Literal]^checkInterval ( index, -2, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() - 7  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^checkInterval ( start, 0, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^set ( index, 0, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^checkInterval ( nextIndex, 0, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( fromIndex, 0, size (  )  ) ;checkInterval ( index, 0, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( index, 0, size (  )  - 1 ) ;checkInterval ( index, 0, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() + 2  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^if  ( root != null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^if  ( root == this )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( left == null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( current == null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( s != null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( node == null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( next == null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P15_Unwrap_Block]^root = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(index, obj, null, null);^203^204^205^206^207^200^209^if  ( root == null )  { root = new AVLNode<E> ( index, obj, null, null ) ; } else { root = root.insert ( index, obj ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P16_Remove_Block]^^203^204^205^206^207^200^209^if  ( root == null )  { root = new AVLNode<E> ( index, obj, null, null ) ; } else { root = root.insert ( index, obj ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     setRight ( new AVLNode<E> (  ( +1 ) , obj, right, this ) , null ) ; }else {     setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^203^^^^^200^209^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( ! ( coll.isEmpty (  )  )  )  {     root = new AVLNode<E> ( coll ) ;     size = coll.size (  ) ; }^203^^^^^200^209^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     setLeft ( new AVLNode<E> (  ( -1 ) , obj, this, left ) , null ) ; }else {     setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^203^^^^^200^209^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^203^^^^^200^209^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( mid < end )  {     right = new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next ) ; }else {     rightIsNext = true;     right = next; }^203^^^^^200^209^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.insert ( nextIndex, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.insert ( index, value ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.insert (  obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.insert ( index ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.insert ( obj, index ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = obj.insert ( index, root ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = index.insert ( root, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^root = root.insertOnLeft ( index, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^root = root .insertOnLeft ( size , value )  ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^root = new AVLNode<E> ( index, obj, null, null ) ;root = root.insert ( index, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^root = root.remove ( index ) ;root = root.insert ( index, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.insert ( start, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^root = root .insertOnLeft ( start , obj )  ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = root.insertOnLeft ( mid, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^root = root =  new AVLNode<E> (  ( +1 ) , obj, right, this )  ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^root = new AVLNode<E> (  obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^root = new AVLNode<E> ( index,  null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = new AVLNode<E> ( index, value, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = new AVLNode<E> ( obj, index, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = new AVLNode<E> ( index, obj, true, true ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^root = new AVLNode<E> ( coll ) ;root = new AVLNode<E> ( index, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;root = new AVLNode<E> ( index, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^root = root.insert ( index, obj ) ;root = new AVLNode<E> ( index, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  (  ( root )  == null )  {     root = new AVLNode<E> ( index, obj, null, null ) ; }else {     root = root.insert ( index, obj ) ; }^204^^^^^200^209^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( ! ( coll.isEmpty (  )  )  )  {     root = new AVLNode<E> ( coll ) ;     size = coll.size (  ) ; }^204^^^^^200^209^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = new AVLNode<E> ( relativePosition, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = new AVLNode<E> ( start, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = new AVLNode<E> ( index, obj, this, this ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.insert ( mid, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = new AVLNode<E> ( mid, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = root.insertOnLeft ( index, value ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^if  ( c .iterator (  )   )  {^224^^^^^223^232^if  ( c.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( !coll.isEmpty (  )  )  {^224^^^^^223^232^if  ( c.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( !hasNext (  )  )  {^224^^^^^223^232^if  ( c.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P9_Replace_Statement]^if  ( !hasPrevious (  )  )  {^224^^^^^223^232^if  ( c.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P15_Unwrap_Block]^return false;^224^225^226^^^223^232^if  ( c.isEmpty (  )  )  { return false; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P16_Remove_Block]^^224^225^226^^^223^232^if  ( c.isEmpty (  )  )  { return false; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^224^^^^^223^232^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^224^^^^^223^232^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^224^^^^^223^232^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^224^^^^^223^232^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return true;^225^^^^^223^232^return false;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^modCount += c.size() - 0 ;^227^^^^^223^232^modCount += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^modCount += c .isEmpty (  )  ;^227^^^^^223^232^modCount += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^modCount +=  null.size (  ) ;^227^^^^^223^232^modCount += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^size += c.size (  ) ;modCount += c.size (  ) ;^227^^^^^223^232^modCount += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^size = coll.size (  ) ;modCount += c.size (  ) ;^227^^^^^223^232^modCount += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^modCount += c.size() + 4 ;^227^^^^^223^232^modCount += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^227^228^^^^223^232^modCount += c.size (  ) ; final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P4_Replace_Constructor]^final AVLNode<E> cTree = final new AVLNode<E> (  ( +1 ) , obj, right, this )  ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^root = root != null ? cTree : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root == null ? cTree : root.addAll ( cTree, start ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root == null ? cTree : root.addAll (  size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root == null ? cTree : root.addAll ( cTree ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = cTree == null ? root : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = size == null ? cTree : root.addAll ( cTree, root ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P6_Replace_Expression]^root = root ( root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^root = root == null ? cTree : root.getOffset ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = root == this ? cTree : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root == null ? cTree : root.addAll ( cTree, index ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root == null ? size : root.addAll ( cTree, cTree ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = root == null ? cTree : root.getOffset ( cTree, mid ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^229^230^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ; size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^size += c.size() + 5 ;^230^^^^^223^232^size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^size +=  null.size (  ) ;^230^^^^^223^232^size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^modCount += c.size (  ) ;size += c.size (  ) ;^230^^^^^223^232^size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^size = coll.size (  ) ;size += c.size (  ) ;^230^^^^^223^232^size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^size += c.size() + 9 ;^230^^^^^223^232^size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^size += c .isEmpty (  )  ;^230^^^^^223^232^size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^230^^^^^223^232^size += c.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^return false;^231^^^^^223^232^return true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^checkInterval ( index, 0, size (  )   !=  1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, index, size (  )  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size (  )   ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() + 3  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^checkInterval ( nextIndex, 0, size (  )  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^244^245^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ; final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( fromIndex, 0, size (  )  ) ;checkInterval ( index, 0, size (  )  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( index, 0, size (  )  ) ;checkInterval ( index, 0, size (  )  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() + 2  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final AVLNode<E> node = index.get ( root ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^final AVLNode<E> node = root.remove ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^final AVLNode<E> node = root .set ( end , value )  ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^final AVLNode<E> node = root.get ( start ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final E result = get ( index ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> node = root.get ( index ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final E result = value;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final E result = node.value.value;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final E result = node;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final E value = next.getValue (  ) ;final E result = node.value;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final E result = get ( index ) ;final E result = node.value;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^node.setValue ( value ) ;^247^^^^^243^249^node.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^node.insert ( obj ) ;^247^^^^^243^249^node.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^247^248^^^^243^249^node.setValue ( obj ) ; return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^current.setValue ( obj ) ;node.setValue ( obj ) ;^247^^^^^243^249^node.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return value;^248^^^^^243^249^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^checkInterval ( index, 0, size (  )   &  1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size (  )  - nextIndex ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() + 2  - 1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^checkInterval ( mid, 0, size (  )  - 1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^260^261^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ; final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( fromIndex, 0, size (  )  ) ;checkInterval ( index, 0, size (  )  - 1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^checkInterval ( index, 0, size (  )  ) ;checkInterval ( index, 0, size (  )  - 1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^checkInterval ( index, 0, size() + 3  - 1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final E result = get ( relativePosition ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^final E result = remove ( index ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final E result = node.value;final E result = get ( index ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final int oldOffset = getOffset ( node ) ;final E result = get ( index ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final E result = get ( index ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^final E result = get ( mid ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.remove ( start ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = index.remove ( root ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P7_Replace_Invocation]^root = root.get ( index ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root =  root.remove ( size ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;root = root.remove ( index ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex ) ;root = root.remove ( index ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;root = root.remove ( index ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^root = root.insert ( index, obj ) ;root = root.remove ( index ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^root = root.remove ( nextIndex ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = root.get ( size ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P14_Delete_Statement]^^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P5_Replace_Variable]^return value;^264^^^^^258^265^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^root = true;^273^^^^^271^275^root = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^current = null;root = null;^273^^^^^271^275^root = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^next = null;root = null;^273^^^^^271^275^root = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P11_Insert_Donor_Statement]^right = next;root = null;^273^^^^^271^275^root = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P3_Replace_Literal]^size = -9;^274^^^^^271^275^size = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P8_Replace_Mix]^size = 0 ;^274^^^^^271^275^size = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[P2_Replace_Operator]^if  ( index < startIndex && index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( index <= startIndex || index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( index < startIndex || index < endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( nextIndex < startIndex || index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( index < start || index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( index < startIndex || index > start )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( endIndex < startIndex || index > index )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( index < endIndex || index > startIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( index < startIndex ) {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P6_Replace_Expression]^if  (  index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P6_Replace_Expression]^if  (  ( "Invalid index:" + index )  + ", size=" + size (  ) )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( "Invalid index:" + index + ", size=" )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( "Invalid index:" + index )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^if  (  index > mid )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P15_Unwrap_Block]^throw new java.lang.IndexOutOfBoundsException(((("Invalid index:" + index) + ", size=") + (size())));^287^288^289^^^286^290^if  ( index < startIndex || index > endIndex )  { throw new IndexOutOfBoundsException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P16_Remove_Block]^^287^288^289^^^286^290^if  ( index < startIndex || index > endIndex )  { throw new IndexOutOfBoundsException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( index < startIndex )  ||  ( index > endIndex )  )  {     throw new IndexOutOfBoundsException (  (  (  ( "Invalid index:" + index )  + ", size=" )  +  ( size (  )  )  )  ) ; }^288^^^^^286^290^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new IndexOutOfBoundsException  (" ")  ;^288^^^^^286^290^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new IndexOutOfBoundsException  (" ")  ;^288^^^^^286^290^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IndexOutOfBoundsException  (" ")  ;^288^^^^^286^290^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new IndexOutOfBoundsException  (" ")  ;^288^^^^^286^290^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P14_Delete_Statement]^^288^^^^^286^290^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^return result;^397^^^^^396^398^return value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^this.value = value;^406^^^^^405^407^this.value = obj;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setValue [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = obj;this.value = obj;^406^^^^^405^407^this.value = obj;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setValue [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[P1_Replace_Type]^final  short  indexRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P2_Replace_Operator]^final int indexRelativeToMe = index  >=  relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^final int indexRelativeToMe = index - mid;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - index;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^final int indexRelativeToMe = index - index;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;final int indexRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int result = left.indexOf ( object, index + left.relativePosition ) ;final int indexRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( indexRelativeToMe != 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P3_Replace_Literal]^if  ( indexRelativeToMe == absolutePositionOfParent )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( index == 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( indexRelativeToMe == 2 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( indexRelativeToMe > 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( indexRelativeToMe <= 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P15_Unwrap_Block]^return this;^416^417^418^^^413^425^if  ( indexRelativeToMe == 0 )  { return this; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P16_Remove_Block]^^416^417^418^^^413^425^if  ( indexRelativeToMe == 0 )  { return this; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^416^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^416^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^416^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe <= 0 )  {     return insertOnLeft ( indexRelativeToMe, obj ) ; }^416^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^416^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^416^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( c.isEmpty (  )  )  {     return false; }^416^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^return null;^417^^^^^413^425^return this;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P2_Replace_Operator]^final AVLNode<E> nextNode = indexRelativeToMe <= 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P3_Replace_Literal]^final AVLNode<E> nextNode = indexRelativeToMe < -4 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^final AVLNode<E> nextNode = size < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P6_Replace_Expression]^final AVLNode<E> nextNode  =  getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P6_Replace_Expression]^final AVLNode<E> nextNode  =  getLeftSubTree (  )  ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getRightSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getLeftSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> nextNode = start < 0 ? getLeftSubTree (  )  : getLeftSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P14_Delete_Statement]^^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( nextNode != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( nextNode == false )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P15_Unwrap_Block]^return null;^421^422^423^^^413^425^if  ( nextNode == null )  { return null; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P16_Remove_Block]^^421^422^423^^^413^425^if  ( nextNode == null )  { return null; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( c.isEmpty (  )  )  {     return false; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^421^^^^^413^425^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^return true;^422^^^^^413^425^return null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^return indexRelativeToMe.get ( nextNode ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P7_Replace_Invocation]^return nextNode.insert ( indexRelativeToMe ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P7_Replace_Invocation]^return nextNode .set ( absolutePositionOfParent , value )  ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P5_Replace_Variable]^return nextNode.get ( startIndex ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P8_Replace_Mix]^return nextNode.insert ( start ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P14_Delete_Statement]^^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  == null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( index + left.relativePosition )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( result != -1 )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  != null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  != this )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  == null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^final int result = left.indexOf(object, (index + (left.relativePosition))); if (result != (-1)) {    return result;};^431^432^433^434^435^430^444^if  ( getLeftSubTree (  )  != null )  { final int result = left.indexOf ( object, index + left.relativePosition ) ; if  ( result != -1 )  { return result; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^431^432^433^434^435^430^444^if  ( getLeftSubTree (  )  != null )  { final int result = left.indexOf ( object, index + left.relativePosition ) ; if  ( result != -1 )  { return result; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^431^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( result >= -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( result != -5 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( indexRelativeToMe != -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( result != -1 + 1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return result;^433^434^435^^^430^444^if  ( result != -1 )  { return result; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^433^434^435^^^430^444^if  ( result != -1 )  { return result; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^433^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^433^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^433^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^433^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^433^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^433^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( c.isEmpty (  )  )  {     return false; }^433^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return relativePosition;^434^^^^^430^444^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return mid;^434^^^^^430^444^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return startIndex;^434^^^^^430^444^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  result = left.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  ||  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf ( object, nextIndex + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf (  index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf ( object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = object.indexOf ( left, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf ( index, object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf ( object, left.relativePosition + index ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = index.indexOf ( object, left + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final int result = left.toArray ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final int result = left.indexOf ( object, startIndex + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int indexRelativeToMe = index - relativePosition;final int result = left.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^432^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^432^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  |  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf ( object, size + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf ( object, index + mid ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final int result = left .indexOf ( object )  ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( result != --4 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( size != -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( indexRelativeToMe != -3 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  !=  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.indexOf ( object, mid + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final int result = left.indexOf ( object, index + indexRelativeToMe ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  ^  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int result = left.relativePosition.indexOf ( object, index + left ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final int result = left.toArray ( object, index + startIndex ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( value != null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( value == null ? value != object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( result == null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( object == null ? value == value : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( value == object )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( value == this ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return index;^437^438^439^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  { return index; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^437^438^439^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  { return index; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return startIndex;^438^^^^^430^444^return index;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return start;^438^^^^^430^444^return index;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( index + right.relativePosition )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  != null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  != false )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  == null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return right.indexOf(object, (index + (right.relativePosition)));^440^441^442^^^430^444^if  ( getRightSubTree (  )  != null )  { return right.indexOf ( object, index + right.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^440^441^442^^^430^444^if  ( getRightSubTree (  )  != null )  { return right.indexOf ( object, index + right.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     final int result = left.indexOf ( object,  ( index +  ( left.relativePosition )  )  ) ;     if  ( result !=  ( -1 )  )  {         return result;     } }^440^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^440^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^440^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^440^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^return right.indexOf ( object, index  ^  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object, relativePosition + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return 3.indexOf ( object, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object, index + indexRelativeToMe ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf (  index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( index, object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object, right.relativePosition + index ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return index.indexOf ( object, right + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return right.toArray ( object, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return right .indexOf ( object )  ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^441^^^^^430^444^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^return right.indexOf ( object, index  >>  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object, mid + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object, index + mid ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return object.indexOf ( right, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^return right.indexOf ( object, index  ||  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object, start + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.indexOf ( object, index + nextIndex ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right.relativePosition.indexOf ( object, index + right ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return right.toArray ( object, index + mid ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^return -0;^443^^^^^430^444^return -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return -1 >> 2;^443^^^^^430^444^return -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^array[index] = result;^453^^^^^452^460^array[index] = value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P8_Replace_Mix]^array[index]  =  array[index] ;^453^^^^^452^460^array[index] = value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  == null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P6_Replace_Expression]^if  ( index + left.relativePosition )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  != null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  != true )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  == null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P15_Unwrap_Block]^left.toArray(array, (index + (left.relativePosition)));^454^455^456^^^452^460^if  ( getLeftSubTree (  )  != null )  { left.toArray ( array, index + left.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P16_Remove_Block]^^454^455^456^^^452^460^if  ( getLeftSubTree (  )  != null )  { left.toArray ( array, index + left.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^454^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( root )  != null )  {     root.toArray ( array, root.relativePosition ) ; }^454^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^454^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^454^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P2_Replace_Operator]^left.toArray ( array, index  >=  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, mid + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, index + mid ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray (  index + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( index, array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, left + index.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, left.relativePosition + index ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( left, index + array.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P7_Replace_Invocation]^left.indexOf ( array, index + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P7_Replace_Invocation]^left .rotateRight (  )  ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P8_Replace_Mix]^left.toArray ( array, index + relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P14_Delete_Statement]^^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^455^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P2_Replace_Operator]^left.toArray ( array, index  &  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, startIndex + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^left.toArray ( left.relativePosition, index + array ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P6_Replace_Expression]^if  ( index + right.relativePosition )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  != null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  != this )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  == null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P15_Unwrap_Block]^right.toArray(array, (index + (right.relativePosition)));^457^458^459^^^452^460^if  ( getRightSubTree (  )  != null )  { right.toArray ( array, index + right.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P16_Remove_Block]^^457^458^459^^^452^460^if  ( getRightSubTree (  )  != null )  { right.toArray ( array, index + right.relativePosition ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^457^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( root )  != null )  {     root.toArray ( array, root.relativePosition ) ; }^457^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^457^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^457^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P2_Replace_Operator]^right.toArray ( array, index  !=  right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, size + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray (  index + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray ( right, index + array.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, right.relativePosition + index ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P7_Replace_Invocation]^right.indexOf ( array, index + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P8_Replace_Mix]^right.toArray ( array, index + result ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P14_Delete_Statement]^^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^458^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^458^^^^^452^460^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P2_Replace_Operator]^right.toArray ( array, index  &  right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, nextIndex + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, index + mid ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, right + index.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P7_Replace_Invocation]^right .rotateRight (  )  ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[P2_Replace_Operator]^if  ( rightIsNext && right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( rightIsNext || right != null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( leftIsPrevious || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( right || rightIsNext == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( rightIsNextIsNext || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( rightIsNext ) {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  (  right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( rightIsNext || right == false )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return right;^468^469^470^^^467^472^if  ( rightIsNext || right == null )  { return right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^468^469^470^^^467^472^if  ( rightIsNext || right == null )  { return right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( rightIsNext )  {     right = leftMax.right; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  (  ( getRightSubTree (  )  )  == null )  &&  (  ( getLeftSubTree (  )  )  == null )  )  {     return null; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^468^^^^^467^472^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return right.max (  ) ;^471^^^^^467^472^return right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^471^^^^^467^472^return right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( leftIsPrevious && left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( leftIsPrevious || left != null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( rightIsNext || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( left || leftIsPrevious == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( leftIsPreviousIsPrevious || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( leftIsPrevious ) {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  (  left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return left;^480^481^482^^^479^484^if  ( leftIsPrevious || left == null )  { return left; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^480^481^482^^^479^484^if  ( leftIsPrevious || left == null )  { return left; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^480^^^^^479^484^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  (  ( getRightSubTree (  )  )  == null )  &&  (  ( getLeftSubTree (  )  )  == null )  )  {     return null; }^480^^^^^479^484^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^480^^^^^479^484^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^480^^^^^479^484^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^480^^^^^479^484^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( leftIsPrevious )  {     left = rightMin.left; }^480^^^^^479^484^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return 0;^481^^^^^479^484^return left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return null.max (  ) ;^483^^^^^479^484^return left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return left.min (  ) ;^483^^^^^479^484^return left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^483^^^^^479^484^return left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  indexRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int indexRelativeToMe = index  <<  relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int nextIndexRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int indexRelativeToMe = index - size;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - index;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final int indexRelativeToMe = index - mid;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;final int indexRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int result = left.indexOf ( object, index + left.relativePosition ) ;final int indexRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( indexRelativeToMe < 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( indexRelativeToMe <= indexRelativeToMe )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( nextIndex <= 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( indexRelativeToMe <= 0 * 4 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( indexRelativeToMe == 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( indexRelativeToMe > 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return insertOnLeft(indexRelativeToMe, obj);^496^497^498^^^493^500^if  ( indexRelativeToMe <= 0 )  { return insertOnLeft ( indexRelativeToMe, obj ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^496^497^498^^^493^500^if  ( indexRelativeToMe <= 0 )  { return insertOnLeft ( indexRelativeToMe, obj ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^496^^^^^493^500^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^496^^^^^493^500^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnLeft ( indexRelativeToMe, value ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnLeft (  obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnLeft ( indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnLeft ( obj, indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return insertOnRight ( indexRelativeToMe, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( indexRelativeToMe > 0 )  { return insertOnLeft ( indexRelativeToMe, obj ) ; }^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe <= 0 )  {     return insertOnLeft ( indexRelativeToMe, obj ) ; }^497^^^^^493^500^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnLeft ( startIndex, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return insertOnRight ( indexRelativeToMe, value ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnLeft ( relativePosition, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnRight ( relativePosition, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnRight ( indexRelativeToMe, value ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnRight (  obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnRight ( indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnRight ( obj, indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return insertOnLeft ( indexRelativeToMe, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return insertOnRight ( mid, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return insertOnRight ( result, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  == this )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>((-1), obj, this, left), null);^503^504^505^506^507^502^515^if  ( getLeftSubTree (  )  == null )  { setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ; } else { setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^503^504^505^506^507^502^515^if  ( getLeftSubTree (  )  == null )  { setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ; } else { setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     root = new AVLNode<E> ( index, obj, null, null ) ; }else {     root = root.insert ( index, obj ) ; }^503^^^^^502^515^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     setRight ( new AVLNode<E> (  ( +1 ) , obj, right, this ) , null ) ; }else {     setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^503^^^^^502^515^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^503^^^^^502^515^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.insert ( relativePosition, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.insert ( indexRelativeToMe, value ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.insert (  obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.insert ( indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( indexRelativeToMe.insert ( left, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( obj.insert ( indexRelativeToMe, left ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setLeft ( left.insertOnLeft ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setLeft ( left .insertOnLeft ( absolutePositionOfParent , obj )  , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return insertOnLeft ( indexRelativeToMe, obj ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return insertOnRight ( indexRelativeToMe, obj ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.insert ( obj, indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setLeft ( new AVLNode<E> ( -end, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P4_Replace_Constructor]^setLeft ( setLeft (  new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next )  , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1, value, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1,  this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1, obj, this ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1, left, this, obj ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( ! ( coll.isEmpty (  )  )  )  {     root = new AVLNode<E> ( coll ) ;     size = coll.size (  ) ; }^504^^^^^502^515^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setLeft ( new AVLNode<E> ( -absolutePositionOfParent, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setLeft ( new AVLNode<E> ( -0, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setLeft ( new AVLNode<E> ( -nextIndex, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.insert ( mid, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setLeft ( left.insertOnLeft ( size, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.insert ( nextIndex, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setLeft ( 4.insertOnLeft ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition > 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition >= -6 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( result >= 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition >= 0 + 4 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)++;^509^510^511^^^502^515^if  ( relativePosition >= 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^509^510^511^^^502^515^if  ( relativePosition >= 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^509^^^^^502^515^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^509^^^^^502^515^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^509^^^^^502^515^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> ret = getValue (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^512^513^^^^502^515^final AVLNode<E> ret = balance (  ) ; recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^513^^^^^502^515^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^513^514^^^^502^515^recalcHeight (  ) ; return ret;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^513^^^^^502^515^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^513^^^^^502^515^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == false )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>((+1), obj, right, this), null);^518^519^520^521^522^517^529^if  ( getRightSubTree (  )  == null )  { setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ; } else { setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^518^519^520^521^522^517^529^if  ( getRightSubTree (  )  == null )  { setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ; } else { setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     root = new AVLNode<E> ( index, obj, null, null ) ; }else {     root = root.insert ( index, obj ) ; }^518^^^^^517^529^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     setLeft ( new AVLNode<E> (  ( -1 ) , obj, this, left ) , null ) ; }else {     setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^518^^^^^517^529^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( mid < end )  {     right = new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next ) ; }else {     rightIsNext = true;     right = next; }^518^^^^^517^529^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.insert ( mid, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.insert ( indexRelativeToMe, value ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.insert (  obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.insert ( indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( indexRelativeToMe.insert ( right, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( obj.insert ( indexRelativeToMe, right ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setRight ( right.insertOnLeft ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setRight ( right.insertOnLeft ( size, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return insertOnLeft ( indexRelativeToMe, obj ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return insertOnRight ( indexRelativeToMe, obj ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setRight ( new AVLNode<E> ( +-3, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P4_Replace_Constructor]^setRight ( setRight (  new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next )  , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1, value, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1,  right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1, obj,  this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1, right, obj, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( ! ( coll.isEmpty (  )  )  )  {     root = new AVLNode<E> ( coll ) ;     size = coll.size (  ) ; }^519^^^^^517^529^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setRight ( new AVLNode<E> ( +height, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setRight ( new AVLNode<E> ( +, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^setRight ( new AVLNode<E> ( +endIndex, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.insert ( relativePosition, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.insert ( obj, indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setRight ( right .insertOnLeft ( result , value )  , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.insert ( result, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setRight ( right .insertOnLeft ( height , result )  , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition == 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition < startIndex )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( mid < 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition < 0 + 1 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)--;^523^524^525^^^517^529^if  ( relativePosition < 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^523^524^525^^^517^529^if  ( relativePosition < 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^523^^^^^517^529^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^523^^^^^517^529^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^523^^^^^517^529^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> ret = getValue (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^527^^^^^517^529^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^527^528^^^^517^529^recalcHeight (  ) ; return ret;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^527^^^^^517^529^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^527^^^^^517^529^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return rightIsNext ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return left ? null : leftIsPrevious;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return leftIsPreviousIsPrevious ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return leftIsPrevious ? true : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return leftIsPrevious ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return right ? null : rightIsNext;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return rightIsNextIsNext ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return leftIsPrevious ? this : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^return getRightSubTree (  )  != null ? this : right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^return getRightSubTree ( right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getLeftSubTree (  )  == null ? this : right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getRightSubTree (  )  == null ? this : right.min (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getRightSubTree (  )  == null ? this : right .max (  )  ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null )  { return getRightSubTree (  )  == null ? this : right.max (  ) ; }^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  != null )  { return getRightSubTree (  )  == null ? this : right.max (  ) ; }^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return getRightSubTree (  )  == null ? this : right.max (  ) ; }^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^return getLeftSubTree (  )  != null ? this : left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^return getLeftSubTree ( left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getRightSubTree (  )  == null ? this : left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getLeftSubTree (  )  == null ? this : left.max (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return getLeftSubTree (  )  == this ? this : left.max (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( getLeftSubTree (  )  != null )  { return getLeftSubTree (  )  == null ? this : left.min (  ) ; }^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( getLeftSubTree (  )  == null )  { return getLeftSubTree (  )  == null ? this : left.min (  ) ; }^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  indexRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int indexRelativeToMe = index  ==  relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int startIndexRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int indexRelativeToMe = index - startIndex;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - index;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;final int indexRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int result = left.indexOf ( object, index + left.relativePosition ) ;final int indexRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( indexRelativeToMe >= 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( indexRelativeToMe == 5 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( startIndex == 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( indexRelativeToMe == 3 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( indexRelativeToMe > 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( indexRelativeToMe <= 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return removeSelf();^573^574^575^^^570^589^if  ( indexRelativeToMe == 0 )  { return removeSelf (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^573^574^575^^^570^589^if  ( indexRelativeToMe == 0 )  { return removeSelf (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^573^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^573^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe <= 0 )  {     return insertOnLeft ( indexRelativeToMe, obj ) ; }^573^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^573^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^573^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^573^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return removeMax (  ) ;^574^^^^^570^589^return removeSelf (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^574^^^^^570^589^return removeSelf (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( indexRelativeToMe >= 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( indexRelativeToMe == 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( indexRelativeToMe > height )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( indexRelativeToMe > start )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( indexRelativeToMe > result )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( size > 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition < 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition > 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( indexRelativeToMe > 0 / 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( indexRelativeToMe <= 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^setRight(right.remove(indexRelativeToMe), right.right); if ((relativePosition) < 0) {    (relativePosition)++;};^576^577^578^579^580^570^589^if  ( indexRelativeToMe > 0 )  { setRight ( right.remove ( indexRelativeToMe ) , right.right ) ; if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^576^577^578^579^580^570^589^if  ( indexRelativeToMe > 0 )  { setRight ( right.remove ( indexRelativeToMe ) , right.right ) ; if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > 4 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( size > 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition > 0L )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)--;^583^584^585^^^570^589^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^583^584^585^^^570^589^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^583^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^583^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^583^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.remove ( start ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.remove ( indexRelativeToMe ) .left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.remove ( indexRelativeToMe )  ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( indexRelativeToMe.remove ( left ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.left.remove ( indexRelativeToMe ) , left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getOffset ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setLeft ( left.get ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setLeft ( left.remove ( startIndex ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return insertOnLeft ( indexRelativeToMe, obj ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return insertOnRight ( indexRelativeToMe, obj ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.remove ( mid ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setLeft ( left.get ( result ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition <= 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition < index )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( indexRelativeToMe < 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition < 4 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)++;^578^579^580^^^570^589^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^578^579^580^^^570^589^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^578^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^578^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^578^^^^^570^589^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.remove ( mid ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( 0.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.remove ( indexRelativeToMe ) .right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.remove ( indexRelativeToMe )  ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( indexRelativeToMe.remove ( right ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.right.remove ( indexRelativeToMe ) , right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getOffset ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setRight ( right.get ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^getOffset ( right.remove ( startIndex ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setRight ( right.get ( mid ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition < currentIndex )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition < 0 - 4 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > -6 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( indexRelativeToMe > 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition > 2 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.remove ( result ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setRight ( right.remove ( relativePosition ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.remove ( nextIndex ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( 1.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.remove ( nextIndex ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.remove ( result ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setLeft ( left.get ( relativePosition ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^587^^^^^570^589^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^587^^^^^570^589^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^587^^^^^570^589^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^587^^^^^570^589^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getValue (  ) ;^588^^^^^570^589^return balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^588^^^^^570^589^return balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == true )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return removeSelf();^592^593^594^^^591^601^if  ( getRightSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^592^593^594^^^591^601^if  ( getRightSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  (  ( getRightSubTree (  )  )  == null )  &&  (  ( getLeftSubTree (  )  )  == null )  )  {     return null; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^592^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return removeMax (  ) ;^593^^^^^591^601^return removeSelf (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^593^^^^^591^601^return removeSelf (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.removeMax (  ) .right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.removeMax (  )  ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( right.right.removeMax (  ) , right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^heightRightMinusLeft ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setRight ( right.removeMin (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition <= 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition < -5 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( indexRelativeToMe < 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition < 0 - 3 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)++;^596^597^598^^^591^601^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^596^597^598^^^591^601^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^596^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^596^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^596^^^^^591^601^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getValue (  ) ;^600^^^^^591^601^return balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^600^^^^^591^601^return balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  == this )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return removeSelf();^604^605^606^^^603^613^if  ( getLeftSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^604^605^606^^^603^613^if  ( getLeftSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^604^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return removeMax (  ) ;^605^^^^^603^613^return removeSelf (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^605^^^^^603^613^return removeSelf (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.removeMin (  ) .left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.removeMin (  )  ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( left.left.removeMin (  ) , left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^heightRightMinusLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setLeft ( left.removeMax (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > 7 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( mid > 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( mid > 3 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)--;^608^609^610^^^603^613^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^608^609^610^^^603^613^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^608^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^608^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^608^^^^^603^613^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^611^^^^^603^613^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^611^612^^^^603^613^recalcHeight (  ) ; return balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^611^^^^^603^613^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^611^^^^^603^613^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getValue (  ) ;^612^^^^^603^613^return balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^612^^^^^603^613^return balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null || getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null && getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  != null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( getRightSubTree (  )  == null ) {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  (  getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null && getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null && getRightSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == this && getLeftSubTree (  )  == this )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return null;^621^622^623^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return null; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^621^622^623^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return null; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^621^^^^^606^636^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^621^^^^^606^636^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^621^^^^^606^636^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return this;^622^^^^^607^637^return null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return true;^622^^^^^607^637^return null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition > 0 )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition + (relativePosition > 0 ? 0 : 1) )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == true )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^if ((relativePosition) > 0) {    left.relativePosition += (relativePosition) + ((relativePosition) > 0 ? 0 : 1);}; left.max().setRight(null, right); return left;^624^625^626^627^^609^639^if  ( getRightSubTree (  )  == null )  { if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^624^625^626^627^^609^639^if  ( getRightSubTree (  )  == null )  { if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > currentIndex )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > -9 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > -2 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( result > 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition + (relativePosition > 0 ? 0 : 1) )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition > 0 + 4 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^left.relativePosition += (relativePosition) + ((relativePosition) > 0 ? 0 : 1);^625^626^627^^^610^640^if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^625^626^627^^^610^640^if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     right.relativePosition +=  ( relativePosition )  -  (  ( relativePosition )  < 0 ? 0 : 1 ) ;     right.min (  ) .setLeft ( null, left ) ;     return right; }^625^^^^^610^640^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     if  (  ( relativePosition )  > 0 )  {         left.relativePosition +=  ( relativePosition )  +  (  ( relativePosition )  > 0 ? 0 : 1 ) ;     }     left.max (  ) .setRight ( null, right ) ;     return left; }^625^^^^^610^640^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  <<  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  ( relativePosition >= 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 2 ? 2 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > nextIndex ? nextIndex : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : nextIndex ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left.relativePosition += indexRelativeToMe +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^left.relativePosition + =  1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^left.relativePosition + =  0 ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left.relativePosition += relativePosition +  ( relativePosition > 1 ? 1 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {     left.relativePosition +=  ( relativePosition )  +  (  ( relativePosition )  > 0 ? 0 : 1 ) ; }^626^^^^^611^641^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  ||  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > -1 ? -1 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition >  ?  : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : -3 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left.relativePosition += relativePosition +  ( relativePosition > 0L ? 0L : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left.max (  ) .setRight ( null ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^left.max (  ) .getOffset ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^left.min (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^628^629^^^^613^643^left.max (  ) .setRight ( null, right ) ; return left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > end )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > -7 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( indexRelativeToMe > 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( start > 2 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  &  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 8 ? 8 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > absolutePositionOfParent ? absolutePositionOfParent : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : expectedModCount ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left.relativePosition += nextIndex +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left.relativePosition += relativePosition +  ( relativePosition > 4 ? 4 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  ( relativePosition == 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > -2 ? -2 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 7 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left.relativePosition += relativePosition +  ( relativePosition > 0 >> 2 ? 0 >> 2 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^left .max (  )  .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition - (relativePosition < 0 ? 0 : 1) )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition < 0 )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  == true )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^right.relativePosition += (relativePosition) - ((relativePosition) < 0 ? 0 : 1); right.min().setLeft(null, left); return right;^631^632^633^634^635^616^646^if  ( getLeftSubTree (  )  == null )  { right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ; right.min (  ) .setLeft ( null, left ) ; return right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^631^632^633^634^635^616^646^if  ( getLeftSubTree (  )  == null )  { right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ; right.min (  ) .setLeft ( null, left ) ; return right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^right.relativePosition += relativePosition  >>   ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^right.relativePosition += relativePosition -  ( relativePosition == 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < nextIndex ? nextIndex : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition <  ?  : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 :  ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^right.relativePosition + =  1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^right.relativePosition + =  0 ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right.relativePosition += relativePosition -  ( relativePosition < 4 ? 4 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {     left.relativePosition +=  ( relativePosition )  +  (  ( relativePosition )  > 0 ? 0 : 1 ) ; }^632^^^^^617^647^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right.min (  ) .setLeft ( null ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^right.min (  ) .getOffset ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^right.min (  )  .insertOnLeft ( fromIndex , result )  ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^right.max (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^633^634^^^^618^648^right.min (  ) .setLeft ( null, left ) ; return right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^right.relativePosition += relativePosition  >   ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^right.relativePosition += relativePosition -  ( relativePosition <= 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 7 ? 7 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < mid ? mid : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : indexRelativeToMe ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right.relativePosition += indexRelativeToMe -  ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right.relativePosition += relativePosition -  ( relativePosition < 0 * 2 ? 0 * 2 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^right.min (  )  .insertOnLeft ( height , value )  ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right.min (  ) .setLeft ( null, this ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( heightRightMinusLeft (  )  >= 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( heightRightMinusLeft (  )  > 4 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( heightRightMinusLeft (  )  > startIndex )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( heightRightMinusLeft (  )  > 8 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition < 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( left == null )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^if  ( relativePosition > 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  > 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( right.heightRightMinusLeft (  )  < 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( left.heightRightMinusLeft (  )  > 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( leftIsPrevious )  {^652^^^^^637^666^if  ( rightIsNext )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^right = leftMax.right;^652^653^654^^^637^666^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^652^653^654^^^637^666^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^652^^^^^637^666^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = leftMax.right.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = leftMax;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right =  null.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = leftMax.value;right = leftMax.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = next;right = leftMax.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( left != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( left == false )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^left = leftPrevious; leftIsPrevious = true;^657^658^^660^661^637^666^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^657^658^^660^661^637^666^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get ( nextIndex ) ; }^657^^^^^637^666^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left =  null;^660^^^^^637^666^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = prev;left = leftPrevious;^660^^^^^637^666^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;left = leftPrevious;^660^^^^^637^666^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;left = leftPrevious;^660^^^^^637^666^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = leftFollower;left = leftPrevious;^660^^^^^637^666^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^leftIsPrevious = false;^661^^^^^637^666^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^661^^^^^637^666^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { leftIsPrevious = true; }^661^^^^^637^666^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > 7 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( indexRelativeToMe > 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition > 4 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)--;^663^664^665^^^637^666^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^663^664^665^^^637^666^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^663^^^^^637^666^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^663^^^^^637^666^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^663^^^^^637^666^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = leftMax.value.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = leftMax;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^value =  null.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = rightMin.value;value = leftMax.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = leftMax.right;value = leftMax.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^left = left.removeMin (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree = otherTree.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.next (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^root = root.remove ( index ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { left = leftPrevious; }^660^^^^^637^666^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> leftMax = left.min (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final AVLNode<E> left.leftPrevious = left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> leftMax = left .max (  )  ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^650^651^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ; value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left = this.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left = this .removeMin (  )  ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return left.max (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( rightIsNext )  {^641^^^^^626^656^if  ( leftIsPrevious )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^left = rightMin.left;^641^642^643^^^626^656^if  ( leftIsPrevious )  { left = rightMin.left; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^641^642^643^^^626^656^if  ( leftIsPrevious )  { left = rightMin.left; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^641^^^^^626^656^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left = rightMin.left.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left = rightMin;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left =  null.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = rightMin.value;left = rightMin.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition <= 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition < fromIndex )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( startIndex < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition < 1 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)++;^645^646^647^^^630^660^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^645^646^647^^^630^660^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^645^^^^^630^660^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^645^^^^^630^660^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^645^^^^^630^660^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = this.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = rightMin.value.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = rightMin;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^value =  null.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = leftMax.value;value = rightMin.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = rightMin.left;value = rightMin.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = 1.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^right = right.removeMax (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = rightFollower;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree = otherTree.removeMin (  ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^root = root.remove ( index ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> rightMin = right.max (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^639^640^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ; value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition < 4 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( size < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition < 3 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( leftIsPrevious )  {^652^^^^^637^667^if  ( rightIsNext )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^right = leftMax.right;^652^653^654^^^637^667^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^652^653^654^^^637^667^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^652^^^^^637^667^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = leftMax.right.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = leftMax;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right =  null.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = leftMax.value;right = leftMax.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = next;right = leftMax.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( left != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( left == true )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^left = leftPrevious; leftIsPrevious = true;^657^658^^660^661^642^672^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^657^658^^660^661^642^672^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get ( nextIndex ) ; }^657^^^^^642^672^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left =  null;^660^^^^^645^675^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = prev;left = leftPrevious;^660^^^^^645^675^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;left = leftPrevious;^660^^^^^645^675^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;left = leftPrevious;^660^^^^^645^675^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = leftFollower;left = leftPrevious;^660^^^^^645^675^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^leftIsPrevious = false;^661^^^^^646^676^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^661^^^^^646^676^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { leftIsPrevious = true; }^661^^^^^646^676^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( relativePosition < 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( relativePosition > startIndex )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( indexRelativeToMe > 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( relativePosition > 4 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^(relativePosition)--;^663^664^665^^^648^678^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^663^664^665^^^648^678^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^663^^^^^648^678^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^663^^^^^648^678^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^663^^^^^648^678^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right  =  right ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = result;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = leftMax.value.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^value = leftMax;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^value =  null.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = rightMin.value;value = leftMax.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = leftMax.right;value = leftMax.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^left = left.removeMin (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree = otherTree.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.next (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^root = root.remove ( index ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { left = leftPrevious; }^660^^^^^645^675^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> leftMax = left.min (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> 0Max = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final AVLNode<E> nullPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final AVLNode<E> left.leftPrevious = left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^650^651^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ; value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return left.max (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return null;^668^^^^^653^683^return this;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( left.heightRightMinusLeft (  )  == 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( left.heightRightMinusLeft (  )  > indexRelativeToMe )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( left.getRightSubTree (  )  > 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( left.heightRightMinusLeft (  )  > 1 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( right.heightRightMinusLeft (  )  < 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( heightRightMinusLeft (  )  > 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^setLeft(left.rotateLeft(), null);^682^683^684^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  { setLeft ( left.rotateLeft (  ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^682^683^684^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  { setLeft ( left.rotateLeft (  ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( right.heightRightMinusLeft (  )  )  < 0 )  {     setRight ( right.rotateRight (  ) , null ) ; }^682^^^^^675^694^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getOffset ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setLeft ( left.rotateRight (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( right.heightRightMinusLeft (  )  <= 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^if  ( right.heightRightMinusLeft (  )  < endIndex )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^if  ( right.getRightSubTree (  )  < 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( right.getRightSubTree (  )  < 4 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( heightRightMinusLeft (  )  > 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( left.heightRightMinusLeft (  )  > 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^setRight(right.rotateRight(), null);^687^688^689^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  { setRight ( right.rotateRight (  ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^687^688^689^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  { setRight ( right.rotateRight (  ) , null ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( left.heightRightMinusLeft (  )  )  > 0 )  {     setLeft ( left.rotateLeft (  ) , null ) ; }^687^^^^^675^694^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getOffset ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setRight ( right.rotateLeft (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return null;^680^^^^^675^694^return this;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return rotateLeft (  ) ;^685^^^^^675^694^return rotateRight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return rotateRight (  ) ;^690^^^^^675^694^return rotateLeft (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new RuntimeException  (" ")  ;^692^^^^^675^694^throw new RuntimeException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new RuntimeException  (" ")  ;^692^^^^^675^694^throw new RuntimeException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new RuntimeException  (" ")  ;^692^^^^^675^694^throw new RuntimeException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new RuntimeException  (" ")  ;^692^^^^^675^694^throw new RuntimeException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^switch  ( getRightSubTree (  )  )  {^676^^^^^675^694^switch  ( heightRightMinusLeft (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^685^^^^^675^694^return rotateRight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^690^^^^^675^694^return rotateLeft (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( node != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( node == this )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return 0;^700^701^702^^^699^704^if  ( node == null )  { return 0; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^700^701^702^^^699^704^if  ( node == null )  { return 0; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( c.isEmpty (  )  )  {     return false; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^700^^^^^699^704^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^return height;^701^^^^^699^704^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return 4;^701^^^^^699^704^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^return start;^701^^^^^699^704^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return 0 >>> 2;^701^^^^^699^704^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return indexRelativeToMe;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return node.relativePosition.relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return node;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return mid;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^if  ( node != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^if  ( null == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^if  ( node == true )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P15_Unwrap_Block]^return 0;^710^711^712^^^709^716^if  ( node == null )  { return 0; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P16_Remove_Block]^^710^711^712^^^709^716^if  ( node == null )  { return 0; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  == null )  {     return -1; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( c.isEmpty (  )  )  {     return false; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^710^^^^^709^716^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^return -8;^711^^^^^709^716^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return 0 / 3;^711^^^^^709^716^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^return -5;^711^^^^^709^716^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return 3;^711^^^^^709^716^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  oldOffset = getOffset ( node ) ;^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final int oldOffset = getHeight ( node ) ;^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;final int oldOffset = getOffset ( node ) ;^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final E result = get ( index ) ;final int oldOffset = getOffset ( node ) ;^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^node.relativePosition = nextIndex;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^node.relativePosition =  newOffest;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;node.relativePosition = newOffest;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.relativePosition += currentSize;node.relativePosition = newOffest;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return newOffest;^715^^^^^709^716^return oldOffset;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return mid;^715^^^^^709^716^return oldOffset;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^height = Math.max ( getLeftSubTree (  >  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^height = Math.max ( getLeftSubTree (  )  != null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  ;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -expectedModCount : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -expectedModCount : getRightSubTree (  ) .height )  + expectedModCount;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -start : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -start : getRightSubTree (  ) .height )  + start;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^height = Math.max ( getLeftSubTree ( getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^height = Math.max ( getRightSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getLeftSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^height = Math.max ( getLeftSubTree (  )  == false ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == false ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -endIndex : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -endIndex : getRightSubTree (  ) .height )  + endIndex;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^getLeftSubTree ( getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getRightSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^getRightSubTree ( getRightSubTree (  ) .height )  + 1;^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getLeftSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1; }^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^return node != null ? -1 : node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return node == null ? -1 : mid;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^return node.height == null ? -1 : node;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^return node ( node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^return   -1 ;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^return getHeight ( getRightSubTree (  )  )   <<  getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return heightRightMinusLeft ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getHeight ( getLeftSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^return getHeight ( getRightSubTree (  )  )  - getHeight ( getRightSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ; }^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> newTop = this;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getRightSubTree (  ) .getRightSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getLeftSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  newTopPosition = relativePosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int 0Position = relativePosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int newTopPosition = size + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final int newTopPosition = relativePosition + getHeight ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition + currentSize;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^745^746^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ; final int myNewPosition = -newTop.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  myNewPosition = -newTop.relativePosition;^746^^^^^741^756^final int myNewPosition = -newTop.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition;final int myNewPosition = -newTop.relativePosition;^746^^^^^741^756^final int myNewPosition = -newTop.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int indexRelativeToMe = index - relativePosition;final int myNewPosition = -newTop.relativePosition;^746^^^^^741^756^final int myNewPosition = -newTop.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int movedPosition = getOffset ( newTop )  &  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int movedPosition = getOffset ( newTop )  + getOffset ( null ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final int movedPosition = getHeight ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final int movedPosition = getOffset ( null )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int oldOffset = getOffset ( node ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int newTopPosition = relativePosition + getOffset ( newTop ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( null, newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight (  newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setRight ( newTop, movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setLeft ( movedNode, newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setRight ( movedNode, newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setRight ( movedNode, newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^newTop.setRight ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^newTop .insertOnLeft ( absolutePositionOfParent , result )  ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^newTop .insertOnLeft ( index , value )  ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( newTop, movedPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset (  newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( newTopPosition, newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^addAll ( newTop, newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^addAll ( newTop, newOffest ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( newTop, newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( newTop, newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( this, oldOffset ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getOffset ( this, myNewPosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setOffset ( this, newTopPosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^753^754^^^^741^756^setOffset ( this, myNewPosition ) ; setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( this, myNewPosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( this, myNewPosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( movedNode, newTopPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset (  movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( movedPosition, movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^addAll ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setOffset ( movedNode, myNewPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> newTop = this;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getLeftSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getRightSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  newTopPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int thisPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int newTopPosition = movedPosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final int newTopPosition = relativePosition + getHeight ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^final int newTopPosition = startIndex + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition + currentSize;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  short  myNewPosition = -newTop.relativePosition;^763^^^^^758^773^final int myNewPosition = -newTop.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition;final int myNewPosition = -newTop.relativePosition;^763^^^^^758^773^final int myNewPosition = -newTop.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int indexRelativeToMe = index - relativePosition;final int myNewPosition = -newTop.relativePosition;^763^^^^^758^773^final int myNewPosition = -newTop.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P1_Replace_Type]^final  long  movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^final int movedPosition = getOffset ( newTop )  |  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final int movedPosition = getHeight ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int oldOffset = getOffset ( node ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int newTopPosition = relativePosition + getOffset ( newTop ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft (  newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setLeft ( newTop, movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^setRight ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^766^767^^^^758^773^setLeft ( movedNode, newTop ) ; newTop.setRight ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( movedNode, newTop ) ;setLeft ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setLeft ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setLeft ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^newTop.setLeft ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset (  newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( newTopPosition, newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^addAll ( newTop, newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setOffset ( newTop, movedPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( newTop, newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( newTop, newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( this, newOffest ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^getOffset ( this, myNewPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^getOffset ( this, movedPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^770^771^^^^758^773^setOffset ( this, myNewPosition ) ; setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( this, myNewPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( this, myNewPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( movedNode, newTopPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset (  movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^setOffset ( movedPosition, movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^addAll ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^setOffset ( movedNode, nextIndex ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^771^772^^^^758^773^setOffset ( movedNode, movedPosition ) ; return newTop;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^leftIsPrevious = node != null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^leftIsPrevious = node == true;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftIsPrevious = true;leftIsPrevious = node == null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^rightIsNext = node == null;leftIsPrevious = node == null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left = rightIsNext ? previous : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left = leftIsPrevious ? node : previous;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^left = node ? previous : leftIsPrevious;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^left  =  node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^left  =  previous ;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^left =  leftIsPrevious ? null : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P2_Replace_Operator]^rightIsNext = node != null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^rightIsNext = node == this;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;rightIsNext = node == null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^rightIsNext = true;rightIsNext = node == null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P12_Insert_Condition]^if  ( rightIsNext || right == null )  { rightIsNext = node == null; }^794^^^^^793^797^rightIsNext = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = leftIsPrevious ? next : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = rightIsNext ? node : next;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P5_Replace_Variable]^right = next ? rightIsNext : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^right  =  node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P6_Replace_Expression]^right  =  next ;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P8_Replace_Mix]^right =  rightIsNext ? null : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^rotateRight (  ) ;^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P14_Delete_Statement]^^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> minNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> otherTreeMin = otherTree.get (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^while  ( s != null || s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^while  ( s == null && s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^while  ( s != null && s.height == getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^while  ( s != null && newOffest > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^while  ( leftSubTree != null && s.height > getHeight ( s )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^while  ( s != null && s.height > getOffset ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^while  ( s != null && myNewPosition > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( s == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != false )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^sAbsolutePosition += s.relativePosition;^839^840^841^^^824^854^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^839^840^841^^^824^854^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  != null )  {     root.toArray ( array, root.relativePosition ) ; }^839^^^^^824^854^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += newTopPosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += s.relativePosition.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += s;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sAbsolutePosition +=  null.relativePonullition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;sAbsolutePosition += s.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sAbsolutePosition += s.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( s != null )  {     sAbsolutePosition += s.relativePosition; }^840^^^^^825^855^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^840^^^^^825^855^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^840^^^^^825^855^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^840^^^^^825^855^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^840^^^^^825^855^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sParentAbsolutePosition = myNewPosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAbsolutePosition += s.relativePosition;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s = null.left;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s = s.left.left;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s = s;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s = s.right;s = s.left;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += newOffest;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^sAncestors .pop (  )  ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^837^838^^^^822^852^sAncestors.push ( s ) ; s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;sAncestors.push ( s ) ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;sAncestors.push ( s ) ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s = sAncestor.balance (  ) ;sAncestors.push ( s ) ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^while  ( !sAncestors .iterator (  )   )  {^862^^^^^847^877^while  ( !sAncestors.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^s = sAncestor.setValue (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s =  this.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors.push (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors .push ( result )  ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> sAncestor = sAncestors .push ( value )  ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAncestor.setLeft (  null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sAncestor .insertOnLeft ( currentSize , obj )  ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^return balance (  ) ;s = sAncestor.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;s = sAncestor.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( otherTree.height >= height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( myNewPosition > height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( height > otherTree.height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( s.relativePosition + currentSize )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( s != null && s.height > getHeight(leftSubTree) )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( s != null )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( s.height > getHeight ( leftSubTree ) )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( leftSubTree != null )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( currentSize - 1 )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize + 1 )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( currentSize - 1 - sParentAbsolutePosition )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^while  ( s != null && s.height >= getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^while  ( s != null && size > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != true )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += oldOffset;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sParentAbsolutePosition = newTopPosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sParentAbsolutePosition =  newOffest;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += start;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s =  null.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> sAncestor = 0.push (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^863^864^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ; sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^864^865^^^^849^879^sAncestor.setLeft ( s, null ) ; s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != this )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += myNewPosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( leftSubTree == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( currentSize - 1 )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( leftSubTree != this )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^leftSubTree.max().setRight(null, maxNode); leftSubTree.relativePosition -= currentSize - 1;^849^850^851^852^^834^864^if  ( leftSubTree != null )  { leftSubTree.max (  ) .setRight ( null, maxNode ) ; leftSubTree.relativePosition -= currentSize - 1; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^849^850^851^852^^834^864^if  ( leftSubTree != null )  { leftSubTree.max (  ) .setRight ( null, maxNode ) ; leftSubTree.relativePosition -= currentSize - 1; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( s != null )  {     s.min (  ) .setLeft ( null, maxNode ) ;     s.relativePosition =  ( sAbsolutePosition - currentSize )  + 1; }^849^^^^^834^864^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( otherTree != null )  {     otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;      ( otherTree.relativePosition ) ++; }^849^^^^^834^864^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( s != null )  {     s.max (  ) .setRight ( null, otherTreeMin ) ;     s.relativePosition = sAbsolutePosition - currentSize; }^849^^^^^834^864^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^leftSubTree.relativePosition -= currentSize  <<  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^leftSubTree.relativePosition += currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^leftSubTree.relativePosition -= currentSize ;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^leftSubTree.relativePosition -= oldOffset - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^leftSubTree.relativePosition -= currentSize - 0;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;leftSubTree.relativePosition -= currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;leftSubTree.relativePosition -= currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.relativePosition += currentSize;leftSubTree.relativePosition -= currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^leftSubTree.max (  ) .setRight ( null ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^leftSubTree.max (  )  .getHeight ( 2 )  ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^leftSubTree.get (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^850^851^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ; leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( s == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize + 1 )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != this )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^s.min().setLeft(null, maxNode); s.relativePosition = (sAbsolutePosition - currentSize) + 1;^853^854^855^856^^838^868^if  ( s != null )  { s.min (  ) .setLeft ( null, maxNode ) ; s.relativePosition = sAbsolutePosition - currentSize + 1; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^853^854^855^856^^838^868^if  ( s != null )  { s.min (  ) .setLeft ( null, maxNode ) ; s.relativePosition = sAbsolutePosition - currentSize + 1; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  ^  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^s.relativePosition = sAbsolutePosition - currentSize + nextIndex;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = newTopPosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - relativePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = currentSize - sAbsolutePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s.relativePosition = sAbsolutePosition - currentSize + 4;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^relativePosition = mid - absolutePositionOfParent;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.relativePosition -= currentSize - 1;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.min (  ) .setLeft ( null ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^s.get (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^854^855^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ; s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s .max (  )  .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sParentAbsolutePosition =  startIndex;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^leftSubTree.relativePosition -= currentSize  !=  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^leftSubTree.relativePosition -= newOffest - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^leftSubTree.relativePosition -= currentSize - 3;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  |  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = newOffest - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - sParentAbsolutePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s.relativePosition = sAbsolutePosition - currentSize + 1 / 2;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize   instanceof   1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize  ==  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^maxNode.relativePosition = currentSize - end - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^maxNode.relativePosition = nextIndex - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^maxNode.relativePosition = sParentAbsolutePosition - 1 - currentSize;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^maxNode.relativePosition = currentSize - 3 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTree.relativePosition += newOffest;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^otherTree.relativePosition +=  currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^node.relativePosition = newOffest;otherTree.relativePosition += currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;otherTree.relativePosition += currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.relativePosition -= currentSize - 1;otherTree.relativePosition += currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s =  null;^861^^^^^846^876^s = maxNode;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P4_Replace_Constructor]^final Deque<AVLNode<E>> sAncestors = final Deque<AVLNode<E>> sAncestors =  new AVLNode<E> ( c )  ;^831^^^^^816^846^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> leftSubTree = removeMin (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> node = root.get ( index ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^831^^^^^816^846^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^831^^^^^816^846^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^AVLNode<E> s = this;AVLNode<E> s = otherTree;^832^^^^^817^847^AVLNode<E> s = otherTree;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P1_Replace_Type]^short  sAbsolutePosition = s.relativePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int sAbsolutePosition = s.relativePosition + newOffest;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int sAbsolutePosition = myNewPosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int s.relativePositionAbsolutePosition = s + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int sAbsolutePosition = currentSize + s.relativePosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^int sAbsolutePosition = startIndex + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition;int sAbsolutePosition = s.relativePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int newTopPosition = relativePosition + getOffset ( newTop ) ;int sAbsolutePosition = s.relativePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P1_Replace_Type]^short  sParentAbsolutePosition = 0;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^int sParentAbsolutePosition = -2;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^835^836^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  { sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^maxNode.setLeft (  null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^maxNode .insertOnLeft ( indexRelativeToMe , obj )  ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.setRight ( s, otherTreeMin ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P12_Insert_Condition]^if  ( leftSubTree != null )  { maxNode.setLeft ( leftSubTree, null ) ; }^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^maxNode.setRight (  otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^maxNode.setRight ( s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;maxNode.setRight ( s, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;maxNode.setRight ( s, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;maxNode.setRight ( s, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^leftSubTree .max ( size , currentSize )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^862^863^^^^847^877^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors .push ( obj )  ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sAncestor .insertOnLeft ( sParentAbsolutePosition , obj )  ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s = 0.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( leftSubTree != false )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^leftSubTree.relativePosition -= currentSize  >=  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^leftSubTree.relativePosition -= currentSize - 1L;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^leftSubTree.max (  ) .setRight ( null, null ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^leftSubTree .max ( currentIndex , size )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != true )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  &  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^s.relativePosition = sAbsolutePosition - currentSize + oldOffset;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = relativePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s.relativePosition = sAbsolutePosition - currentSize + 1 >> 4;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^s.min (  )  .insertOnLeft ( sAbsolutePosition , obj )  ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s.min (  )  .insertOnLeft ( mid , result )  ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s = 3;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^leftSubTree.relativePosition -= currentSize  >>  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^leftSubTree.relativePosition -= currentSize - indexRelativeToMe;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^leftSubTree.relativePosition -= newTopPosition - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^leftSubTree.relativePosition -= currentSize - 1 * 0;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition   instanceof   currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^s.relativePosition = sAbsolutePosition - currentSize ;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = start - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - newOffest + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = currentSizeAbsolutePosition - s + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s.relativePosition = sAbsolutePosition - currentSize + 1L;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize  <  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize  !=  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^maxNode.relativePosition = currentSize - newTopPosition - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^maxNode.relativePosition = relativePosition - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^maxNode.relativePosition = currentSize - 0 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^AVLNode<E> s = 4;^832^^^^^817^847^AVLNode<E> s = otherTree;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int sAbsolutePosition = s.relativePosition + start;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int sAbsolutePosition = sParentAbsolutePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^int sAbsolutePosition = s.relativePosition + oldOffset;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P1_Replace_Type]^long  sParentAbsolutePosition = 0;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^int sParentAbsolutePosition = 7;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^847^848^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ; maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^maxNode.setRight ( otherTreeMin, s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^leftSubTree .max ( relativePosition , sAbsolutePosition )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^leftSubTree .max ( expectedModCount , relativePosition )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s.min (  )  .insertOnLeft ( height , value )  ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^sAncestor .insertOnLeft ( index , obj )  ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^otherTree = otherTree.remove (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^otherTree =  null.removeMin (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;otherTree = otherTree.removeMin (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;otherTree = otherTree.removeMin (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P4_Replace_Constructor]^final Deque<AVLNode<E>> sAncestors = final Deque<AVLNode<E>> sAncestors =  new AVLNode<E> ( c )  ;^871^^^^^856^886^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^871^^^^^856^886^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^871^^^^^856^886^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^AVLNode<E> s = otherTree;AVLNode<E> s = this;^872^^^^^857^887^AVLNode<E> s = this;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P1_Replace_Type]^long  sAbsolutePosition = s.relativePosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int sAbsolutePosition = newOffest;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^int s.relativePositionAbsolutePosition = s;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition + currentSize;int sAbsolutePosition = s.relativePosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;int sAbsolutePosition = s.relativePosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P1_Replace_Type]^short  sParentAbsolutePosition = 0;^874^^^^^859^889^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^int sParentAbsolutePosition = 2;^874^^^^^859^889^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^while  ( s != null || s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^while  ( s == null && s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^while  ( s != null && s.height < getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^while  ( s != null && newTopPosition > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^while  ( s != null && otherTree > getHeight ( s.height )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^while  ( s != null && s.height > getOffset ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^while  ( s != null && s.height > getOffset ( 4 )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( s == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != true )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^sAbsolutePosition += s.relativePosition;^879^880^881^^^864^894^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^879^880^881^^^864^894^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  != null )  {     root.toArray ( array, root.relativePosition ) ; }^879^^^^^864^894^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += newTopPosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += s.relativePosition.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += s;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sAbsolutePosition +=  null.relativePonullition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;sAbsolutePosition += s.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sAbsolutePosition += s.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( s != null )  {     sAbsolutePosition += s.relativePosition; }^880^^^^^865^895^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^880^^^^^865^895^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^880^^^^^865^895^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^880^^^^^865^895^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^880^^^^^865^895^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sParentAbsolutePosition = myNewPosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sParentAbsolutePosition =  null;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAbsolutePosition += s.relativePosition;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s = s.right.right;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s = s;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s =  null.right;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s = s.left;s = s.right;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += newOffest;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^sAncestors .pop (  )  ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^sAncestors.push ( null ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;sAncestors.push ( s ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;sAncestors.push ( s ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s = sAncestor.balance (  ) ;sAncestors.push ( s ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != false )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAbsolutePosition += myNewPosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sParentAbsolutePosition = startIndex;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^875^876^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  { sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.setRight (  null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.setRight ( s, otherTreeMin ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.setLeft ( 2, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.setLeft (  maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.setLeft ( s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.setLeft ( maxNode, s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^otherTreeMin .insertOnLeft ( startIndex , result )  ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^otherTreeMin .insertOnLeft ( nextIndex , obj )  ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( otherTree == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( otherTree != this )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^otherTree.min().setLeft(null, otherTreeMin); (otherTree.relativePosition)++;^886^887^888^889^^871^901^if  ( otherTree != null )  { otherTree.min (  ) .setLeft ( null, otherTreeMin ) ; otherTree.relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^886^887^888^889^^871^901^if  ( otherTree != null )  { otherTree.min (  ) .setLeft ( null, otherTreeMin ) ; otherTree.relativePosition++; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( leftSubTree != null )  {     leftSubTree.max (  ) .setRight ( null, maxNode ) ;     leftSubTree.relativePosition -= currentSize - 1; }^886^^^^^871^901^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( nullMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( null ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( null, otherTreeMinMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( null, otherTree ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^otherTree.min (  )  .insertOnLeft ( sParentAbsolutePosition , obj )  ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^otherTree.get (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^otherTree .max (  )  .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^887^888^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ; otherTree.relativePosition++;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^otherTree.min (  )  .insertOnLeft ( nextIndex , result )  ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( s == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( s != true )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^s.max().setRight(null, otherTreeMin); s.relativePosition = sAbsolutePosition - currentSize;^890^891^892^893^^875^905^if  ( s != null )  { s.max (  ) .setRight ( null, otherTreeMin ) ; s.relativePosition = sAbsolutePosition - currentSize; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^890^891^892^893^^875^905^if  ( s != null )  { s.max (  ) .setRight ( null, otherTreeMin ) ; s.relativePosition = sAbsolutePosition - currentSize; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  >=  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = relativePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - oldOffset;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = currentSize - sAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s.relativePosition =  nullAbnullolutePonullition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^relativePosition = mid - absolutePositionOfParent;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.max (  ) .setRight ( null ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^s.get (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^891^892^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ; s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.setRight ( s, otherTreeMin ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  !=  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = newOffest - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - newOffest;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^s.relativePosition = currentSizeAbsolutePosition - s;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^otherTreeMin.relativePosition = currentSize  >  sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.relativePosition = sParentAbsolutePosition - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.relativePosition = currentSize - oldOffset;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^otherTreeMin.relativePosition = sParentAbsolutePosition - currentSize;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^otherTreeMin.relativePosition =  currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^leftSubTree.relativePosition -= currentSize - 1;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTree.relativePosition += currentSize;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s =  null;^896^^^^^881^911^s = otherTreeMin;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^while  ( !sAncestors .iterator (  )   )  {^897^^^^^882^912^while  ( !sAncestors.isEmpty (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^s = sAncestor.setValue (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^s =  null.balance (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors.push (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors .push ( result )  ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> sAncestor = sAncestors .push ( obj )  ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^898^899^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ; sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAncestor.setRight (  null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^899^900^^^^884^914^sAncestor.setRight ( s, null ) ; s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^return balance (  ) ;s = sAncestor.balance (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;s = sAncestor.balance (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^final AVLNode<E> sAncestor = null.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^897^898^^^^882^912^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^sAncestor.setRight ( 2, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( 1 )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return new StringBuilder (  )  .StringBuilder (  )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( myNewPosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( null )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( oldOffset ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( 0 )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( start ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( 3 )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( newOffest ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( this )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( nextIndex ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( 2 )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( startIndex ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( sParentAbsolutePosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^.append ( getLeftSubTree (  )  != null ) .append ( ", faedelung " ) .append ( rightIsNext ) .append ( "  ) " )^970^971^972^973^^961^975^.append ( getRightSubTree (  )  != null ) .append ( ", faedelung " ) .append ( rightIsNext ) .append ( "  ) " )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( parent.modCount <= expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( newOffest != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( parent.modCount != newTopPosition )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( expectedModCount != parent.modCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( parent.modCount.modCount != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( expectedModCount.modCount != parent )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^throw new java.util.ConcurrentModificationException();^1032^1033^1034^^^1031^1035^if  ( parent.modCount != expectedModCount )  { throw new ConcurrentModificationException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1032^1033^1034^^^1031^1035^if  ( parent.modCount != expectedModCount )  { throw new ConcurrentModificationException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1032^^^^^1031^1035^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1032^^^^^1031^1035^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new ConcurrentModificationException  (" ")  ;^1033^^^^^1031^1035^throw new ConcurrentModificationException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new ConcurrentModificationException  (" ")  ;^1033^^^^^1031^1035^throw new ConcurrentModificationException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new ConcurrentModificationException  (" ")  ;^1033^^^^^1031^1035^throw new ConcurrentModificationException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new ConcurrentModificationException  (" ")  ;^1033^^^^^1031^1035^throw new ConcurrentModificationException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^return nextIndex == parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^return nextIndex < parent.size() + 0 ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^return result < parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^return parent < nextIndex.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return nextIndex < parent .isEmpty (  )  ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^return nextIndex < parent.size() - 5 ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1042^^^^^1041^1054^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1042^^^^^1041^1054^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( "No element at index " + nextIndex )  {^1043^^^^^1041^1054^if  ( !hasNext (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^if  ( !hasPrevious (  )  )  {^1043^^^^^1041^1054^if  ( !hasNext (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( !coll.isEmpty (  )  )  {^1043^^^^^1041^1054^if  ( !hasNext (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( c.isEmpty (  )  )  {^1043^^^^^1041^1054^if  ( !hasNext (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^throw new java.util.NoSuchElementException((("No element at index " + (nextIndex)) + "."));^1043^1044^1045^^^1041^1054^if  ( !hasNext (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1043^1044^1045^^^1041^1054^if  ( !hasNext (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( ! ( hasPrevious (  )  )  )  {     throw new NoSuchElementException ( "Already at start of list." ) ; }^1043^^^^^1041^1054^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( ! ( hasNext (  )  )  )  {     throw new NoSuchElementException (  (  ( "No element at index " +  ( nextIndex )  )  + "." )  ) ; }^1044^^^^^1041^1054^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1044^^^^^1041^1054^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1044^^^^^1041^1054^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1044^^^^^1041^1054^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1044^^^^^1041^1054^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( next != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( next == this )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^next = parent.root.get(nextIndex);^1046^1047^1048^^^1041^1054^if  ( next == null )  { next = parent.root.get ( nextIndex ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1046^1047^1048^^^1041^1054^if  ( next == null )  { next = parent.root.get ( nextIndex ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get (  (  ( nextIndex )  - 1 )  ) ; }else {     next = next.previous (  ) ; }^1046^^^^^1041^1054^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( root )  != null )  {     root.toArray ( array, root.relativePosition ) ; }^1046^^^^^1041^1054^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( left )  == null )  {     left = leftPrevious;     leftIsPrevious = true; }^1046^^^^^1041^1054^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.root.get ( oldOffset ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = nextIndex.get ( parent.root ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = nextIndex.root.get ( parent ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = parent.root.min ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = parent.root .set ( newOffest , result )  ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next  =  next ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex - 1 ) ;next = parent.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^root = root.remove ( index ) ;next = parent.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get ( nextIndex ) ; }^1047^^^^^1041^1054^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.root.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next = parent.root.get ( newOffest ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^parent.remove ( currentIndex ) ;next = parent.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = parent.root .set ( index , value )  ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = parent.root .set ( end , result )  ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next = 1.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final E value = next.balance (  ) ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final E result = node.value;final E value = next.getValue (  ) ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^return root.get ( index ) .getValue (  ) ;final E value = next.getValue (  ) ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;final E value = next.getValue (  ) ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^current  = null ;^1050^^^^^1041^1054^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;current = next;^1050^^^^^1041^1054^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^current = null;current = next;^1050^^^^^1041^1054^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = next;current = next;^1050^^^^^1041^1054^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;current = next;^1050^^^^^1041^1054^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^currentIndex  =  currentIndex ;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = -1;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.nextIndex = fromIndex;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^current = next;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = next.max (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next  = null ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^value = iterator.next (  ) ;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1052^1053^^^^1041^1054^next = next.next (  ) ; return value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^return nextIndex (  )  - 1;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^parent.add ( nextIndex, obj ) ;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^return left.max (  ) ;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return result;^1053^^^^^1041^1054^return value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^return nextIndex >= 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^return nextIndex > indexRelativeToMe;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^return myNewPosition > 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return relativePosition  ;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1061^^^^^1060^1074^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1061^^^^^1060^1074^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^if  ( !hasNext (  )  )  {^1062^^^^^1060^1074^if  ( !hasPrevious (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( c.isEmpty (  )  )  {^1062^^^^^1060^1074^if  ( !hasPrevious (  )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^throw new java.util.NoSuchElementException("Already at start of list.");^1062^1063^1064^^^1060^1074^if  ( !hasPrevious (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1062^1063^1064^^^1060^1074^if  ( !hasPrevious (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( ! ( hasNext (  )  )  )  {     throw new NoSuchElementException (  (  ( "No element at index " +  ( nextIndex )  )  + "." )  ) ; }^1062^^^^^1060^1074^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  ( ! ( hasPrevious (  )  )  )  {     throw new NoSuchElementException ( "Already at start of list." ) ; }^1063^^^^^1060^1074^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1063^^^^^1060^1074^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1063^^^^^1060^1074^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1063^^^^^1060^1074^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1063^^^^^1060^1074^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( next != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P6_Replace_Expression]^if  ( nextIndex - 1 )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( next == false )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^next = parent.root.get(((nextIndex) - 1));^1065^1066^1067^1068^1069^1060^1074^if  ( next == null )  { next = parent.root.get ( nextIndex - 1 ) ; } else { next = next.previous (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1065^1066^1067^1068^1069^1060^1074^if  ( next == null )  { next = parent.root.get ( nextIndex - 1 ) ; } else { next = next.previous (  ) ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get ( nextIndex ) ; }^1065^^^^^1060^1074^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = next.getValue (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = next .remove ( oldOffset )  ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next  =  next ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;next = next.previous (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.next (  ) ;next = next.previous (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^left = leftPrevious;next = next.previous (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { next = next.previous (  ) ; }^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = next .remove ( currentSize )  ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final E value = next.getValue (  ) ;next = next.previous (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex  |  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^next = parent.root.get ( nextIndex -  ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.root.get ( oldOffset - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = nextIndex.get ( parent.root - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.root.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = nextIndex.root.get ( parent - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = parent.root.remove ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = parent.root .set ( currentIndex , obj )  ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next = parent.root.get ( nextIndex - 1 * 0 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex ) ;next = parent.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex   instanceof   1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^next = parent.root.get ( nextIndex - index ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.root.get ( myNewPosition - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next = parent.root.remove ( myNewPosition - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^parent.add ( nextIndex, obj ) ;next = parent.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex  &  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^next = parent.root.get ( nextIndex  ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^next = parent.root.get ( newTopPosition - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next = parent.root.get ( nextIndex - 0 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = next .remove ( myNewPosition )  ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex  !=  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next = parent.root.remove ( newTopPosition - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^next = next .remove ( absolutePositionOfParent )  ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^final E value = next.balance (  ) ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^final E value = next .setValue ( value )  ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^final E result = node.value;final E value = next.getValue (  ) ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^return root.get ( index ) .getValue (  ) ;final E value = next.getValue (  ) ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;final E value = next.getValue (  ) ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^current ;^1071^^^^^1060^1074^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;current = next;^1071^^^^^1060^1074^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^current = null;current = next;^1071^^^^^1060^1074^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^right = next;current = next;^1071^^^^^1060^1074^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;current = next;^1071^^^^^1060^1074^current = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^currentIndex  = null ;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = -1;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.nextIndex = fromIndex;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^current = next;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^return result;^1073^^^^^1060^1074^return value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^return newOffest;^1077^^^^^1076^1078^return nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return relativePosition;^1077^^^^^1076^1078^return nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^return nextIndex (  )   ||  1;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^return nextIndex (  )  - ;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^return hasNext (  )  - 1;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1085^^^^^1084^1100^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1085^^^^^1084^1100^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( currentIndex < -1 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P3_Replace_Literal]^if  ( currentIndex == -4 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( newTopPosition == -1 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( currentIndex == -2 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( current == null )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException();^1086^1087^1088^^^1084^1100^if  ( currentIndex == -1 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1086^1087^1088^^^1084^1100^if  ( currentIndex == -1 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1086^^^^^1084^1100^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( parent.modCount )  !=  ( expectedModCount )  )  {     throw new ConcurrentModificationException (  ) ; }^1086^^^^^1084^1100^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalStateException  (" ")  ;^1087^^^^^1084^1100^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new IllegalStateException  (" ")  ;^1087^^^^^1084^1100^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IllegalStateException  (" ")  ;^1087^^^^^1084^1100^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new IllegalStateException  (" ")  ;^1087^^^^^1084^1100^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1087^^^^^1084^1100^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1087^^^^^1084^1100^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return ;^1087^^^^^1084^1100^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^parent.size ( currentIndex ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^parent .TreeList ( this )  ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^parent.remove ( newTopPosition ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex ) ;parent.remove ( currentIndex ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( nextIndex == currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( relativePosition != currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( nextIndex != newTopPosition )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^if  ( currentIndex != nextIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( newOffest != currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^(nextIndex)--;^1090^1091^1092^1093^^1084^1100^if  ( nextIndex != currentIndex )  {  nextIndex--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1090^1091^1092^1093^^1084^1100^if  ( nextIndex != currentIndex )  {  nextIndex--; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^next = false;^1096^^^^^1084^1100^next = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^current = null;next = null;^1096^^^^^1084^1100^next = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^root = null;next = null;^1096^^^^^1084^1100^next = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^current = false;^1097^^^^^1084^1100^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^root = null;current = null;^1097^^^^^1084^1100^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = null;current = null;^1097^^^^^1084^1100^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^current = next;current = null;^1097^^^^^1084^1100^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^currentIndex = -4;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;currentIndex = -1;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.currentIndex = -1;currentIndex = -1;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;currentIndex = -1;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1103^^^^^1102^1108^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1103^^^^^1102^1108^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P2_Replace_Operator]^if  ( current != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^if  ( current == true )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( nextNode == null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( left == null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( currentIndex == -1 )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( root == null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( s != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( node == null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( otherTree != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P9_Replace_Statement]^if  ( next == null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException();^1104^1105^1106^^^1102^1108^if  ( current == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P16_Remove_Block]^^1104^1105^1106^^^1102^1108^if  ( current == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1104^^^^^1102^1108^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( parent.modCount )  !=  ( expectedModCount )  )  {     throw new ConcurrentModificationException (  ) ; }^1104^^^^^1102^1108^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalStateException  (" ")  ;^1105^^^^^1102^1108^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new IllegalStateException  (" ")  ;^1105^^^^^1102^1108^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IllegalStateException  (" ")  ;^1105^^^^^1102^1108^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new IllegalStateException  (" ")  ;^1105^^^^^1102^1108^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1105^^^^^1102^1108^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1105^^^^^1102^1108^[Delete]^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^return false;^1105^^^^^1102^1108^throw new IllegalStateException  (" ")  ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^current.setValue ( value ) ;^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^current.get ( obj ) ;^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^current .getValue (  )  ;^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^node.setValue ( obj ) ;current.setValue ( obj ) ;^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1111^^^^^1110^1117^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1111^^^^^1110^1117^checkModCount (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^parent.add ( nextIndex, value ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^parent.add ( myNewPosition, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^parent.add ( nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^parent.add (  obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^parent.add ( obj, nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^parent.get ( nextIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P7_Replace_Invocation]^parent .add ( height , result )  ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^parent.add ( relativePosition, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P14_Delete_Statement]^^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex - 1 ) ;parent.add ( nextIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = next.next (  ) ;parent.add ( nextIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^current = this;^1113^^^^^1110^1117^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^root = null;current = null;^1113^^^^^1110^1117^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^next = null;current = null;^1113^^^^^1110^1117^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^current = next;current = null;^1113^^^^^1110^1117^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P12_Insert_Condition]^if  ( current == null )  { current = null; }^1113^^^^^1110^1117^current = null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^currentIndex = -2;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;currentIndex = -1;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^this.currentIndex = -1;currentIndex = -1;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;currentIndex = -1;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P12_Insert_Condition]^if  ( currentIndex == -1 )  { currentIndex = -1; }^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P1_Replace_Type]^private  short  height;^315^^^^^310^320^private int height;^[CLASS] AVLNode  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P8_Replace_Mix]^private  long  height;^315^^^^^310^320^private int height;^[CLASS] AVLNode  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P1_Replace_Type]^private  short  relativePosition;^317^^^^^312^322^private int relativePosition;^[CLASS] AVLNode  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[P5_Replace_Variable]^this.relativePosition = height;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P8_Replace_Mix]^this.relativePosition =  null;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^node.relativePosition = newOffest;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^sAbsolutePosition += s.relativePosition;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;this.relativePosition = relativePosition;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P5_Replace_Variable]^value = value;^332^^^^^329^337^value = obj;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P8_Replace_Mix]^value =  null;^332^^^^^329^337^value = obj;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^this.value = obj;value = obj;^332^^^^^329^337^value = obj;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^rightIsNext = false;^333^^^^^329^337^rightIsNext = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^rightIsNext = node == null;rightIsNext = true;^333^^^^^329^337^rightIsNext = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^leftIsPrevious = false;^334^^^^^329^337^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^334^^^^^329^337^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { leftIsPrevious = true; }^334^^^^^329^337^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P5_Replace_Variable]^right = null;^335^^^^^329^337^right = rightFollower;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P8_Replace_Mix]^right =  0;^335^^^^^329^337^right = rightFollower;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;right = rightFollower;^335^^^^^329^337^right = rightFollower;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^left = leftFollower;right = rightFollower;^335^^^^^329^337^right = rightFollower;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P8_Replace_Mix]^left =  null;^336^^^^^329^337^left = leftFollower;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^right = rightFollower;left = leftFollower;^336^^^^^329^337^left = leftFollower;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = leftFollower;^336^^^^^329^337^left = leftFollower;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P2_Replace_Operator]^this ( coll.iterator (  ) , 0, coll.size (  )   >=  1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^this ( coll.iterator (  ) , relativePosition, coll.size (  )  - 1, relativePosition, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 0, coll.size (  )  - , 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^this ( coll.iterator (  ) , height, coll.size (  )  - 1, height, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 0, coll.size() - 1  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P7_Replace_Invocation]^this ( coll.iterator (  ) , 0, coll .isEmpty (  )   - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P8_Replace_Mix]^this ( coll .isEmpty (  )  , 0, coll.size (  )  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P14_Delete_Statement]^^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 0, coll.size() - 3  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P3_Replace_Literal]^this ( coll.iterator (  ) , 0, coll.size() + 7  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[P1_Replace_Type]^final  short  mid = start +  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^final int mid = start +  &  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^final int mid = start +  ( end - start )  - 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^final int mid = start +  ( end  |  start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^final int mid = start +  ( end - start )  / 8;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^final int mid = relativePosition +  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^final int mid = start +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^final int mid = end +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^if  ( start <= mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^if  ( mid < mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^if  ( start < relativePosition )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^if  ( mid < start )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P6_Replace_Expression]^if  ( mid - 1 )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( mid < end )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P15_Unwrap_Block]^left = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(iterator, start, (mid - 1), mid, prev, this);^374^375^376^377^378^371^389^if  ( start < mid )  { left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ; } else { leftIsPrevious = true; left = prev; }^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P16_Remove_Block]^^374^375^376^377^378^371^389^if  ( start < mid )  { left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ; } else { leftIsPrevious = true; left = prev; }^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     setLeft ( new AVLNode<E> (  ( -1 ) , obj, this, left ) , null ) ; }else {     setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^374^^^^^371^389^[Delete]^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P13_Insert_Block]^if  ( mid < end )  {     right = new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next ) ; }else {     rightIsNext = true;     right = next; }^374^^^^^371^389^[Delete]^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^leftIsPrevious = false;^377^^^^^371^389^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^377^^^^^371^389^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { leftIsPrevious = true; }^377^^^^^371^389^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^left =  null;^378^^^^^371^389^left = prev;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = prev;^378^^^^^371^389^left = prev;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^left = new AVLNode<E> ( iterator, start, mid  !=  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^left = new AVLNode<E> ( iterator, start, mid , mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^left = left =  new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next )  ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^left = new AVLNode<E> (  start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^left = new AVLNode<E> ( iterator,  mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^left = new AVLNode<E> ( iterator, start, mid - 1,  prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^left = new AVLNode<E> ( iterator, start, mid - 1, mid,  this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, relativePosition, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( mid, start, iterator - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, prev, mid - 1, mid, start, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, mid, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( prev, start, mid - 1, mid, iterator, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^left = new AVLNode<E> ( iterator, start, mid - 3, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^375^^^^^371^389^[Delete]^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^left = new AVLNode<E> ( iterator, start, mid  &&  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^left = new AVLNode<E> ( iterator, start, mid - absolutePositionOfParent, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, relativePosition - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( start, iterator, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^left = new AVLNode<E> ( iterator, start, mid  <<  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^left = new AVLNode<E> ( iterator, start, mid - end, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, prev - 1, mid, mid, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^left = new AVLNode<E> ( iterator, start, mid - 1 - 0, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( null, start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, mid, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^left = new AVLNode<E> ( iterator, start, mid - 1, mid, 4, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P7_Replace_Invocation]^value = iterator .next (  )  ;^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^value =  null.next (  ) ;^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^value = 3.next (  ) ;^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P14_Delete_Statement]^^380^^^^^371^389^value = iterator.next (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^relativePosition = mid   instanceof   absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^relativePosition = start - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^relativePosition = mid - start;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^relativePosition = absolutePositionOfParent - mid;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^relativePosition =  null - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;relativePosition = mid - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;relativePosition = mid - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P2_Replace_Operator]^if  ( mid <= end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^if  ( start < end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^if  ( mid < start )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^if  ( end < mid )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P6_Replace_Expression]^if  ( mid + 1 )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( start < mid )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P15_Unwrap_Block]^right = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(iterator, (mid + 1), end, mid, this, next);^382^383^384^385^386^371^389^if  ( mid < end )  { right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ; } else { rightIsNext = true; right = next; }^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P16_Remove_Block]^^382^383^384^385^386^371^389^if  ( mid < end )  { right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ; } else { rightIsNext = true; right = next; }^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     setRight ( new AVLNode<E> (  ( +1 ) , obj, right, this ) , null ) ; }else {     setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^382^^^^^371^389^[Delete]^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^382^^^^^371^389^[Delete]^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^rightIsNext = false;^385^^^^^371^389^rightIsNext = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^rightIsNext = node == null;rightIsNext = true;^385^^^^^371^389^rightIsNext = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^right =  null;^386^^^^^371^389^right = next;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^right = leftMax.right;right = next;^386^^^^^371^389^right = next;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^right = new AVLNode<E> ( iterator, mid + mid, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^right = right =  new AVLNode<E> (  ( +1 ) , obj, right, this )  ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^right = new AVLNode<E> (  mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^right = new AVLNode<E> ( iterator, mid + 1, end,  this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^right = new AVLNode<E> ( iterator, mid + 1,  mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P4_Replace_Constructor]^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, mid + 1, start, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( mid, iterator + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, end + 1, mid, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, mid + 1, next, mid, this, end ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^right = new AVLNode<E> ( iterator, mid + 3, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^383^^^^^371^389^[Delete]^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P13_Insert_Block]^if  ( mid < end )  {     right = new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next ) ; }else {     rightIsNext = true;     right = next; }^383^^^^^371^389^[Delete]^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^right = new AVLNode<E> ( iterator, mid + start, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, start + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( next, mid + 1, end, mid, this, iterator ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^right = new AVLNode<E> ( iterator, next + 1, end, mid, this, mid ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P8_Replace_Mix]^right = new AVLNode<E> ( iterator, mid + 1 % 2, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P3_Replace_Literal]^right = new AVLNode<E> ( iterator, mid , end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P14_Delete_Statement]^^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^388^^^^^371^389^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^return obj;^397^^^^^396^398^return value;^[CLASS] AVLNode  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P5_Replace_Variable]^this.value = value;^406^^^^^405^407^this.value = obj;^[CLASS] AVLNode  [METHOD] setValue [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^value = obj;this.value = obj;^406^^^^^405^407^this.value = obj;^[CLASS] AVLNode  [METHOD] setValue [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[P1_Replace_Type]^final  short  indexRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P2_Replace_Operator]^final int indexRelativeToMe = index  <<  relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^final int indexRelativeToMe = index - mid;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - index;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;final int indexRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^final int result = left.indexOf ( object, index + left.relativePosition ) ;final int indexRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P2_Replace_Operator]^if  ( indexRelativeToMe >= 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P3_Replace_Literal]^if  ( indexRelativeToMe == end )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^if  ( relativePosition == 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P8_Replace_Mix]^if  ( start == 2 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe > 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe <= 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P15_Unwrap_Block]^return this;^416^417^418^^^413^425^if  ( indexRelativeToMe == 0 )  { return this; }^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P16_Remove_Block]^^416^417^418^^^413^425^if  ( indexRelativeToMe == 0 )  { return this; }^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^416^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^416^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^416^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( indexRelativeToMe <= 0 )  {     return insertOnLeft ( indexRelativeToMe, obj ) ; }^416^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^416^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P8_Replace_Mix]^return null;^417^^^^^413^425^return this;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P2_Replace_Operator]^final AVLNode<E> nextNode = indexRelativeToMe <= 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P3_Replace_Literal]^final AVLNode<E> nextNode = indexRelativeToMe < relativePosition ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^final AVLNode<E> nextNode = start < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P6_Replace_Expression]^final AVLNode<E> nextNode  =  getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P6_Replace_Expression]^final AVLNode<E> nextNode  =  getLeftSubTree (  )  ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getRightSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getLeftSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P8_Replace_Mix]^final AVLNode<E> nextNode = relativePosition < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P14_Delete_Statement]^^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P2_Replace_Operator]^if  ( nextNode != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P8_Replace_Mix]^if  ( nextNode == false )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( left == null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( s != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( node == null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P15_Unwrap_Block]^return null;^421^422^423^^^413^425^if  ( nextNode == null )  { return null; }^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P16_Remove_Block]^^421^422^423^^^413^425^if  ( nextNode == null )  { return null; }^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^421^^^^^413^425^[Delete]^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P8_Replace_Mix]^return true;^422^^^^^413^425^return null;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P8_Replace_Mix]^return false;^422^^^^^413^425^return null;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^return nextNode.get ( start ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^return indexRelativeToMe.get ( nextNode ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P7_Replace_Invocation]^return nextNode.insert ( indexRelativeToMe ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P5_Replace_Variable]^return nextNode.get ( relativePosition ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P8_Replace_Mix]^return nextNode.get ( mid ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P14_Delete_Statement]^^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  == null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( index + left.relativePosition )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( result != -1 )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  != null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  != false )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  == null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^final int result = left.indexOf(object, (index + (left.relativePosition))); if (result != (-1)) {    return result;};^431^432^433^434^435^430^444^if  ( getLeftSubTree (  )  != null )  { final int result = left.indexOf ( object, index + left.relativePosition ) ; if  ( result != -1 )  { return result; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^431^432^433^434^435^430^444^if  ( getLeftSubTree (  )  != null )  { final int result = left.indexOf ( object, index + left.relativePosition ) ; if  ( result != -1 )  { return result; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^431^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( result == -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( result != -end )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( start != -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( result != -3 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return result;^433^434^435^^^430^444^if  ( result != -1 )  { return result; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^433^434^435^^^430^444^if  ( result != -1 )  { return result; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^433^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^433^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^433^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^433^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^433^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return relativePosition;^434^^^^^430^444^return result;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return mid;^434^^^^^430^444^return result;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return indexRelativeToMe;^434^^^^^430^444^return result;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P1_Replace_Type]^final  long  result = left.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  <  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, start + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, index + indexRelativeToMe ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf (  index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = object.indexOf ( left, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, left.relativePosition + index ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final int result = left.toArray ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final int result = left .insert ( height , obj )  ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^final int result = 0.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int indexRelativeToMe = index - relativePosition;final int result = left.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^432^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^432^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  >>  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, mid + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, index + start ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( index, object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.relativePosition.indexOf ( object, index + left ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^final int result = left.toArray ( object, mid + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( result != -start )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( result != -1 / 2 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return start;^434^^^^^430^444^return result;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P1_Replace_Type]^final  short  result = left.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  |  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, relativePosition + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, index + relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = null.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final int result = left .insert ( index , value )  ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^final int result = 2.indexOf ( object, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^final int result = left.indexOf ( object, index  >=  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( object, index + result ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int result = left.indexOf ( left.relativePosition, index + object ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( value != null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( value == null ? value != object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( obj == null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( value == object )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( obj == this ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return index;^437^438^439^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  { return index; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^437^438^439^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  { return index; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return mid;^438^^^^^430^444^return index;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return relativePosition;^438^^^^^430^444^return index;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( object == null ? value == value : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( index + right.relativePosition )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  != null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  != this )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  == null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return right.indexOf(object, (index + (right.relativePosition)));^440^441^442^^^430^444^if  ( getRightSubTree (  )  != null )  { return right.indexOf ( object, index + right.relativePosition ) ; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^440^441^442^^^430^444^if  ( getRightSubTree (  )  != null )  { return right.indexOf ( object, index + right.relativePosition ) ; }^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     final int result = left.indexOf ( object,  ( index +  ( left.relativePosition )  )  ) ;     if  ( result !=  ( -1 )  )  {         return result;     } }^440^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^440^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^440^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^440^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^return right.indexOf ( object, index  &&  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( object, index + mid ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf (  index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( index, object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return index.indexOf ( object, right + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( right.relativePosition, index + object ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return right.toArray ( object, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return right .insert ( mid , value )  ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^441^^^^^430^444^[Delete]^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^return right.indexOf ( object, index  <<  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( object, result + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( object, right.relativePosition + index ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return right.toArray ( object, index + mid ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( object, relativePosition + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.indexOf ( object, index + start ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return object.indexOf ( right, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right.relativePosition.indexOf ( object, index + right ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^return right.indexOf ( object, index  ||  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return this.indexOf ( object, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^return -6;^443^^^^^430^444^return -1;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return -4;^443^^^^^430^444^return -1;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^array[index] = obj;^453^^^^^452^460^array[index] = value;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P8_Replace_Mix]^array[index]  =  array[index] ;^453^^^^^452^460^array[index] = value;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  == null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P6_Replace_Expression]^if  ( index + left.relativePosition )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  != null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  != false )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  == null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P15_Unwrap_Block]^left.toArray(array, (index + (left.relativePosition)));^454^455^456^^^452^460^if  ( getLeftSubTree (  )  != null )  { left.toArray ( array, index + left.relativePosition ) ; }^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P16_Remove_Block]^^454^455^456^^^452^460^if  ( getLeftSubTree (  )  != null )  { left.toArray ( array, index + left.relativePosition ) ; }^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^454^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^454^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^454^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P2_Replace_Operator]^left.toArray ( array, index  ^  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, result + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, index + start ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray (  index + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( left, index + array.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, left + index.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, index + left.relativePosition.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( left.relativePosition, index + array ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P7_Replace_Invocation]^left.indexOf ( array, index + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P7_Replace_Invocation]^left .rotateRight (  )  ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P8_Replace_Mix]^left.toArray ( array, index + relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P14_Delete_Statement]^^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^455^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P2_Replace_Operator]^left.toArray ( array, index  <  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, mid + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, index + result ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( index, array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, left.relativePosition + index ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^left.toArray ( array, index + left ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P8_Replace_Mix]^left.indexOf ( array, index + indexRelativeToMe ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P6_Replace_Expression]^if  ( index + right.relativePosition )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  != null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  != true )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  == null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P15_Unwrap_Block]^right.toArray(array, (index + (right.relativePosition)));^457^458^459^^^452^460^if  ( getRightSubTree (  )  != null )  { right.toArray ( array, index + right.relativePosition ) ; }^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P16_Remove_Block]^^457^458^459^^^452^460^if  ( getRightSubTree (  )  != null )  { right.toArray ( array, index + right.relativePosition ) ; }^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^457^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^457^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^457^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P2_Replace_Operator]^right.toArray ( array, index   instanceof   right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, start + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, index + start ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray (  index + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( right, index + array.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, right + index.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( right.relativePosition, index + array ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P7_Replace_Invocation]^right.indexOf ( array, index + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P8_Replace_Mix]^right.toArray ( array, index + indexRelativeToMe ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P14_Delete_Statement]^^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^458^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^458^^^^^452^460^[Delete]^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P2_Replace_Operator]^right.toArray ( array, index  ==  right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, mid + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, right.relativePosition + index ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P5_Replace_Variable]^right.toArray ( array, index + right ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P7_Replace_Invocation]^right .rotateRight (  )  ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P8_Replace_Mix]^right.toArray ( array, index + relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[P2_Replace_Operator]^if  ( rightIsNext && right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( rightIsNext || right != null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( leftIsPrevious || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( right || rightIsNext == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( rightIsNextIsNext || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( rightIsNext ) {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  (  right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( rightIsNext || right == true )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return right;^468^469^470^^^467^472^if  ( rightIsNext || right == null )  { return right; }^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^468^469^470^^^467^472^if  ( rightIsNext || right == null )  { return right; }^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( rightIsNext )  {     right = leftMax.right; }^468^^^^^467^472^[Delete]^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^468^^^^^467^472^[Delete]^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^468^^^^^467^472^[Delete]^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  (  ( getRightSubTree (  )  )  == null )  &&  (  ( getLeftSubTree (  )  )  == null )  )  {     return null; }^468^^^^^467^472^[Delete]^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^468^^^^^467^472^[Delete]^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^468^^^^^467^472^[Delete]^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^468^^^^^467^472^[Delete]^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return 2;^469^^^^^467^472^return right;^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return right.max (  ) ;^471^^^^^467^472^return right.min (  ) ;^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return 0.min (  ) ;^471^^^^^467^472^return right.min (  ) ;^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^471^^^^^467^472^return right.min (  ) ;^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( leftIsPrevious && left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( leftIsPrevious || left != null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( rightIsNext || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( left || leftIsPrevious == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( leftIsPreviousIsPrevious || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( leftIsPrevious ) {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  (  left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  (  left == false )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return left;^480^481^482^^^479^484^if  ( leftIsPrevious || left == null )  { return left; }^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^480^481^482^^^479^484^if  ( leftIsPrevious || left == null )  { return left; }^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^480^^^^^479^484^[Delete]^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  (  ( getRightSubTree (  )  )  == null )  &&  (  ( getLeftSubTree (  )  )  == null )  )  {     return null; }^480^^^^^479^484^[Delete]^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^480^^^^^479^484^[Delete]^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^480^^^^^479^484^[Delete]^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( leftIsPrevious )  {     left = rightMin.left; }^480^^^^^479^484^[Delete]^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return 4;^481^^^^^479^484^return left;^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return 2;^481^^^^^479^484^return left;^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return left.min (  ) ;^483^^^^^479^484^return left.max (  ) ;^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return left .max (  )  ;^483^^^^^479^484^return left.max (  ) ;^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^483^^^^^479^484^return left.max (  ) ;^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P1_Replace_Type]^final  short  indexRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^final int indexRelativeToMe = index  <  relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int startRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int indexRelativeToMe = index - start;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - index;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;final int indexRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int result = left.indexOf ( object, index + left.relativePosition ) ;final int indexRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( indexRelativeToMe < 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( indexRelativeToMe <= start )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( result <= 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( indexRelativeToMe <= 0 * 3 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe == 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe > 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return insertOnLeft(indexRelativeToMe, obj);^496^497^498^^^493^500^if  ( indexRelativeToMe <= 0 )  { return insertOnLeft ( indexRelativeToMe, obj ) ; }^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^496^497^498^^^493^500^if  ( indexRelativeToMe <= 0 )  { return insertOnLeft ( indexRelativeToMe, obj ) ; }^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^496^^^^^493^500^[Delete]^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^496^^^^^493^500^[Delete]^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnLeft ( start, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnLeft ( indexRelativeToMe, value ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnLeft (  obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnLeft ( indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnLeft ( obj, indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return insertOnRight ( indexRelativeToMe, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( indexRelativeToMe > 0 )  { return insertOnLeft ( indexRelativeToMe, obj ) ; }^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe <= 0 )  {     return insertOnLeft ( indexRelativeToMe, obj ) ; }^497^^^^^493^500^[Delete]^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return insertOnRight ( mid, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnLeft ( mid, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnRight ( mid, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnRight (  obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnRight ( indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnRight ( obj, indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return insertOnLeft ( indexRelativeToMe, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return insertOnRight ( indexRelativeToMe, value ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return insertOnRight ( relativePosition, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  == false )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>((-1), obj, this, left), null);^503^504^505^506^507^502^515^if  ( getLeftSubTree (  )  == null )  { setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ; } else { setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^503^504^505^506^507^502^515^if  ( getLeftSubTree (  )  == null )  { setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ; } else { setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     setRight ( new AVLNode<E> (  ( +1 ) , obj, right, this ) , null ) ; }else {     setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^503^^^^^502^515^[Delete]^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( start < mid )  {     left = new AVLNode<E> ( iterator, start,  ( mid - 1 ) , mid, prev, this ) ; }else {     leftIsPrevious = true;     left = prev; }^503^^^^^502^515^[Delete]^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.insert ( mid, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.insert ( indexRelativeToMe, value ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.insert (  obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.insert ( indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.insert ( obj, indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( obj.insert ( indexRelativeToMe, left ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setLeft ( left.insertOnLeft ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setLeft ( left.insert ( start, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return insertOnLeft ( indexRelativeToMe, obj ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return insertOnRight ( indexRelativeToMe, obj ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.insert ( relativePosition, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( indexRelativeToMe.insert ( left, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setLeft ( left.insert ( result, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^setLeft ( new AVLNode<E> ( -4, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P4_Replace_Constructor]^setLeft ( setLeft (  new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next )  , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1, value, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1,  this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1, obj, this ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( new AVLNode<E> ( -1, left, this, obj ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^setLeft ( new AVLNode<E> ( -end, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^setLeft ( new AVLNode<E> ( -8, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setLeft ( left.insertOnLeft ( indexRelativeToMe, value ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setLeft ( left .insertOnLeft ( relativePosition , obj )  , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition > 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition >= start )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( indexRelativeToMe >= 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition >= 4 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)++;^509^510^511^^^502^515^if  ( relativePosition >= 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^509^510^511^^^502^515^if  ( relativePosition >= 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^509^^^^^502^515^[Delete]^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^509^^^^^502^515^[Delete]^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^509^^^^^502^515^[Delete]^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> ret = min (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> ret = balance (  ) ;^512^^^^^502^515^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^512^513^^^^502^515^final AVLNode<E> ret = balance (  ) ; recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^513^^^^^502^515^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^513^^^^^502^515^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^513^^^^^502^515^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^513^^^^^502^515^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == this )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>((+1), obj, right, this), null);^518^519^520^521^522^517^529^if  ( getRightSubTree (  )  == null )  { setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ; } else { setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^518^519^520^521^522^517^529^if  ( getRightSubTree (  )  == null )  { setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ; } else { setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ; }^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     setLeft ( new AVLNode<E> (  ( -1 ) , obj, this, left ) , null ) ; }else {     setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ; }^518^^^^^517^529^[Delete]^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( mid < end )  {     right = new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next ) ; }else {     rightIsNext = true;     right = next; }^518^^^^^517^529^[Delete]^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.insert ( mid, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.insert ( indexRelativeToMe, value ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.insert (  obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.insert ( indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.insert ( obj, indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( obj.insert ( indexRelativeToMe, right ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( indexRelativeToMe.insert ( right, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setRight ( right.insertOnLeft ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return insertOnLeft ( indexRelativeToMe, obj ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return insertOnRight ( indexRelativeToMe, obj ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^setRight ( new AVLNode<E> ( +relativePosition, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P4_Replace_Constructor]^setRight ( setRight (  new AVLNode<E> ( iterator,  ( mid + 1 ) , end, mid, this, next )  , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1, value, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1,  right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1, obj,  this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( new AVLNode<E> ( +1, right, obj, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^setRight ( new AVLNode<E> ( +0, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.insert ( start, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setRight ( right .insertOnLeft ( absolutePositionOfParent , obj )  , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition <= 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition < index )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( start < 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition < 3 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)--;^523^524^525^^^517^529^if  ( relativePosition < 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^523^524^525^^^517^529^if  ( relativePosition < 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^523^^^^^517^529^[Delete]^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^523^^^^^517^529^[Delete]^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^523^^^^^517^529^[Delete]^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> ret = min (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> ret = balance (  ) ;^526^^^^^517^529^final AVLNode<E> ret = balance (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^526^527^^^^517^529^final AVLNode<E> ret = balance (  ) ; recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^527^^^^^517^529^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^527^^^^^517^529^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^527^^^^^517^529^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^527^^^^^517^529^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return rightIsNext ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return left ? null : leftIsPrevious;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return leftIsPreviousIsPrevious ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return rightIsNext ? true : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return leftIsPrevious ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return right ? null : rightIsNext;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return rightIsNextIsNext ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return rightIsNext ? this : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^return getRightSubTree (  )  != null ? this : right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^return getRightSubTree ( right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return getLeftSubTree (  )  == null ? this : right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return getRightSubTree (  )  == null ? this : right.min (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return getRightSubTree (  )  == true ? this : right.min (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null )  { return getRightSubTree (  )  == null ? this : right.max (  ) ; }^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  != null )  { return getRightSubTree (  )  == null ? this : right.max (  ) ; }^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return getRightSubTree (  )  == null ? this : right.max (  ) ; }^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return getRightSubTree (  )  == null ? this : right .max (  )  ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^return getLeftSubTree (  )  != null ? this : left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^return getLeftSubTree ( left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return getRightSubTree (  )  == null ? this : left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return getLeftSubTree (  )  == null ? this : left.max (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( getLeftSubTree (  )  != null )  { return getLeftSubTree (  )  == null ? this : left.min (  ) ; }^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( getLeftSubTree (  )  == null )  { return getLeftSubTree (  )  == null ? this : left.min (  ) ; }^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P1_Replace_Type]^final  short  indexRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^final int indexRelativeToMe = index  ==  relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int startRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int indexRelativeToMe = index - result;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final int relativePositionRelativeToMe = index - index;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;final int indexRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int result = left.indexOf ( object, index + left.relativePosition ) ;final int indexRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( indexRelativeToMe != 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( indexRelativeToMe == 7 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( result == 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( indexRelativeToMe == 0 - 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe > 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe <= 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return removeSelf();^573^574^575^^^570^589^if  ( indexRelativeToMe == 0 )  { return removeSelf (  ) ; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^573^574^575^^^570^589^if  ( indexRelativeToMe == 0 )  { return removeSelf (  ) ; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^573^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^573^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe <= 0 )  {     return insertOnLeft ( indexRelativeToMe, obj ) ; }^573^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^573^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^573^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^573^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return removeMax (  ) ;^574^^^^^570^589^return removeSelf (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^574^^^^^570^589^return removeSelf (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( indexRelativeToMe >= 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( indexRelativeToMe > height )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( indexRelativeToMe > absolutePositionOfParent )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( indexRelativeToMe > -3 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( mid > 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition < 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition > 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( mid > 0L )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe == 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( indexRelativeToMe <= 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^setRight(right.remove(indexRelativeToMe), right.right); if ((relativePosition) < 0) {    (relativePosition)++;};^576^577^578^579^580^570^589^if  ( indexRelativeToMe > 0 )  { setRight ( right.remove ( indexRelativeToMe ) , right.right ) ; if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^576^577^578^579^580^570^589^if  ( indexRelativeToMe > 0 )  { setRight ( right.remove ( indexRelativeToMe ) , right.right ) ; if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > indexRelativeToMe )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( indexRelativeToMe > 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition > 0 * 4 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)--;^583^584^585^^^570^589^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^583^584^585^^^570^589^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^583^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^583^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^583^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.remove ( relativePosition ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( this.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.remove ( indexRelativeToMe ) .left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.remove ( indexRelativeToMe )  ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( indexRelativeToMe.remove ( left ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.left.remove ( indexRelativeToMe ) , left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.remove ( left.left ) , indexRelativeToMe ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^getOffset ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setLeft ( left.get ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setLeft ( left.remove ( start ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return insertOnLeft ( indexRelativeToMe, obj ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return insertOnRight ( indexRelativeToMe, obj ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setLeft ( left .removeMax (  )  , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setLeft ( left.remove ( mid ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition <= 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition < 8 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( start < 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition < 1 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)++;^578^579^580^^^570^589^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^578^579^580^^^570^589^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^578^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^578^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^578^^^^^570^589^[Delete]^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.remove ( relativePosition ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.remove ( indexRelativeToMe ) .right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.remove ( indexRelativeToMe )  ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( indexRelativeToMe.remove ( right ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.right.remove ( indexRelativeToMe ) , right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^getOffset ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setRight ( right.get ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setRight ( right.remove ( start ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setRight ( right.get ( mid ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( indexRelativeToMe < 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition < 0 / 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > index )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( mid > 1 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.remove ( right.right ) , indexRelativeToMe ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^getOffset ( right.remove ( mid ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setRight ( right.remove ( mid ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setLeft ( left.remove ( result ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^587^^^^^570^589^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^587^588^^^^570^589^recalcHeight (  ) ; return balance (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^587^^^^^570^589^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^587^^^^^570^589^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return min (  ) ;^588^^^^^570^589^return balance (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^588^^^^^570^589^return balance (  ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  == false )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return removeSelf();^592^593^594^^^591^601^if  ( getRightSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^592^593^594^^^591^601^if  ( getRightSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     right.toArray ( array,  ( index +  ( right.relativePosition )  )  ) ; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  (  ( getRightSubTree (  )  )  == null )  &&  (  ( getLeftSubTree (  )  )  == null )  )  {     return null; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  != null )  {     return right.indexOf ( object,  ( index +  ( right.relativePosition )  )  ) ; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^592^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return removeMax (  ) ;^593^^^^^591^601^return removeSelf (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^593^^^^^591^601^return removeSelf (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.removeMax (  ) .right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.removeMax (  )  ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( right.right.removeMax (  ) , right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^heightRightMinusLeft ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setRight ( right.removeMin (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setRight ( right.removeMax (  ) , right.right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition <= 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition < start )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( indexRelativeToMe < 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition < 1 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)++;^596^597^598^^^591^601^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^596^597^598^^^591^601^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^596^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^596^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^596^^^^^591^601^[Delete]^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^599^^^^^591^601^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return min (  ) ;^600^^^^^591^601^return balance (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^600^^^^^591^601^return balance (  ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getLeftSubTree (  )  == this )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return removeSelf();^604^605^606^^^603^613^if  ( getLeftSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^604^605^606^^^603^613^if  ( getLeftSubTree (  )  == null )  { return removeSelf (  ) ; }^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^604^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^604^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^604^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( node == null )  {     return 0; }^604^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return removeSelf (  ) ; }^604^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^604^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  != null )  {     left.toArray ( array,  ( index +  ( left.relativePosition )  )  ) ; }^604^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return removeMax (  ) ;^605^^^^^603^613^return removeSelf (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^605^^^^^603^613^return removeSelf (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.removeMin (  ) .left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.removeMin (  )  ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( left.left.removeMin (  ) , left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^heightRightMinusLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setLeft ( left.removeMax (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setLeft ( left.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > mid )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( indexRelativeToMe > 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition > 0L )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)--;^608^609^610^^^603^613^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^608^609^610^^^603^613^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^608^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^608^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^608^^^^^603^613^[Delete]^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^611^^^^^603^613^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^611^612^^^^603^613^recalcHeight (  ) ; return balance (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^611^^^^^603^613^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^611^^^^^603^613^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return min (  ) ;^612^^^^^603^613^return balance (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^612^^^^^603^613^return balance (  ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null || getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null && getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  != null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( getRightSubTree (  )  == null ) {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  (  getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null && getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null && getRightSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == false && getLeftSubTree (  )  == false )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return null;^621^622^623^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return null; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^621^622^623^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return null; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^621^^^^^606^636^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^621^^^^^606^636^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^621^^^^^606^636^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return true;^622^^^^^607^637^return null;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getRightSubTree (  )  != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition > 0 )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition + (relativePosition > 0 ? 0 : 1) )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getLeftSubTree (  )  == null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == this )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^if ((relativePosition) > 0) {    left.relativePosition += (relativePosition) + ((relativePosition) > 0 ? 0 : 1);}; left.max().setRight(null, right); return left;^624^625^626^627^^609^639^if  ( getRightSubTree (  )  == null )  { if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^624^625^626^627^^609^639^if  ( getRightSubTree (  )  == null )  { if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition == 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > absolutePositionOfParent )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > relativePosition )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( indexRelativeToMe > 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition + (relativePosition > 0 ? 0 : 1) )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition > 4 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^left.relativePosition += (relativePosition) + ((relativePosition) > 0 ? 0 : 1);^625^626^627^^^610^640^if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^625^626^627^^^610^640^if  ( relativePosition > 0 )  { left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     right.relativePosition +=  ( relativePosition )  -  (  ( relativePosition )  < 0 ? 0 : 1 ) ;     right.min (  ) .setLeft ( null, left ) ;     return right; }^625^^^^^610^640^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     if  (  ( relativePosition )  > 0 )  {         left.relativePosition +=  ( relativePosition )  +  (  ( relativePosition )  > 0 ? 0 : 1 ) ;     }     left.max (  ) .setRight ( null, right ) ;     return left; }^625^^^^^610^640^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  &&  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  ( relativePosition < 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > mid ? mid : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 7 ? 7 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : mid ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^left.relativePosition + =  1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^left.relativePosition + =  0 ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left.relativePosition += relativePosition +  ( relativePosition > 4 ? 4 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {     left.relativePosition +=  ( relativePosition )  +  (  ( relativePosition )  > 0 ? 0 : 1 ) ; }^626^^^^^611^641^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  &  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  ( relativePosition >= 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > start ? start : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > absolutePositionOfParent ? absolutePositionOfParent : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : -4 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^left.relativePosition += mid +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left.relativePosition += relativePosition +  ( relativePosition > 2 ? 2 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^left.max (  ) .setRight ( null, 1 ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^left.max (  ) .setRight ( null ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^left.max (  ) .getOffset ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^left.min (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^left .max (  )  .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;left.max (  ) .setRight ( null, right ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > end )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > 8 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > -5 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( start > 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition > 1 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^left.relativePosition += relativePosition +  <  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > -4 ? -4 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : -7 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left.relativePosition += relativePosition +  ( relativePosition > 3 ? 3 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^left.relativePosition += relativePosition +   instanceof   ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 5 ? 5 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 9 ? 9 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 10 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^left.relativePosition += result +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return null;^629^^^^^614^644^return left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^628^629^^^^613^643^left.max (  ) .setRight ( null, right ) ; return left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( getLeftSubTree (  )  != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition - (relativePosition < 0 ? 0 : 1) )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition < 0 )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  == null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( getRightSubTree (  )  == false )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^right.relativePosition += (relativePosition) - ((relativePosition) < 0 ? 0 : 1); right.min().setLeft(null, left); return right;^631^632^633^634^635^616^646^if  ( getLeftSubTree (  )  == null )  { right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ; right.min (  ) .setLeft ( null, left ) ; return right; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^631^632^633^634^635^616^646^if  ( getLeftSubTree (  )  == null )  { right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ; right.min (  ) .setLeft ( null, left ) ; return right; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^right.relativePosition += relativePosition  >>   ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^right.relativePosition += relativePosition -  ( relativePosition <= 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 3 ? 3 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < -4 ? -4 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : result ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right.relativePosition += indexRelativeToMe -  ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^right.relativePosition + =  1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^right.relativePosition + =  0 ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^right.relativePosition += relativePosition -  ( relativePosition < 0 * 3 ? 0 * 3 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {     left.relativePosition +=  ( relativePosition )  +  (  ( relativePosition )  > 0 ? 0 : 1 ) ; }^632^^^^^617^647^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right.min (  ) .setLeft ( null ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^right.min (  ) .getOffset ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^right.max (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^633^634^^^^618^648^right.min (  ) .setLeft ( null, left ) ; return right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;right.min (  ) .setLeft ( null, left ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < absolutePositionOfParent ? absolutePositionOfParent : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < -3 ? -3 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : -4 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^right.relativePosition += relativePosition -  ( relativePosition < 4 ? 4 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( heightRightMinusLeft (  )  >= 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( heightRightMinusLeft (  )  > 8 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( heightRightMinusLeft (  )  > -6 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( heightRightMinusLeft (  )  > 1 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition < 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( left == null )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P6_Replace_Expression]^if  ( relativePosition > 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( getRightSubTree (  )  > 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( right.heightRightMinusLeft (  )  < 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( left.heightRightMinusLeft (  )  > 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( leftIsPrevious )  {^652^^^^^637^666^if  ( rightIsNext )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^right = leftMax.right;^652^653^654^^^637^666^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^652^653^654^^^637^666^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^652^^^^^637^666^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right = null.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right = leftMax.right.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right = leftMax;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^value = leftMax.value;right = leftMax.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = next;right = leftMax.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( left != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( left == this )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( s != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( node == null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^left = leftPrevious; leftIsPrevious = true;^657^658^^660^661^637^666^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^657^658^^660^661^637^666^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left =  null;^660^^^^^637^666^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = prev;left = leftPrevious;^660^^^^^637^666^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;left = leftPrevious;^660^^^^^637^666^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = leftFollower;left = leftPrevious;^660^^^^^637^666^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { left = leftPrevious; }^660^^^^^637^666^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^leftIsPrevious = false;^661^^^^^637^666^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^661^^^^^637^666^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { leftIsPrevious = true; }^661^^^^^637^666^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition > mid )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( start > 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition > 2 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)--;^663^664^665^^^637^666^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^663^664^665^^^637^666^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^663^^^^^637^666^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^663^^^^^637^666^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^663^^^^^637^666^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = leftMax.value.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = leftMax;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^value =  null.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^value = rightMin.value;value = leftMax.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = leftMax.right;value = leftMax.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^right =  0.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^left = left.removeMin (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left  =  left ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTree = otherTree.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> leftMax = left.min (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^final AVLNode<E> leftMax = left .max (  )  ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final AVLNode<E> left.leftPrevious = left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftPrevious = left.left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^650^^^^^637^666^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return left.max (  ) ;left = left.removeMax (  ) ;^656^^^^^637^666^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( rightIsNext )  {^641^^^^^626^656^if  ( leftIsPrevious )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^left = rightMin.left;^641^642^643^^^626^656^if  ( leftIsPrevious )  { left = rightMin.left; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^641^642^643^^^626^656^if  ( leftIsPrevious )  { left = rightMin.left; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^641^^^^^626^656^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^left = 4;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^left = rightMin.left.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^left = rightMin;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left =  null.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^value = rightMin.value;left = rightMin.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition <= 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition < index )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( mid < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition < 1 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition > 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition >= 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)++;^645^646^647^^^630^660^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^645^646^647^^^630^660^if  ( relativePosition < 0 )  { relativePosition++; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^645^^^^^630^660^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^645^^^^^630^660^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^645^^^^^630^660^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = rightMin.value.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = rightMin;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^value =  3.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^value = leftMax.value;value = rightMin.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = rightMin.left;value = rightMin.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^right = right.removeMax (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^right  =  right ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = rightFollower;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTree = otherTree.removeMin (  ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final AVLNode<E> 2Min = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> rightMin = right.max (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^final AVLNode<E> nullMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> rightMin = right.min (  ) ;^639^^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^639^640^^^^624^654^final AVLNode<E> rightMin = right.min (  ) ; value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^right = null.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;right = right.removeMin (  ) ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition < -3 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( result < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition < 2 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( leftIsPrevious )  {^652^^^^^637^667^if  ( rightIsNext )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^right = leftMax.right;^652^653^654^^^637^667^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^652^653^654^^^637^667^if  ( rightIsNext )  { right = leftMax.right; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^652^^^^^637^667^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right = null;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right = leftMax.right.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^right = leftMax;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^right =  null.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^value = leftMax.value;right = leftMax.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = next;right = leftMax.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( left != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^if  ( 4 == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( left == this )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( s != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( node == null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^left = leftPrevious; leftIsPrevious = true;^657^658^^660^661^642^672^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^657^658^^660^661^642^672^if  ( left == null )  {  left = leftPrevious; leftIsPrevious = true; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left =  null;^660^^^^^645^675^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = prev;left = leftPrevious;^660^^^^^645^675^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;left = leftPrevious;^660^^^^^645^675^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = leftFollower;left = leftPrevious;^660^^^^^645^675^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { left = leftPrevious; }^660^^^^^645^675^left = leftPrevious;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^leftIsPrevious = false;^661^^^^^646^676^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;leftIsPrevious = true;^661^^^^^646^676^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P12_Insert_Condition]^if  ( leftIsPrevious )  { leftIsPrevious = true; }^661^^^^^646^676^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( relativePosition >= 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( relativePosition >  )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( relativePosition > 0 * 4 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( relativePosition < 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^(relativePosition)--;^663^664^665^^^648^678^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^663^664^665^^^648^678^if  ( relativePosition > 0 )  { relativePosition--; }^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^663^^^^^648^678^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^663^^^^^648^678^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^663^^^^^648^678^[Delete]^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^value =  null.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^right ;^644^^^^^629^659^right = right.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = leftMax.value.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^value = leftMax;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^value =  null.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^value = rightMin.value;value = leftMax.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = leftMax.right;value = leftMax.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^left = left.removeMin (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^left  =  left ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTree = otherTree.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^left = leftPrevious;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> leftMax = left.min (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^final AVLNode<E> leftMax = left .max (  )  ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> leftMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^final AVLNode<E> left.leftPrevious = left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftPrevious = left.left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return left.max (  ) ;left = left.removeMax (  ) ;^656^^^^^641^671^left = left.removeMax (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^667^^^^^652^682^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return null;^668^^^^^653^683^return this;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( left.heightRightMinusLeft (  )  >= 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( left.heightRightMinusLeft (  )  > absolutePositionOfParent )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( left.getRightSubTree (  )  > 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( left.heightRightMinusLeft (  )  > 0L )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( right.heightRightMinusLeft (  )  < 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( heightRightMinusLeft (  )  > 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^setLeft(left.rotateLeft(), null);^682^683^684^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  { setLeft ( left.rotateLeft (  ) , null ) ; }^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^682^683^684^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  { setLeft ( left.rotateLeft (  ) , null ) ; }^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( right.heightRightMinusLeft (  )  )  < 0 )  {     setRight ( right.rotateRight (  ) , null ) ; }^682^^^^^675^694^[Delete]^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^getOffset ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setLeft ( left.rotateRight (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;setLeft ( left.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( right.heightRightMinusLeft (  )  <= 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^if  ( right.heightRightMinusLeft (  )  < mid )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^if  ( right.getRightSubTree (  )  < 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( right.heightRightMinusLeft (  )  < 0 - 1 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( heightRightMinusLeft (  )  > 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( left.heightRightMinusLeft (  )  > 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^setRight(right.rotateRight(), null);^687^688^689^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  { setRight ( right.rotateRight (  ) , null ) ; }^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^687^688^689^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  { setRight ( right.rotateRight (  ) , null ) ; }^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( left.heightRightMinusLeft (  )  )  > 0 )  {     setLeft ( left.rotateLeft (  ) , null ) ; }^687^^^^^675^694^[Delete]^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^getOffset ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^setRight ( right.rotateLeft (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.removeMax (  ) , right.right ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;setRight ( right.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setRight ( 0.rotateRight (  ) , null ) ;^688^^^^^675^694^setRight ( right.rotateRight (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return null;^680^^^^^675^694^return this;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return rotateLeft (  ) ;^685^^^^^675^694^return rotateRight (  ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^return rotateRight (  ) ;^690^^^^^675^694^return rotateLeft (  ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return ;^692^^^^^675^694^throw new RuntimeException  (" ")  ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P7_Replace_Invocation]^switch  ( getRightSubTree (  )  )  {^676^^^^^675^694^switch  ( heightRightMinusLeft (  )  )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( 2.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^setLeft ( this.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^685^^^^^675^694^return rotateRight (  ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P14_Delete_Statement]^^690^^^^^675^694^return rotateLeft (  ) ;^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( node != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^if  ( node == false )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( left == null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( s != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P15_Unwrap_Block]^return 0;^700^701^702^^^699^704^if  ( node == null )  { return 0; }^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P16_Remove_Block]^^700^701^702^^^699^704^if  ( node == null )  { return 0; }^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^700^^^^^699^704^[Delete]^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^700^^^^^699^704^[Delete]^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^700^^^^^699^704^[Delete]^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^700^^^^^699^704^[Delete]^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^700^^^^^699^704^[Delete]^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^700^^^^^699^704^[Delete]^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^700^^^^^699^704^[Delete]^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^return ;^701^^^^^699^704^return 0;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return 0 - 2;^701^^^^^699^704^return 0;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P3_Replace_Literal]^return 5;^701^^^^^699^704^return 0;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return 0 + 2;^701^^^^^699^704^return 0;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return start;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return node.relativePosition.relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P5_Replace_Variable]^return node;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P8_Replace_Mix]^return relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[P2_Replace_Operator]^if  ( node != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^if  ( node == false )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P9_Replace_Statement]^if  ( left == null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P9_Replace_Statement]^if  ( s != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P15_Unwrap_Block]^return 0;^710^711^712^^^709^716^if  ( node == null )  { return 0; }^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P16_Remove_Block]^^710^711^712^^^709^716^if  ( node == null )  { return 0; }^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P13_Insert_Block]^if  ( nextNode == null )  {     return null; }^710^^^^^709^716^[Delete]^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getRightSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^710^^^^^709^716^[Delete]^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( rightIsNext )  ||  (  ( right )  == null )  )  {     return right; }^710^^^^^709^716^[Delete]^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( getLeftSubTree (  )  )  == null )  {     return removeSelf (  ) ; }^710^^^^^709^716^[Delete]^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P13_Insert_Block]^if  (  ( leftIsPrevious )  ||  (  ( left )  == null )  )  {     return left; }^710^^^^^709^716^[Delete]^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P13_Insert_Block]^if  ( indexRelativeToMe == 0 )  {     return this; }^710^^^^^709^716^[Delete]^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P13_Insert_Block]^if  ( result !=  ( -1 )  )  {     return result; }^710^^^^^709^716^[Delete]^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P3_Replace_Literal]^return height;^711^^^^^709^716^return 0;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^return 0 / 4;^711^^^^^709^716^return 0;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P3_Replace_Literal]^return -4;^711^^^^^709^716^return 0;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^return 4;^711^^^^^709^716^return 0;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P1_Replace_Type]^final  short  oldOffset = getOffset ( node ) ;^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final int oldOffset = getHeight ( node ) ;^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;final int oldOffset = getOffset ( node ) ;^713^^^^^709^716^final int oldOffset = getOffset ( node ) ;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^713^714^^^^709^716^final int oldOffset = getOffset ( node ) ; node.relativePosition = newOffest;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^node.relativePosition = mid;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^node.relativePosition =  newOffest;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;node.relativePosition = newOffest;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTree.relativePosition += currentSize;node.relativePosition = newOffest;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^return newOffest;^715^^^^^709^716^return oldOffset;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^return result;^715^^^^^709^716^return oldOffset;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^height = Math.max ( getLeftSubTree (  &&  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^height = Math.max ( getLeftSubTree (  )  != null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -height : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -height : getRightSubTree (  ) .height )  + height;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  ;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^height = Math.max ( getLeftSubTree ( getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^height = Math.max ( getRightSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getLeftSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^height = Math.max ( getLeftSubTree (  )  == false ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == false ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -mid : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -mid : getRightSubTree (  ) .height )  + mid;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P3_Replace_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -oldOffset : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -oldOffset : getRightSubTree (  ) .height )  + oldOffset;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^height = Math .max (  )  .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^getLeftSubTree ( getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^getRightSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^723^724^^^^721^725^getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^getRightSubTree ( getRightSubTree (  ) .height )  + 1;^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^getLeftSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1; }^724^^^^^721^725^getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^return node != null ? -1 : node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P3_Replace_Literal]^return node == null ? --7 : node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^return node == null ? -1 : mid;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^return node.height == null ? -1 : node;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^return node ( node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^return node != null ? -1 : newOffest;;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^return getHeight ( getRightSubTree (  )  )   !=  getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] AVLNode  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^return heightRightMinusLeft ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] AVLNode  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^return getHeight ( getLeftSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] AVLNode  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^return getHeight ( getRightSubTree (  )  )  - getHeight ( getRightSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] AVLNode  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P12_Insert_Condition]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  { return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ; }^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] AVLNode  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] AVLNode  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> newTop = right;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getRightSubTree (  ) .getRightSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getLeftSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^743^^^^^741^756^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P1_Replace_Type]^final  short  newTopPosition = relativePosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^final int newTopPosition = myNewPosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final int newTopPosition = relativePosition + getHeight ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition + currentSize;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^745^746^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ; final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P1_Replace_Type]^final  long  myNewPosition = -newTop.relativePosition;^746^^^^^741^756^final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition;final int myNewPosition = -newTop.relativePosition;^746^^^^^741^756^final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int indexRelativeToMe = index - relativePosition;final int myNewPosition = -newTop.relativePosition;^746^^^^^741^756^final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P1_Replace_Type]^final  long  movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^final int movedPosition = getOffset ( newTop )  <  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final int movedPosition = getHeight ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int oldOffset = getOffset ( node ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int newTopPosition = relativePosition + getOffset ( newTop ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setRight (  newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setRight ( newTop, movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^setLeft ( movedNode, newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setRight ( movedNode, newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setRight ( movedNode, newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^newTop.setRight ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;newTop.setLeft ( this, null ) ;^750^^^^^741^756^newTop.setLeft ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( newTop, result ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset (  newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( newTopPosition, newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^addAll ( newTop, newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^setOffset ( newTop, relativePosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^752^753^^^^741^756^setOffset ( newTop, newTopPosition ) ; setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( newTop, newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( newTop, newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^getOffset ( this, myNewPosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^getOffset ( this, oldOffset ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^753^754^^^^741^756^setOffset ( this, myNewPosition ) ; setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( this, myNewPosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( this, myNewPosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( movedNode, oldOffset ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset (  movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( movedPosition, movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^addAll ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^addAll ( movedNode, newTopPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^754^755^^^^741^756^setOffset ( movedNode, movedPosition ) ; return newTop;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> newTop = left;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getLeftSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> movedNode = getRightSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getRightSubTree (  ) .getLeftSubTree (  ) ;final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^760^^^^^758^773^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P1_Replace_Type]^final  long  newTopPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^final int newTopPosition = newOffest + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final int newTopPosition = relativePosition + getHeight ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^final int newTopPosition = myNewPosition + getHeight ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition + currentSize;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;final int newTopPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^762^763^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ; final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P1_Replace_Type]^final  short  myNewPosition = -newTop.relativePosition;^763^^^^^758^773^final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition;final int myNewPosition = -newTop.relativePosition;^763^^^^^758^773^final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int indexRelativeToMe = index - relativePosition;final int myNewPosition = -newTop.relativePosition;^763^^^^^758^773^final int myNewPosition = -newTop.relativePosition;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P1_Replace_Type]^final  long  movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^final int movedPosition = getOffset ( newTop )  >=  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final int movedPosition = getHeight ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int oldOffset = getOffset ( node ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^final int newTopPosition = relativePosition + getOffset ( newTop ) ;final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setLeft (  newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setLeft ( newTop, movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^setRight ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^766^767^^^^758^773^setLeft ( movedNode, newTop ) ; newTop.setRight ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( movedNode, newTop ) ;setLeft ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setLeft ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( left.removeMin (  ) , left.left ) ;setLeft ( movedNode, newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^newTop.setLeft ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;newTop.setRight ( this, null ) ;^767^^^^^758^773^newTop.setRight ( this, null ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( newTop, myNewPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset (  newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( newTopPosition, newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^addAll ( newTop, newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^setOffset ( newTop, newOffest ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( newTop, newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( newTop, newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( this, newTopPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^getOffset ( this, myNewPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^setOffset ( this, result ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^770^771^^^^758^773^setOffset ( this, myNewPosition ) ; setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( this, myNewPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( movedNode, movedPosition ) ;setOffset ( this, myNewPosition ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( movedNode, newOffest ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset (  movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^setOffset ( movedPosition, movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^addAll ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^setOffset ( movedNode, newTopPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^771^772^^^^758^773^setOffset ( movedNode, movedPosition ) ; return newTop;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( newTop, newTopPosition ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setOffset ( this, myNewPosition ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setLeft ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^setRight ( movedNode, newTop ) ;setOffset ( movedNode, movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^leftIsPrevious = node != null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^leftIsPrevious = node == false;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^leftIsPrevious = true;leftIsPrevious = node == null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^rightIsNext = node == null;leftIsPrevious = node == null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P12_Insert_Condition]^if  ( leftIsPrevious || left == null )  { leftIsPrevious = node == null; }^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^left = rightIsNext ? previous : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^left = leftIsPrevious ? node : previous;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^left = node ? previous : leftIsPrevious;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^left  =  node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^left  =  previous ;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^left =  leftIsPrevious ? null : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^784^^^^^781^785^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P2_Replace_Operator]^rightIsNext = node != null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^rightIsNext = node == true;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^leftIsPrevious = node == null;rightIsNext = node == null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^rightIsNext = true;rightIsNext = node == null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P12_Insert_Condition]^if  ( rightIsNext || right == null )  { rightIsNext = node == null; }^794^^^^^793^797^rightIsNext = node == null;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^right = leftIsPrevious ? next : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^right = rightIsNext ? node : next;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P5_Replace_Variable]^right = node ? next : rightIsNext;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^right  =  node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P6_Replace_Expression]^right  =  next ;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P8_Replace_Mix]^right =  rightIsNext ? null : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^rotateRight (  ) ;^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P14_Delete_Statement]^^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return right.min (  ) ;recalcHeight (  ) ;^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P11_Insert_Donor_Statement]^return rotateRight (  ) ;recalcHeight (  ) ;^796^^^^^793^797^recalcHeight (  ) ;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[P7_Replace_Invocation]^final AVLNode<E> minNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> maxNode = max (  ) ;^811^^^^^796^826^final AVLNode<E> maxNode = max (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^811^812^^^^796^826^final AVLNode<E> maxNode = max (  ) ; final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> otherTreeMin = otherTree.get (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> otherTreeMin = otherTree .max (  )  ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^812^^^^^797^827^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^while  ( s != null || s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^while  ( s == null && s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^while  ( s != null && s.height == getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^while  ( s != null && myNewPosition > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^while  ( s != null && s.height > getOffset ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^while  ( s != null && newOffest > getOffset ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^if  ( s == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^if  ( null != null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( s != true )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( left == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( node == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P15_Unwrap_Block]^sAbsolutePosition += s.relativePosition;^839^840^841^^^824^854^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P16_Remove_Block]^^839^840^841^^^824^854^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += newOffest;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += s.relativePosition.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += s;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sAbsolutePosition +=  null.relativePonullition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;sAbsolutePosition += s.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sAbsolutePosition += s.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  ( s != null )  {     sAbsolutePosition += s.relativePosition; }^840^^^^^825^855^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^840^^^^^825^855^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^840^^^^^825^855^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^840^^^^^825^855^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^840^^^^^825^855^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sParentAbsolutePosition = relativePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sParentAbsolutePosition =  start;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAbsolutePosition += s.relativePosition;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sParentAbsolutePosition = sAbsolutePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s = s.left.left;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s = s;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s =  null.left;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s = s.right;s = s.left;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += oldOffset;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sAbsolutePosition +=  4.relativePo4ition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^sAncestors .pop (  )  ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;sAncestors.push ( s ) ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;sAncestors.push ( s ) ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s = sAncestor.balance (  ) ;sAncestors.push ( s ) ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^s = sAncestor.setValue (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s =  null.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors.push (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors .push ( obj )  ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^final AVLNode<E> sAncestor = sAncestors .push ( value )  ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAncestor.setLeft (  null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^setLeft ( left.rotateLeft (  ) , null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;sAncestor.setLeft ( s, null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^return balance (  ) ;s = sAncestor.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;s = sAncestor.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^if  ( otherTree.height >= height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^if  ( newTopPosition > height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^if  ( otherTree.height > newTopPosition )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( s.relativePosition + currentSize )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( s != null && s.height > getHeight(leftSubTree) )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( s != null )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( s.height > getHeight ( leftSubTree ) )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( leftSubTree != null )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( currentSize - 1 )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize + 1 )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( currentSize - 1 - sParentAbsolutePosition )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^while  ( s != null && s.height < getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^while  ( s != null && newTopPosition > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += newTopPosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sParentAbsolutePosition = newTopPosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += myNewPosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^837^838^^^^822^852^sAncestors.push ( s ) ; s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^while  ( !sAncestors .iterator (  )   )  {^862^^^^^847^877^while  ( !sAncestors.isEmpty (  )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^sAncestor .insertOnLeft ( relativePosition , value )  ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^864^865^^^^849^879^sAncestor.setLeft ( s, null ) ; s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^if  ( leftSubTree == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( currentSize - 1 )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( leftSubTree != true )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( left == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( s != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( getLeftSubTree (  )  == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( getRightSubTree (  )  != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P15_Unwrap_Block]^leftSubTree.max().setRight(null, maxNode); leftSubTree.relativePosition -= currentSize - 1;^849^850^851^852^^834^864^if  ( leftSubTree != null )  { leftSubTree.max (  ) .setRight ( null, maxNode ) ; leftSubTree.relativePosition -= currentSize - 1; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P16_Remove_Block]^^849^850^851^852^^834^864^if  ( leftSubTree != null )  { leftSubTree.max (  ) .setRight ( null, maxNode ) ; leftSubTree.relativePosition -= currentSize - 1; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  ( s != null )  {     s.min (  ) .setLeft ( null, maxNode ) ;     s.relativePosition =  ( sAbsolutePosition - currentSize )  + 1; }^849^^^^^834^864^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  ( otherTree != null )  {     otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;      ( otherTree.relativePosition ) ++; }^849^^^^^834^864^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  ( s != null )  {     s.max (  ) .setRight ( null, otherTreeMin ) ;     s.relativePosition = sAbsolutePosition - currentSize; }^849^^^^^834^864^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^leftSubTree.relativePosition -= currentSize  <<  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^leftSubTree.relativePosition = currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^leftSubTree.relativePosition -= currentSize ;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^leftSubTree.relativePosition -= sAbsolutePosition - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^leftSubTree.relativePosition -= currentSize - 4;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;leftSubTree.relativePosition -= currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;leftSubTree.relativePosition -= currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTree.relativePosition += currentSize;leftSubTree.relativePosition -= currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^leftSubTree.max (  ) .setRight ( null ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^leftSubTree.get (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;leftSubTree.max (  ) .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^if  ( s == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize + 1 )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( s != false )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( left == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( node == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P15_Unwrap_Block]^s.min().setLeft(null, maxNode); s.relativePosition = (sAbsolutePosition - currentSize) + 1;^853^854^855^856^^838^868^if  ( s != null )  { s.min (  ) .setLeft ( null, maxNode ) ; s.relativePosition = sAbsolutePosition - currentSize + 1; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P16_Remove_Block]^^853^854^855^856^^838^868^if  ( s != null )  { s.min (  ) .setLeft ( null, maxNode ) ; s.relativePosition = sAbsolutePosition - currentSize + 1; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  ==  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^s.relativePosition = sAbsolutePosition - currentSize ;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = oldOffset - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - newOffest + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = currentSize - sAbsolutePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s.relativePosition = sAbsolutePosition - currentSize + 2;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^relativePosition = mid - absolutePositionOfParent;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^leftSubTree.relativePosition -= currentSize - 1;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;s.relativePosition = sAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.min (  ) .setLeft ( null ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^s.get (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;s.min (  ) .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^s .max (  )  .setLeft ( null, maxNode ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^854^855^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ; s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sParentAbsolutePosition = myNewPosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sParentAbsolutePosition =  newOffest;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += sParentAbsolutePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^leftSubTree.relativePosition -= currentSize   instanceof   1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^leftSubTree.relativePosition -= newOffest - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^leftSubTree.relativePosition -= currentSize - 3;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  ||  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - start + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = currentSizeAbsolutePosition - s + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s.relativePosition = sAbsolutePosition - currentSize + 0;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize  <<  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize  >  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^maxNode.relativePosition = currentSize - start - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.relativePosition = newOffest - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.relativePosition = currentSize - 1 - newOffest;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.relativePosition = sParentAbsolutePosition - 1 - currentSize;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^maxNode.relativePosition = currentSize - 1L - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^otherTree.relativePosition +=  currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^node.relativePosition = newOffest;otherTree.relativePosition += currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;otherTree.relativePosition += currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^leftSubTree.relativePosition -= currentSize - 1;otherTree.relativePosition += currentSize;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s =  null;^861^^^^^846^876^s = maxNode;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> leftSubTree = removeMin (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> movedNode = getLeftSubTree (  ) .getRightSubTree (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftPrevious = left.left;final AVLNode<E> leftSubTree = removeMax (  ) ;^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^831^^^^^816^846^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^AVLNode<E> s = this;AVLNode<E> s = otherTree;^832^^^^^817^847^AVLNode<E> s = otherTree;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^long  sAbsolutePosition = s.relativePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^int sAbsolutePosition = myNewPosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^int currentSizeAbsolutePosition = s.relativePosition + s;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^int sAbsolutePosition = currentSize + s.relativePosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^int sAbsolutePosition = newTopPosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition;int sAbsolutePosition = s.relativePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final int newTopPosition = relativePosition + getOffset ( newTop ) ;int sAbsolutePosition = s.relativePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^long  sParentAbsolutePosition = 0;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^int sParentAbsolutePosition = mid;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^825^^^^^810^840^final AVLNode<E> leftSubTree = removeMax (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^835^836^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  { sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.setLeft (  null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^maxNode .insertOnLeft ( height , value )  ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^847^848^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ; maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^maxNode.setRight ( s, otherTreeMin ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;maxNode.setLeft ( leftSubTree, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.setRight (  otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.setRight ( s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;maxNode.setRight ( s, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;maxNode.setRight ( s, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;maxNode.setRight ( s, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^leftSubTree .max ( movedPosition , sAbsolutePosition )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^leftSubTree .max ( myNewPosition , result )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^862^863^^^^847^877^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^863^864^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ; sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s = 3.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( s != false )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( leftSubTree != this )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^leftSubTree.relativePosition -= currentSize - absolutePositionOfParent;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^leftSubTree.relativePosition -= sParentAbsolutePosition - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^leftSubTree.relativePosition -= currentSize - 2;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^leftSubTree .max ( result , oldOffset )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^leftSubTree .max ( mid , relativePosition )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^850^851^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ; leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( s != true )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  >=  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = newTopPosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - oldOffset + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = s - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s.relativePosition = sAbsolutePosition - currentSize + 1L;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^leftSubTree.relativePosition -= currentSize  &&  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^s.relativePosition = sAbsolutePosition - currentSize + sParentAbsolutePosition;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize  <=  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^maxNode.relativePosition = currentSize  |  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^maxNode.relativePosition = currentSize - sAbsolutePosition - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.relativePosition = oldOffset - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^maxNode.relativePosition = currentSize - 3 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTree.relativePosition += newOffest;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^short  sAbsolutePosition = s.relativePosition + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^int sAbsolutePosition = s.relativePosition + newOffest;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^int sAbsolutePosition = newOffest + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^int sAbsolutePosition = s.relativePosition + oldOffset;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^short  sParentAbsolutePosition = 0;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^int sParentAbsolutePosition = end;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.setLeft ( 3, null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P12_Insert_Condition]^if  ( leftSubTree != null )  { maxNode.setLeft ( leftSubTree, null ) ; }^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^maxNode.setRight ( otherTreeMin, s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^maxNode .getHeight ( this )  ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^maxNode.setRight ( null, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^leftSubTree .max ( mid , start )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^leftSubTree .max ( absolutePositionOfParent , mid )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^leftSubTree .max ( absolutePositionOfParent , start )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^leftSubTree .max ( indexRelativeToMe , newTopPosition )  .setRight ( null, maxNode ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^s.min (  )  .insertOnLeft ( index , value )  ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^otherTree = otherTree.remove (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^otherTree =  null.removeMin (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^left = left.removeMax (  ) ;otherTree = otherTree.removeMin (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^right = right.removeMin (  ) ;otherTree = otherTree.removeMin (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^otherTree = otherTree .removeMax (  )  ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^otherTree = 1.removeMin (  ) ;^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^869^^^^^854^884^otherTree = otherTree.removeMin (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^871^^^^^856^886^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^AVLNode<E> s = otherTree;AVLNode<E> s = this;^872^^^^^857^887^AVLNode<E> s = this;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^short  sAbsolutePosition = s.relativePosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^int sAbsolutePosition = result;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^int s.relativePositionAbsolutePosition = s;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^int sAbsolutePosition = sParentAbsolutePosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^int sAbsolutePosition = s.relativePosition + currentSize;int sAbsolutePosition = s.relativePosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final int myNewPosition = -newTop.relativePosition;int sAbsolutePosition = s.relativePosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^short  sParentAbsolutePosition = 0;^874^^^^^859^889^int sParentAbsolutePosition = 0;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P3_Replace_Literal]^int sParentAbsolutePosition = 4;^874^^^^^859^889^int sParentAbsolutePosition = 0;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^while  ( s != null || s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^while  ( s == null && s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^while  ( s != null && s.height >= getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^while  ( s != null && start > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^while  ( otherTree != null && s.height > getHeight ( s )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^while  ( s != null && s.height > getOffset ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^while  ( s != null && relativePosition > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^if  ( s == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( s != false )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( left == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( node == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P15_Unwrap_Block]^sAbsolutePosition += s.relativePosition;^879^880^881^^^864^894^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P16_Remove_Block]^^879^880^881^^^864^894^if  ( s != null )  { sAbsolutePosition += s.relativePosition; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += myNewPosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += s.relativePosition.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += s;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sAbsolutePosition +=  null.relativePonullition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;sAbsolutePosition += s.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sAbsolutePosition += s.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  ( s != null )  {     sAbsolutePosition += s.relativePosition; }^880^^^^^865^895^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) --; }^880^^^^^865^895^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  > 0 )  {      ( relativePosition ) --; }^880^^^^^865^895^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  < 0 )  {      ( relativePosition ) ++; }^880^^^^^865^895^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  (  ( relativePosition )  >= 0 )  {      ( relativePosition ) ++; }^880^^^^^865^895^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sParentAbsolutePosition = result;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sParentAbsolutePosition =  start;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAbsolutePosition += s.relativePosition;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;sParentAbsolutePosition = sAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s = s.right.right;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s = s;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s =  null.right;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s = s.left;s = s.right;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sAbsolutePosition +=  0.relativePo0ition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^sAncestors .pop (  )  ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;sAncestors.push ( s ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;sAncestors.push ( s ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s = sAncestor.balance (  ) ;sAncestors.push ( s ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sParentAbsolutePosition = relativePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sParentAbsolutePosition =  null;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s = 0.right;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAbsolutePosition += newTopPosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^while  ( s != null && s.height > getHeight ( null )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^875^876^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  { sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^877^878^^^^862^892^sAncestors.push ( s ) ; s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTreeMin.setRight (  null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setRight ( s, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^maxNode.setRight ( s, otherTreeMin ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^maxNode.setLeft ( leftSubTree, null ) ;otherTreeMin.setRight ( otherTree, null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTreeMin.setLeft (  maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTreeMin.setLeft ( s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;otherTreeMin.setLeft ( s, maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^if  ( otherTree == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( otherTree != false )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( left == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( s != null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( node == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P15_Unwrap_Block]^otherTree.min().setLeft(null, otherTreeMin); (otherTree.relativePosition)++;^886^887^888^889^^871^901^if  ( otherTree != null )  { otherTree.min (  ) .setLeft ( null, otherTreeMin ) ; otherTree.relativePosition++; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P16_Remove_Block]^^886^887^888^889^^871^901^if  ( otherTree != null )  { otherTree.min (  ) .setLeft ( null, otherTreeMin ) ; otherTree.relativePosition++; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P13_Insert_Block]^if  ( leftSubTree != null )  {     leftSubTree.max (  ) .setRight ( null, maxNode ) ;     leftSubTree.relativePosition -= currentSize - 1; }^886^^^^^871^901^[Delete]^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( nullMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( null ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( null, otherTreeMinMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( null, otherTree ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^otherTree.get (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^otherTree .max (  )  .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^otherTree.get (  ) .setLeft ( null, 4Min ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setLeft ( s, maxNode ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.max (  ) .setRight ( null, otherTreeMin ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^otherTree.min (  ) .setLeft ( null, nullMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^otherTree.min (  )  .insertOnLeft ( index , value )  ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^otherTree.min (  )  .insertOnLeft ( newTopPosition , obj )  ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^887^888^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ; otherTree.relativePosition++;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTree.min (  ) .setLeft ( null, 4Min ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^if  ( s == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P6_Replace_Expression]^if  ( sAbsolutePosition - currentSize )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^if  ( s != true )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( nextNode == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( leftSubTree != null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( left == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( node == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P9_Replace_Statement]^if  ( otherTree != null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P15_Unwrap_Block]^s.max().setRight(null, otherTreeMin); s.relativePosition = sAbsolutePosition - currentSize;^890^891^892^893^^875^905^if  ( s != null )  { s.max (  ) .setRight ( null, otherTreeMin ) ; s.relativePosition = sAbsolutePosition - currentSize; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P16_Remove_Block]^^890^891^892^893^^875^905^if  ( s != null )  { s.max (  ) .setRight ( null, otherTreeMin ) ; s.relativePosition = sAbsolutePosition - currentSize; }^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  >=  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = start - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - sParentAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = currentSizeAbsolutePosition - s;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = s - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = currentSize - sAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s.relativePosition =  nullAbnullolutePonullition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sParentAbsolutePosition = sAbsolutePosition;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^relativePosition = mid - absolutePositionOfParent;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.relativePosition = sAbsolutePosition - currentSize + 1;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;s.relativePosition = sAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.max (  ) .setRight ( null ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^s.get (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^s.min (  ) .setLeft ( null, maxNode ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^leftSubTree.max (  ) .setRight ( null, maxNode ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^maxNode.setRight ( s, otherTreeMin ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^right.min (  ) .setLeft ( null, left ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^left.max (  ) .setRight ( null, right ) ;s.max (  ) .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^s .max ( result , index )  .setRight ( null, otherTreeMin ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^891^892^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ; s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^s.relativePosition = sAbsolutePosition  <=  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = newTopPosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^s.relativePosition = sAbsolutePosition - newTopPosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P2_Replace_Operator]^otherTreeMin.relativePosition = currentSize   instanceof   sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTreeMin.relativePosition = relativePosition - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTreeMin.relativePosition = currentSize - newOffest;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^otherTreeMin.relativePosition = sParentAbsolutePosition - currentSize;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^otherTreeMin.relativePosition =  currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^leftSubTree.relativePosition -= currentSize - 1;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^this.relativePosition = relativePosition;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTree.relativePosition += currentSize;otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s =  null;^896^^^^^881^911^s = otherTreeMin;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^s = sAncestor.setValue (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^s =  null.balance (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^final AVLNode<E> sAncestor = sAncestors.push (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^final AVLNode<E> sAncestor = sAncestors .push ( obj )  ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> rightMin = right.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> ret = balance (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftMax = left.max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> maxNode = max (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = left;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> leftSubTree = removeMax (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> newTop = right;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final Deque<AVLNode<E>> sAncestors = new ArrayDeque<AVLNode<E>> (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^final AVLNode<E> otherTreeMin = otherTree.min (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^898^899^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ; sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^sAncestor.setRight (  null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^sAncestor.setRight ( this, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^setRight ( right.rotateRight (  ) , null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^otherTreeMin.setRight ( otherTree, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^newTop.setLeft ( this, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^newTop.setRight ( this, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestor.setLeft ( s, null ) ;sAncestor.setRight ( s, null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^return balance (  ) ;s = sAncestor.balance (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P11_Insert_Donor_Statement]^sAncestors.push ( s ) ;s = sAncestor.balance (  ) ;^900^^^^^885^915^s = sAncestor.balance (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^final AVLNode<E> sAncestor = sAncestors .push ( value )  ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^897^898^^^^882^912^while  ( !sAncestors.isEmpty (  )  )  { final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( newTopPosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^return new StringBuilder (  )  .StringBuilder (  )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( newOffest ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( myNewPosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( start ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( null )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^return new StringBuilder (  )  .append ( this )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( sParentAbsolutePosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P5_Replace_Variable]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( sAbsolutePosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( oldOffset ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P7_Replace_Invocation]^.append ( getLeftSubTree (  )  != null ) .append ( ", faedelung " ) .append ( rightIsNext ) .append ( "  ) " )^970^971^972^973^^961^975^.append ( getRightSubTree (  )  != null ) .append ( ", faedelung " ) .append ( rightIsNext ) .append ( "  ) " )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^private  TreeList<E> parent;^983^^^^^978^988^private final TreeList<E> parent;^[CLASS] TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^private  short  nextIndex;^991^^^^^986^996^private int nextIndex;^[CLASS] TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^private  long  nextIndex;^991^^^^^986^996^private int nextIndex;^[CLASS] TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^private  short  currentIndex;^1000^^^^^995^1005^private int currentIndex;^[CLASS] TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P1_Replace_Type]^private  long  expectedModCount;^1007^^^^^1002^1012^private int expectedModCount;^[CLASS] TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P8_Replace_Mix]^private  short  expectedModCount;^1007^^^^^1002^1012^private int expectedModCount;^[CLASS] TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[P14_Delete_Statement]^^1016^^^^^1015^1022^super (  ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^this.parent =  null;^1017^^^^^1015^1022^this.parent = parent;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.expectedModCount = nextIndex;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.expectedModCount = parent.modCount.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.expectedModCount = parent;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^this.expectedModCount =  null.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^this.next = parent.root != null ? null : parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.next = parent.root == null ? null : parent.root.get ( nextIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.next = parent.root.root == null ? null : parent.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.next = fromIndex == null ? null : parent.root.get ( parent.root ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.next = parent == null ? null : parent.root.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P6_Replace_Expression]^this.next = parent.root ( parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^this.next = parent.root == null ? null : parent.root .next (  )  ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^this.next = parent.root == false ? false : parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.next = fromIndex.root == null ? null : parent.root.get ( parent ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^this.nextIndex = nextIndex;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;this.nextIndex = fromIndex;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;this.nextIndex = fromIndex;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^this.currentIndex = -fromIndex;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^this.currentIndex = -1 * 1;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = -1;this.currentIndex = -1;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P12_Insert_Condition]^if  ( currentIndex == -1 )  { this.currentIndex = -1; }^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^if  ( parent.modCount >= expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^if  ( nextIndex != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^if  ( parent.modCount != nextIndex )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^if  ( expectedModCount != parent.modCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^if  ( parent.modCount.modCount != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^throw new java.util.ConcurrentModificationException();^1032^1033^1034^^^1031^1035^if  ( parent.modCount != expectedModCount )  { throw new ConcurrentModificationException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1032^1033^1034^^^1031^1035^if  ( parent.modCount != expectedModCount )  { throw new ConcurrentModificationException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1032^^^^^1031^1035^[Delete]^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1032^^^^^1031^1035^[Delete]^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new ConcurrentModificationException  (" ")  ;^1033^^^^^1031^1035^throw new ConcurrentModificationException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new ConcurrentModificationException  (" ")  ;^1033^^^^^1031^1035^throw new ConcurrentModificationException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^return nextIndex <= parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^return nextIndex < parent.size() + 9 ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^return fromIndex < parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^return parent < nextIndex.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^return nextIndex < parent .remove ( currentIndex )  ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^return nextIndex < parent.size() - 3 ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1042^^^^^1041^1054^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1042^^^^^1041^1054^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P6_Replace_Expression]^if  ( "No element at index " + nextIndex )  {^1043^^^^^1041^1054^if  ( !hasNext (  )  )  {^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^if  ( !hasPrevious (  )  )  {^1043^^^^^1041^1054^if  ( !hasNext (  )  )  {^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^throw new java.util.NoSuchElementException((("No element at index " + (nextIndex)) + "."));^1043^1044^1045^^^1041^1054^if  ( !hasNext (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1043^1044^1045^^^1041^1054^if  ( !hasNext (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  ( ! ( hasPrevious (  )  )  )  {     throw new NoSuchElementException ( "Already at start of list." ) ; }^1043^^^^^1041^1054^[Delete]^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  ( ! ( hasNext (  )  )  )  {     throw new NoSuchElementException (  (  ( "No element at index " +  ( nextIndex )  )  + "." )  ) ; }^1044^^^^^1041^1054^[Delete]^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1044^^^^^1041^1054^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1044^^^^^1041^1054^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^if  ( next != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^if  ( next == true )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P9_Replace_Statement]^if  ( current == null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^next = parent.root.get(nextIndex);^1046^1047^1048^^^1041^1054^if  ( next == null )  { next = parent.root.get ( nextIndex ) ; }^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1046^1047^1048^^^1041^1054^if  ( next == null )  { next = parent.root.get ( nextIndex ) ; }^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get (  (  ( nextIndex )  - 1 )  ) ; }else {     next = next.previous (  ) ; }^1046^^^^^1041^1054^[Delete]^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = null.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = parent.root.get ( fromIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = nextIndex.get ( parent.root ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = nextIndex.root.get ( parent ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^next = parent.root.next ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex - 1 ) ;next = parent.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get ( nextIndex ) ; }^1047^^^^^1041^1054^[Delete]^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next = parent.root.next ( fromIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^parent.remove ( currentIndex ) ;next = parent.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^next = parent.root .next (  )  ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next  =  next ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^final E value = null.getValue (  ) ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^final E value = next.previous (  ) ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^final E value = next .setValue ( value )  ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;final E value = next.getValue (  ) ;^1049^^^^^1041^1054^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^current  =  current ;^1050^^^^^1041^1054^current = next;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;current = next;^1050^^^^^1041^1054^current = next;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^current = null;current = next;^1050^^^^^1041^1054^current = next;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;current = next;^1050^^^^^1041^1054^current = next;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^currentIndex  =  currentIndex ;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = -1;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^this.nextIndex = fromIndex;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^current = next;currentIndex = nextIndex++;^1051^^^^^1041^1054^currentIndex = nextIndex++;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^next = next.getValue (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next  =  next ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next = null.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1052^1053^^^^1041^1054^next = next.next (  ) ; return value;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^return nextIndex (  )  - 1;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^parent.add ( nextIndex, obj ) ;next = next.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^return nextIndex >= 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^return nextIndex > expectedModCount;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^return fromIndex > 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^return nextIndex  ;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1061^^^^^1060^1074^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1061^^^^^1060^1074^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^if  ( !hasNext (  )  )  {^1062^^^^^1060^1074^if  ( !hasPrevious (  )  )  {^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^throw new java.util.NoSuchElementException("Already at start of list.");^1062^1063^1064^^^1060^1074^if  ( !hasPrevious (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1062^1063^1064^^^1060^1074^if  ( !hasPrevious (  )  )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  ( ! ( hasNext (  )  )  )  {     throw new NoSuchElementException (  (  ( "No element at index " +  ( nextIndex )  )  + "." )  ) ; }^1062^^^^^1060^1074^[Delete]^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  ( ! ( hasPrevious (  )  )  )  {     throw new NoSuchElementException ( "Already at start of list." ) ; }^1063^^^^^1060^1074^[Delete]^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new IllegalStateException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1063^^^^^1060^1074^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^1063^^^^^1060^1074^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^throw new IllegalStateException  (" ")  ; ;^1063^^^^^1060^1074^throw new NoSuchElementException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^if  ( next != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P6_Replace_Expression]^if  ( nextIndex - 1 )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^if  ( next == this )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P9_Replace_Statement]^if  ( current == null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^next = parent.root.get(((nextIndex) - 1));^1065^1066^1067^1068^1069^1060^1074^if  ( next == null )  { next = parent.root.get ( nextIndex - 1 ) ; } else { next = next.previous (  ) ; }^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1065^1066^1067^1068^1069^1060^1074^if  ( next == null )  { next = parent.root.get ( nextIndex - 1 ) ; } else { next = next.previous (  ) ; }^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( next )  == null )  {     next = get ( nextIndex ) ; }^1065^^^^^1060^1074^[Delete]^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^next = next.getValue (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next  =  next ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = next.next (  ) ;next = next.previous (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^final E value = next.getValue (  ) ;next = next.previous (  ) ;^1068^^^^^1060^1074^next = next.previous (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex  &&  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^next = parent.root.get ( nextIndex - nextIndex ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = parent.root.get ( fromIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = parent.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = nextIndex.root.get ( parent - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^next = parent.root.setValue ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next = parent.root.get ( nextIndex - 1L ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex ) ;next = parent.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex  ==  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^next = parent.root.get ( nextIndex - currentIndex ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^parent.add ( nextIndex, obj ) ;next = parent.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex  <=  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^next = parent.root.get ( nextIndex  ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = nextIndex.get ( parent.root - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^next = parent.root.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^next = parent.root .next (  )  ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next = parent.root.get ( nextIndex - 1 + 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^next = parent.root.get ( nextIndex  |  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^final E value = next.previous (  ) ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^final E value = next .setValue ( value )  ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = next.previous (  ) ;final E value = next.getValue (  ) ;^1070^^^^^1060^1074^final E value = next.getValue (  ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^current  =  current ;^1071^^^^^1060^1074^current = next;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;current = next;^1071^^^^^1060^1074^current = next;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^current = null;current = next;^1071^^^^^1060^1074^current = next;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;current = next;^1071^^^^^1060^1074^current = next;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^currentIndex  =  currentIndex ;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = -1;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^this.nextIndex = fromIndex;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^current = next;currentIndex = --nextIndex;^1072^^^^^1060^1074^currentIndex = --nextIndex;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^return fromIndex;^1077^^^^^1076^1078^return nextIndex;^[CLASS] TreeListIterator  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^return nextIndex (  )   ||  1;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^return nextIndex (  )  - currentIndex;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^return hasNext (  )  - 1;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^return hasNext (  )  -nextIndex;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1085^^^^^1084^1100^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1085^^^^^1084^1100^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^if  ( currentIndex >= -1 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^if  ( currentIndex == -expectedModCount )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^if  ( nextIndex == -1 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^if  ( currentIndex == -1 >>> 1 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P9_Replace_Statement]^if  ( current == null )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException();^1086^1087^1088^^^1084^1100^if  ( currentIndex == -1 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1086^1087^1088^^^1084^1100^if  ( currentIndex == -1 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1086^^^^^1084^1100^[Delete]^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( parent.modCount )  !=  ( expectedModCount )  )  {     throw new ConcurrentModificationException (  ) ; }^1086^^^^^1084^1100^[Delete]^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IllegalStateException  (" ")  ;^1087^^^^^1084^1100^throw new IllegalStateException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new IllegalStateException  (" ")  ;^1087^^^^^1084^1100^throw new IllegalStateException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1087^^^^^1084^1100^[Delete]^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1087^^^^^1084^1100^[Delete]^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^parent.size ( currentIndex ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^parent.remove ( nextIndex ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex ) ;parent.remove ( currentIndex ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^if  ( nextIndex <= currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^if  ( fromIndex != currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^if  ( currentIndex != nextIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^(nextIndex)--;^1090^1091^1092^1093^^1084^1100^if  ( nextIndex != currentIndex )  {  nextIndex--; }^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1090^1091^1092^1093^^1084^1100^if  ( nextIndex != currentIndex )  {  nextIndex--; }^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^next = this;^1096^^^^^1084^1100^next = null;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^current = null;next = null;^1096^^^^^1084^1100^next = null;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^current = false;^1097^^^^^1084^1100^current = null;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = null;current = null;^1097^^^^^1084^1100^current = null;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^current = next;current = null;^1097^^^^^1084^1100^current = null;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^currentIndex = -0;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^currentIndex = -2;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;currentIndex = -1;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^this.currentIndex = -1;currentIndex = -1;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;currentIndex = -1;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1103^^^^^1102^1108^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1103^^^^^1102^1108^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P2_Replace_Operator]^if  ( current != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^if  ( current == false )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P9_Replace_Statement]^if  ( currentIndex == -1 )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P9_Replace_Statement]^if  ( next == null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException();^1104^1105^1106^^^1102^1108^if  ( current == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P16_Remove_Block]^^1104^1105^1106^^^1102^1108^if  ( current == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1104^^^^^1102^1108^[Delete]^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( parent.modCount )  !=  ( expectedModCount )  )  {     throw new ConcurrentModificationException (  ) ; }^1104^^^^^1102^1108^[Delete]^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IllegalStateException  (" ")  ;^1105^^^^^1102^1108^throw new IllegalStateException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^throw new ConcurrentModificationException  (" ")  ;throw new IllegalStateException  (" ")  ;^1105^^^^^1102^1108^throw new IllegalStateException  (" ")  ;^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( current )  == null )  {     throw new IllegalStateException (  ) ; }^1105^^^^^1102^1108^[Delete]^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P13_Insert_Block]^if  (  ( currentIndex )  ==  ( -1 )  )  {     throw new IllegalStateException (  ) ; }^1105^^^^^1102^1108^[Delete]^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^current.get ( obj ) ;^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^hasPrevious (  ) ;^1111^^^^^1110^1117^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1111^^^^^1110^1117^checkModCount (  ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^parent.add ( fromIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^parent.add ( nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^parent.add (  obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P5_Replace_Variable]^parent.add ( obj, nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^parent.remove ( nextIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P7_Replace_Invocation]^parent .add ( currentIndex , obj )  ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P14_Delete_Statement]^^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = parent.root.get ( nextIndex - 1 ) ;parent.add ( nextIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = next.next (  ) ;parent.add ( nextIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^current = false;^1113^^^^^1110^1117^current = null;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^next = null;current = null;^1113^^^^^1110^1117^current = null;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^current = next;current = null;^1113^^^^^1110^1117^current = null;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P12_Insert_Condition]^if  ( current == null )  { current = null; }^1113^^^^^1110^1117^current = null;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P3_Replace_Literal]^currentIndex = --2;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P8_Replace_Mix]^currentIndex = -1 % 2;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = --nextIndex;currentIndex = -1;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^this.currentIndex = -1;currentIndex = -1;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P11_Insert_Donor_Statement]^currentIndex = nextIndex++;currentIndex = -1;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[P12_Insert_Condition]^if  ( currentIndex == -1 )  { currentIndex = -1; }^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
