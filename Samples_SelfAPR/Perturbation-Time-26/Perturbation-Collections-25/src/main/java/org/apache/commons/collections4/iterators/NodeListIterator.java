[P1_Replace_Type]^private  short  index = 0;^38^^^^^33^43^private int index = 0;^[CLASS] NodeListIterator   [VARIABLES] 
[P3_Replace_Literal]^private int index = 9;^38^^^^^33^43^private int index = 0;^[CLASS] NodeListIterator   [VARIABLES] 
[P8_Replace_Mix]^private int index = 3;^38^^^^^33^43^private int index = 0;^[CLASS] NodeListIterator   [VARIABLES] 
[P2_Replace_Operator]^if  ( node != null )  {^48^^^^^47^52^if  ( node == null )  {^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P8_Replace_Mix]^if  ( node == true )  {^48^^^^^47^52^if  ( node == null )  {^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P9_Replace_Statement]^if  ( nodeList == null )  {^48^^^^^47^52^if  ( node == null )  {^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("node must not be null!");^48^49^50^^^47^52^if  ( node == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P16_Remove_Block]^^48^49^50^^^47^52^if  ( node == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P13_Insert_Block]^if  ( nodeList == null )  {     throw new IllegalArgumentException ( "nodeList must not be null!" ) ; }^48^^^^^47^52^[Delete]^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "nodeList must not be null!" )   ;^49^^^^^47^52^throw new IllegalArgumentException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P13_Insert_Block]^if  ( nodeList == null )  {     throw new IllegalArgumentException ( "nodeList must not be null!" ) ; }^49^^^^^47^52^[Delete]^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException ( "node must not be null!" ) ; }^49^^^^^47^52^[Delete]^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^49^^^^^47^52^throw new IllegalArgumentException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^49^^^^^47^52^throw new IllegalArgumentException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P8_Replace_Mix]^this.nodeList =  null.getChildNodes (  ) ;^51^^^^^47^52^this.nodeList = node.getChildNodes (  ) ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P11_Insert_Donor_Statement]^this.nodeList = nodeList;this.nodeList = node.getChildNodes (  ) ;^51^^^^^47^52^this.nodeList = node.getChildNodes (  ) ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P14_Delete_Statement]^^51^^^^^47^52^this.nodeList = node.getChildNodes (  ) ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] boolean  int  index  NodeList  nodeList  Node  node  
[P2_Replace_Operator]^if  ( nodeList != null )  {^62^^^^^61^66^if  ( nodeList == null )  {^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P8_Replace_Mix]^if  ( nodeList == this )  {^62^^^^^61^66^if  ( nodeList == null )  {^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P9_Replace_Statement]^if  ( node == null )  {^62^^^^^61^66^if  ( nodeList == null )  {^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("nodeList must not be null!");^62^63^64^^^61^66^if  ( nodeList == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P16_Remove_Block]^^62^63^64^^^61^66^if  ( nodeList == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException ( "node must not be null!" ) ; }^62^^^^^61^66^[Delete]^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "node must not be null!" )   ;^63^^^^^61^66^throw new IllegalArgumentException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P13_Insert_Block]^if  ( nodeList == null )  {     throw new IllegalArgumentException ( "nodeList must not be null!" ) ; }^63^^^^^61^66^[Delete]^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException ( "node must not be null!" ) ; }^63^^^^^61^66^[Delete]^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^63^^^^^61^66^throw new IllegalArgumentException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^63^^^^^61^66^throw new IllegalArgumentException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P8_Replace_Mix]^this.nodeList =  null;^65^^^^^61^66^this.nodeList = nodeList;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P11_Insert_Donor_Statement]^this.nodeList = node.getChildNodes (  ) ;this.nodeList = nodeList;^65^^^^^61^66^this.nodeList = nodeList;^[CLASS] NodeListIterator  [METHOD] <init> [RETURN_TYPE] NodeList)   NodeList nodeList [VARIABLES] int  index  NodeList  nodeList  boolean  
[P2_Replace_Operator]^return nodeList != null ? false : index < nodeList.getLength (  ) ;^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P2_Replace_Operator]^return nodeList == null ? false : index <= nodeList.getLength (  ) ;^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P3_Replace_Literal]^return nodeList == null ? true : index < nodeList.getLength (  ) ;^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P5_Replace_Variable]^return index == null ? false : nodeList < nodeList.getLength (  ) ;^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P6_Replace_Expression]^return nodeList ( index < nodeList.getLength (  ) ;^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P8_Replace_Mix]^return   false ;^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P12_Insert_Condition]^if  ( nodeList != null && index < nodeList.getLength (  )  )  { return nodeList == null ? false : index < nodeList.getLength (  ) ; }^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P8_Replace_Mix]^return nodeList == null ? false : index < nodeList .item ( index )  ;^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P14_Delete_Statement]^^69^^^^^68^70^return nodeList == null ? false : index < nodeList.getLength (  ) ;^[CLASS] NodeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P2_Replace_Operator]^if  ( nodeList != null || index < nodeList.getLength (  )  )  {^73^^^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  {^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P2_Replace_Operator]^if  ( nodeList == null && index < nodeList.getLength (  )  )  {^73^^^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  {^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P2_Replace_Operator]^if  ( nodeList != null && index > nodeList.getLength (  )  )  {^73^^^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  {^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P5_Replace_Variable]^if  ( index != null && nodeList < nodeList.getLength (  )  )  {^73^^^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  {^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P6_Replace_Expression]^if  ( nodeList != null ) {^73^^^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  {^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P6_Replace_Expression]^if  (  index < nodeList.getLength (  )  )  {^73^^^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  {^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P15_Unwrap_Block]^return nodeList.item(((index)++));^73^74^75^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  { return nodeList.item ( index++ ) ; }^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P16_Remove_Block]^^73^74^75^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  { return nodeList.item ( index++ ) ; }^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P7_Replace_Invocation]^return nodeList.getLength ( index++ ) ;^74^^^^^72^77^return nodeList.item ( index++ ) ;^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P7_Replace_Invocation]^return nodeList .getLength (  )  ;^74^^^^^72^77^return nodeList.item ( index++ ) ;^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P14_Delete_Statement]^^74^^^^^72^77^return nodeList.item ( index++ ) ;^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P8_Replace_Mix]^if  ( nodeList != null && index < nodeList .item ( index )   )  {^73^^^^^72^77^if  ( nodeList != null && index < nodeList.getLength (  )  )  {^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new NoSuchElementException  (" ")  ;^76^^^^^72^77^throw new NoSuchElementException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^76^^^^^72^77^throw new NoSuchElementException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^85^^^^^84^86^throw new UnsupportedOperationException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] int  index  NodeList  nodeList  boolean  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^85^^^^^84^86^throw new UnsupportedOperationException  (" ")  ;^[CLASS] NodeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] int  index  NodeList  nodeList  boolean  
