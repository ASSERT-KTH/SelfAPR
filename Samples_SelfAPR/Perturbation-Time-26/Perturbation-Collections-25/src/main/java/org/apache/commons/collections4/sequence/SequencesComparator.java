[P8_Replace_Mix]^private  List<T> sequence2;^65^^^^^60^70^private final List<T> sequence2;^[CLASS] SequencesComparator Snake   [VARIABLES] 
[P8_Replace_Mix]^private  int[] vDown;^71^^^^^66^76^private final int[] vDown;^[CLASS] SequencesComparator Snake   [VARIABLES] 
[P8_Replace_Mix]^private  int[] vUp;^72^^^^^67^77^private final int[] vUp;^[CLASS] SequencesComparator Snake   [VARIABLES] 
[P1_Replace_Type]^private final  short  start;^300^^^^^295^305^private final int start;^[CLASS] SequencesComparator Snake   [VARIABLES] 
[P1_Replace_Type]^private final  long  end;^303^^^^^298^308^private final int end;^[CLASS] SequencesComparator Snake   [VARIABLES] 
[P1_Replace_Type]^private final  short  diag;^306^^^^^301^311^private final int diag;^[CLASS] SequencesComparator Snake   [VARIABLES] 
[P8_Replace_Mix]^private final  long  diag;^306^^^^^301^311^private final int diag;^[CLASS] SequencesComparator Snake   [VARIABLES] 
[P5_Replace_Variable]^this (  sequence2, DefaultEquator.defaultEquator (  )  ) ;^89^^^^^88^90^this ( sequence1, sequence2, DefaultEquator.defaultEquator (  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] List)   List<T> sequence1 List<T> sequence2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  start  Equator  equator  
[P5_Replace_Variable]^this ( sequence1,  DefaultEquator.defaultEquator (  )  ) ;^89^^^^^88^90^this ( sequence1, sequence2, DefaultEquator.defaultEquator (  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] List)   List<T> sequence1 List<T> sequence2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  start  Equator  equator  
[P5_Replace_Variable]^this ( sequence2, sequence1, DefaultEquator.defaultEquator (  )  ) ;^89^^^^^88^90^this ( sequence1, sequence2, DefaultEquator.defaultEquator (  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] List)   List<T> sequence1 List<T> sequence2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  start  Equator  equator  
[P14_Delete_Statement]^^89^^^^^88^90^this ( sequence1, sequence2, DefaultEquator.defaultEquator (  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] List)   List<T> sequence1 List<T> sequence2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  start  Equator  equator  
[P8_Replace_Mix]^this.sequence1 =  null;^106^^^^^105^113^this.sequence1 = sequence1;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.sequence2 = sequence2;this.sequence1 = sequence1;^106^^^^^105^113^this.sequence1 = sequence1;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.equator = equator;this.sequence1 = sequence1;^106^^^^^105^113^this.sequence1 = sequence1;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P8_Replace_Mix]^this.sequence2 =  null;^107^^^^^105^113^this.sequence2 = sequence2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.equator = equator;this.sequence2 = sequence2;^107^^^^^105^113^this.sequence2 = sequence2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.sequence1 = sequence1;this.sequence2 = sequence2;^107^^^^^105^113^this.sequence2 = sequence2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P8_Replace_Mix]^this.equator =  null;^108^^^^^105^113^this.equator = equator;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.sequence2 = sequence2;this.equator = equator;^108^^^^^105^113^this.equator = equator;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.sequence1 = sequence1;this.equator = equator;^108^^^^^105^113^this.equator = equator;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P1_Replace_Type]^final  short  size = sequence1.size (  )  + sequence2.size (  )  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P2_Replace_Operator]^final int size = sequence1.size (  <=  )  + sequence2.size (  )  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P2_Replace_Operator]^final int size = sequence1.size (  )   >>  sequence2.size (  )  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^final int size = sequence1.size (  )  + sequencediag.size (  )  + diag;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^final int size = sequence1.size() - 3  + sequence2.size() - 3  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^final int size = sequence2.size (  )  + sequence1.size (  )  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P7_Replace_Invocation]^final int size = sequence1.get (  )  + sequence2.size (  )  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^final int size = sequence1.size() + 6  + sequence2.size() + 6  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P14_Delete_Statement]^^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^final int size = sequence1.size() + 3  + sequence2.size() + 3  + 2;^110^^^^^105^113^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P8_Replace_Mix]^vDown =  new int[start];^111^^^^^105^113^vDown = new int[size];^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^vUp   = new int[size];vDown = new int[size];^111^^^^^105^113^vDown = new int[size];^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P8_Replace_Mix]^vUp   =  new int[start];^112^^^^^105^113^vUp   = new int[size];^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^vDown = new int[size];vUp   = new int[size];^112^^^^^105^113^vUp   = new int[size];^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] Equator)   List<T> sequence1 List<T> sequence2 Equator<? super T> equator [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^this.start = size;^316^^^^^315^319^this.start = start;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.diag  = diag;this.start = start;^316^^^^^315^319^this.start = start;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P8_Replace_Mix]^this.end   =  start;^317^^^^^315^319^this.end   = end;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.diag  = diag;this.end   = end;^317^^^^^315^319^this.end   = end;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^this.diag  = start;^318^^^^^315^319^this.diag  = diag;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.start = start;this.diag  = diag;^318^^^^^315^319^this.diag  = diag;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^this.end   = end;this.diag  = diag;^318^^^^^315^319^this.diag  = diag;^[CLASS] SequencesComparator Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^buildScript ( 8, sequence1.size (  ) , 8, sequence2.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^buildScript ( size, sequence1.size (  ) , size, sequence2.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^buildScript ( 0, sequence1.size() - 1 , 0, sequence2.size() - 1 , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  )  ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^buildScript ( 0.size (  ) , 0, sequence2.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^buildScript ( 0, sequence1.size (  ) , 0.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^buildScript ( 0, sequence1.size (  ) , 0, script.size (  ) , sequence2 ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^buildScript ( 0, sequence2.size (  ) , 0, sequence1.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P7_Replace_Invocation]^SequencesComparator ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P14_Delete_Statement]^^130^131^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ; return script;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^final int size = sequence1.size (  )  + sequence2.size (  )  + 2;buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^buildScript ( 0, sequence1.size() - 2 , 0, sequence2.size() - 2 , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P5_Replace_Variable]^buildScript ( 0, 2.size (  ) , 0, sequence2.size (  ) , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P14_Delete_Statement]^^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P3_Replace_Literal]^buildScript ( 0, sequence1.size() + 1 , 0, sequence2.size() + 1 , script ) ;^130^^^^^128^132^buildScript ( 0, sequence1.size (  ) , 0, sequence2.size (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] getScript [RETURN_TYPE] EditScript   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  boolean  int  diag  end  size  start  Equator  equator  
[P1_Replace_Type]^short  end = start;^144^^^^^143^151^int end = start;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^int end = size;^144^^^^^143^151^int end = start;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^int i = start1;int end = start;^144^^^^^143^151^int end = start;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^final int n = end2 - start2;int end = start;^144^^^^^143^151^int end = start;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^final int m = end1 - start1;int end = start;^144^^^^^143^151^int end = start;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P11_Insert_Donor_Statement]^int j = start2;int end = start;^144^^^^^143^151^int end = start;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P2_Replace_Operator]^while  ( end - diag < end2 || end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P2_Replace_Operator]^while  ( end - diag <= end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P2_Replace_Operator]^while  ( end  ==  diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end  ==  diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P2_Replace_Operator]^while  ( end - diag < end2 && end > end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P2_Replace_Operator]^while  ( end  ^  diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end  ^  diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - start < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - diag < start && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - diag < end2 && end < start && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) .get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( equator - diag < end2 && end < end1 && end.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - end1 < end2 && end < diag && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end2 - diag < end && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - diag < end2 && end < equator && end1.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - diag < equator && end < end1 && end2.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - diag < end2 && end < end1 && sequence1.equate ( equator.get ( end ) , sequence2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^while  ( end - diag < sequence2 && end < end1 && equator.equate ( sequence1.get ( end ) , end2.get ( end - diag )  )  )  {^145^146^147^^^143^151^while  ( end - diag < end2 && end < end1 && equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P2_Replace_Operator]^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end  <=  diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - start )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& null.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( end ) .get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( diag ) , sequence2.get ( end - end )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( end ) , diag.get ( end - sequence2 )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& diag.equate ( sequence1.get ( end ) , sequence2.get ( end - equator )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence2.get ( end ) , sequence1.get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P8_Replace_Mix]^&& equator.equate ( sequence1.get ( end ) , 1.get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P14_Delete_Statement]^^147^148^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  { ++end;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( size ) , sequence2.get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( end.get ( sequence1 ) , sequence2.get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( start ) , sequence2.get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( sequence2 ) , end.get ( end - diag )  )  )  {^147^^^^^143^151^&& equator.equate ( sequence1.get ( end ) , sequence2.get ( end - diag )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P4_Replace_Constructor]^return new Snake (  end, diag ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P4_Replace_Constructor]^return new Snake ( start,  diag ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P4_Replace_Constructor]^return new Snake ( start, end ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^return new Snake ( size, end, diag ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^return new Snake ( start, start, diag ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^return new Snake ( start, end, size ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^return new Snake ( end, start, diag ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^return new Snake ( start, diag, end ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^return new Snake ( start, size, diag ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P5_Replace_Variable]^return new Snake ( start, end, start ) ;^150^^^^^143^151^return new Snake ( start, end, diag ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildSnake [RETURN_TYPE] SequencesComparator$Snake   final int start final int diag final int end1 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  diag  end  end1  end2  size  start  Equator  equator  
[P1_Replace_Type]^final  short  m = end1 - start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int m = end1  >>  start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int m = start2 - start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int m = end1 - size;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int m = start1 - end1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int m = start - start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int i = k + offset;final int m = end1 - start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int end = start;final int m = end1 - start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int i = k + offset - delta;final int m = end1 - start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int n = end2 - start2;final int m = end1 - start1;^172^^^^^157^187^final int m = end1 - start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^final  short  n = end2 - start2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int n = end2  !=  start2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int n = size - start2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int n = end2 - offset;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int n = start2 - end2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int n = end2 - size;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int i = k + offset;final int n = end2 - start2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int end = start;final int n = end2 - start2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int i = k + offset - delta;final int n = end2 - start2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int m = end1 - start1;final int n = end2 - start2;^173^^^^^158^188^final int n = end2 - start2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( m == 0 && n == 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( m >= 0 || n == 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( m == 0 || n != 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( m == m || n == m )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( m == -8 || n == -8 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start1 == 0 || n == 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( m == 0 || start1 == 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( n == 0 || m == 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( m == 0 ) {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  (  n == 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( m == 0 / 0 || n == 0 / 0 )  {^174^^^^^159^189^if  ( m == 0 || n == 0 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P15_Unwrap_Block]^return null;^174^175^176^^^159^189^if  ( m == 0 || n == 0 )  { return null; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P16_Remove_Block]^^174^175^176^^^159^189^if  ( m == 0 || n == 0 )  { return null; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return true;^175^^^^^160^190^return null;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return false;^175^^^^^160^190^return null;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^final  long  delta  = m - n;^178^^^^^163^193^final int delta  = m - n;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int delta  = m  &  n;^178^^^^^163^193^final int delta  = m - n;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int delta  = start2 - n;^178^^^^^163^193^final int delta  = m - n;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int delta  = m - start1;^178^^^^^163^193^final int delta  = m - n;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int delta  = n - m;^178^^^^^163^193^final int delta  = m - n;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int delta  = m - size;^178^^^^^163^193^final int delta  = m - n;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int sum    = n + m;final int delta  = m - n;^178^^^^^163^193^final int delta  = m - n;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^final  short  sum    = n + m;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int sum   instanceof   = n + m;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int sum    = offset + m;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int sum    = n + size;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int sum    = m + n;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int sum    = size + m;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int i = k + offset;final int sum    = n + m;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int delta  = m - n;final int sum    = n + m;^179^^^^^164^194^final int sum    = n + m;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^final  short  offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  - 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int offset =  ( sum % 2 <= 0 ? sum : sum + 1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int offset =  ( sum  ||  2 == 0 ? sum : sum + 1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int offset =  ( sum % 2 == 0 ? sum : sum  &  1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^final int offset =  ( sum % d == 0 ? sum : sum + 1 )  / d;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^final int offset =  ( sum % 2 == -1 ? sum : sum + 1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^final int offset =  ( sum % 2 == 0 ? sum : sum  )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int offset =  ( size % 2 == 0 ? sum : sum + 1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^final int offset =  ( sum + 1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int offset =  ( start % 2 == 0 ? sum : sum + 1 )  / 2;^180^^^^^165^195^final int offset =  ( sum % 2 == 0 ? sum : sum + 1 )  / 2;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[3+offset] = start3;^181^^^^^166^196^vDown[1+offset] = start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vDown[1+offset] = n;^181^^^^^166^196^vDown[1+offset] = start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[1 + 1+offset] = start1 + 1;^181^^^^^166^196^vDown[1+offset] = start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[1+offset]   = end1 + 1;vDown[1+offset] = start1;^181^^^^^166^196^vDown[1+offset] = start1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[1+offset]  &&  = end1 + 1;^182^^^^^167^197^vUp[1+offset]   = end1 + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[1+offset]   instanceof   = end1 + 1;^182^^^^^167^197^vUp[1+offset]   = end1 + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[1+offset]   = end1 ;^182^^^^^167^197^vUp[1+offset]   = end1 + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vUp[1+offset]   = sum + 1;^182^^^^^167^197^vUp[1+offset]   = end1 + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[3+offset]   = end3 + 3;^182^^^^^167^197^vUp[1+offset]   = end1 + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[1+offset] = start1;vUp[1+offset]   = end1 + 1;^182^^^^^167^197^vUp[1+offset]   = end1 + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x < end1 || y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x <= end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x < end1 && y == end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( start1 < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < offset && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && start2 < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) .get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( y < end1 && x < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end2 && y < end1 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( end2 < end1 && y < x && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && sequence2.equate ( sequence1.get ( x ) , equator.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < sequence1 && equator.equate ( end2.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && equator.equate ( sequence2.get ( x ) , sequence1.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( x < end1 && y < y && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] =  ++x;^200^^^^^185^215^vDown[i] = ++x;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i+1];vDown[i] = ++x;^200^^^^^185^215^vDown[i] = ++x;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = x--;vDown[i] = ++x;^200^^^^^185^215^vDown[i] = ++x;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x >= start1 || y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x > start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x >= start1 && y > start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( n >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= n && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && n >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && y >= start && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) .get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( y >= start1 && x >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= y && start1 >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && y >= sequence2 && equator.equate ( sequence1.get ( x ) , start2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= equator && y >= start2 && start1.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && y >= start2 && equator.equate ( sequence2.get ( x ) , sequence1.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( offset >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] =  x--;^226^^^^^224^228^vUp[i] = x--;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i-1];vUp[i] = x--;^226^^^^^224^228^vUp[i] = x--;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = ++x;vUp[i] = x--;^226^^^^^224^228^vUp[i] = x--;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == -d && k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k != -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == -d || k != d || vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == -d || k == d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == -d || k != d && vDown[i-1] <= vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >>  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ==  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-size] < vDown[i+size] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-d] < vDown[i+d] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-] < vDown[i+] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-3] < vDown[i+3] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-diag] < vDown[i+diag] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( size == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == -d || k != start && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == -d || k != d && vUp[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vDown == -d || k != d && k[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k == -d ) {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  (  k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (k != d && (vDown[(i - 1)]) < (vDown[(i + 1)])) )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k != d )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( vDown[ ( i - 1 ) ] < vDown[ ( i + 1 ) ] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i - 1 )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i + 1 )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( vDown[(i - 1)] + 1 )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  (  k != d && vDown[i-4] < vDown[i+4] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P15_Unwrap_Block]^vDown[i] = vDown[(i + 1)];^190^191^192^193^194^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  { vDown[i] = vDown[i+1]; } else { vDown[i] = vDown[i-1] + 1; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P16_Remove_Block]^^190^191^192^193^194^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  { vDown[i] = vDown[i+1]; } else { vDown[i] = vDown[i-1] + 1; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( k ==  ( delta - d )  )  ||  (  ( k !=  ( delta + d )  )  &&  (  ( vUp[ ( i + 1 ) ] )  <=  ( vUp[ ( i - 1 ) ] )  )  )  )  {     vUp[i] =  ( vUp[ ( i + 1 ) ] )  - 1; }else {     vUp[i] = vUp[ ( i - 1 ) ]; }^190^^^^^175^205^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-n] + n;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-i] + i;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vDown[i] = vUp[i-1] + 1;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-4] + 4;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i+1];vDown[i] = vDown[i-1] + 1;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i-1];vDown[i] = vDown[i-1] + 1;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i+1] - 1;vDown[i] = vDown[i-1] + 1;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i+start2];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vDown[i] = vUp[i+1];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i+2];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i-1];vDown[i] = vDown[i+1];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = ++x;vDown[i] = vDown[i+1];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i-1] + 1;vDown[i] = vDown[i+1];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 || delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 == 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta  &&  2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d < k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  >  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d <= k && k < delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d <= k && k <= delta  <  d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d > k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  >>  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta   instanceof   d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % -5 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 != 6 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( size % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( delta % 2 != 0 && delta - d <= size && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta % 2 != 0 ) {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  (  delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( ((delta % 2) != 0 && (delta - d) <= k) )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta % 2 )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta - d <= k )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta - d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( vUp[(i - delta)] <= vDown[i] )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i - delta )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 - start2 )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( delta % 2 + 0 != 0 && delta - d <= y && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P9_Replace_Statement]^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P15_Unwrap_Block]^if ((vUp[(i - delta)]) <= (vDown[i])) {    return buildSnake(vUp[(i - delta)], ((k + start1) - start2), end1, end2);};^204^205^206^207^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  { if  ( vUp[i-delta] <= vDown[i] )  { return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P16_Remove_Block]^^204^205^206^207^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  { if  ( vUp[i-delta] <= vDown[i] )  { return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  (  (  ( delta % 2 )  == 0 )  &&  (  ( -d )  <= k )  )  &&  ( k <= d )  )  {     if  (  ( vUp[i] )  <=  ( vDown[ ( i + delta ) ] )  )  {         return buildSnake ( vUp[i],  (  ( k + start1 )  - start2 ) , end1, end2 ) ;     } }^204^^^^^189^219^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( vUp[ ( i - delta ) ] )  <=  ( vDown[i] )  )  {     return buildSnake ( vUp[ ( i - delta ) ],  (  ( k + start1 )  - start2 ) , end1, end2 ) ; }^204^^^^^189^219^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( vUp[i-delta] < vDown[i] )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vDown[i-delta] <= vDown[i] )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i-delta] <= vUp[i] )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vDown[i-delta] <= vUp[i] )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i - delta )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 - start2 )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P15_Unwrap_Block]^return buildSnake(vUp[(i - delta)], ((k + start1) - start2), end1, end2);^205^206^207^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  { return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P16_Remove_Block]^^205^206^207^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  { return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( vUp[i] )  <=  ( vDown[ ( i + delta ) ] )  )  {     return buildSnake ( vUp[i],  (  ( k + start1 )  - start2 ) , end1, end2 ) ; }^205^^^^^190^220^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  (  (  ( delta % 2 )  != 0 )  &&  (  ( delta - d )  <= k )  )  &&  ( k <=  ( delta + d )  )  )  {     if  (  ( vUp[ ( i - delta ) ] )  <=  ( vDown[i] )  )  {         return buildSnake ( vUp[ ( i - delta ) ],  (  ( k + start1 )  - start2 ) , end1, end2 ) ;     } }^205^^^^^190^220^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  ||  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  >>  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  &&  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], offset + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, start2, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, size ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta] + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 -  end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2,  end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], end2 + start1 - start2, end1, k ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + end2 - start2, end1, start1 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start2 - start1, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], end1 + start1 - start2, k, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - end2, end1, start2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( end1[i-delta], k + start1 - start2, vUp, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( vUp[ ( i - delta ) ] )  <=  ( vDown[i] )  )  {     return buildSnake ( vUp[ ( i - delta ) ],  (  ( k + start1 )  - start2 ) , end1, end2 ) ; }^206^^^^^191^221^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  <  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  ==  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  ^  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], size + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + offset - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, start, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, sum ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vDown[i-delta], k + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( k[i-delta], vUp + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], start2 + start1 - k, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end2, end1 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  |  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], start1 + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + x - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - size, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, size, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, x ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], start1 + k - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - end1, start2, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return false ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  &  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  !=  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], start2 + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + sum - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, sum, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, offset ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + end1 - start2, start1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i-delta], k + start1 - start2, offset, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  >=  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  |  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - x, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, y ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( end2[i-delta], k + start1 - start2, end1, vUp ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i != delta], k + start1  !=  start2, end1, end2 ) ;;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  >=  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + size - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start1, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d && k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k != delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  ^  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k != delta + d || vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k <= delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k != delta  ||  d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k != delta + d && vUp[i+1] == vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ==  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  ||  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  <=  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >>  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  <  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+10] <= vUp[i-10] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+y] <= vUp[i-y] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+start2] <= vUp[i-start2] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+-6] <= vUp[i--6] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+0] <= vUp[i-0] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start1 == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == start - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == startelta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == delta - d || k != delta + d && vDown[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == vUp - d || k != delta + d && delta[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == deltaelta - d || k != d + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k == delta - d ) {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  (  k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta - d )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (k != (delta + d) && (vUp[(i + 1)]) <= (vUp[(i - 1)])) )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k != delta + d )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta + d )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( vUp[ ( i + 1 ) ] <= vUp[ ( i - 1 ) ] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i + 1 )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i - 1 )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( vUp[(i + 1)] - 1 )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( k == delta - d || k != delta + d && vDown[i+1 - 1] <= vUp[i-1 - 1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P15_Unwrap_Block]^vUp[i] = (vUp[(i + 1)]) - 1;^215^216^217^218^219^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  { vUp[i] = vUp[i+1] - 1; } else { vUp[i] = vUp[i-1]; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P16_Remove_Block]^^215^216^217^218^219^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  { vUp[i] = vUp[i+1] - 1; } else { vUp[i] = vUp[i-1]; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( k ==  ( -d )  )  ||  (  ( k != d )  &&  (  ( vDown[ ( i - 1 ) ] )  <  ( vDown[ ( i + 1 ) ] )  )  )  )  {     vDown[i] = vDown[ ( i + 1 ) ]; }else {     vDown[i] =  ( vDown[ ( i - 1 ) ] )  + 1; }^215^^^^^200^230^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i--7];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vUp[i] = vDown[i-1];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-1 * 2];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i+1];vUp[i] = vUp[i-1];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = x--;vUp[i] = vUp[i-1];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i-1] + 1;vUp[i] = vUp[i-1];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i+1] - 1;vUp[i] = vUp[i-1];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[i] = vUp[i+1]  >=  1;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+size] - size;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+end2] - end2;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vUp[i] = vDown[i+1] - 1;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+1L] - 1L;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i-1];vUp[i] = vUp[i+1] - 1;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i-1] + 1;vUp[i] = vUp[i+1] - 1;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 == 0 || -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 <= 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta  >  2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 == 0 && -d < k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 == 0 && -d <= k && k < d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % start == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 == 2 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( offset % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( offsetelta % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( delta % 2 == 0 && -d <= y && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta % 2 == 0 ) {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  (  -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( ((delta % 2) == 0 && -d <= k) )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( delta % 2 )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( -d <= k )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k <= d )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( vUp[i] <= vDown[(i + delta)] )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i + delta )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 - start2 )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P9_Replace_Statement]^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P15_Unwrap_Block]^if ((vUp[i]) <= (vDown[(i + delta)])) {    return buildSnake(vUp[i], ((k + start1) - start2), end1, end2);};^230^231^232^233^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  { if  ( vUp[i] <= vDown[i + delta] )  { return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P16_Remove_Block]^^230^231^232^233^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  { if  ( vUp[i] <= vDown[i + delta] )  { return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( vUp[i] < vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if   instanceof   ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[y + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[i + y] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vDown[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i + delta )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 - start2 )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( k + start1 )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( vUp[i] <= vDown[i + start2] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P15_Unwrap_Block]^return buildSnake(vUp[i], ((k + start1) - start2), end1, end2);^231^232^233^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  { return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P16_Remove_Block]^^231^232^233^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  { return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ; }^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  (  (  ( delta % 2 )  == 0 )  &&  (  ( -d )  <= k )  )  &&  ( k <= d )  )  {     if  (  ( vUp[i] )  <=  ( vDown[ ( i + delta ) ] )  )  {         return buildSnake ( vUp[i],  (  ( k + start1 )  - start2 ) , end1, end2 ) ;     } }^231^^^^^216^246^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( vUp[ ( i - delta ) ] )  <=  ( vDown[i] )  )  {     return buildSnake ( vUp[ ( i - delta ) ],  (  ( k + start1 )  - start2 ) , end1, end2 ) ; }^231^^^^^216^246^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  |  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  <=  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], sum + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - y, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, start, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vDown[i], k + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i] + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 -  end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2,  end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], end1 + start1 - start2, k, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + end1 - start2, start1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( start2[i], k + start1 - vUp, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + end2 - start2, end1, start1 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( vUp[i] )  <=  ( vDown[ ( i + delta ) ] )  )  {     return buildSnake ( vUp[i],  (  ( k + start1 )  - start2 ) , end1, end2 ) ; }^232^^^^^217^247^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( vUp[ ( i - delta ) ] )  <=  ( vDown[i] )  )  {     return buildSnake ( vUp[ ( i - delta ) ],  (  ( k + start1 )  - start2 ) , end1, end2 ) ; }^232^^^^^217^247^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  &&  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  <<  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], offset + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + n - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - x, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1, size ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start2 - start1, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - end2, end1, start2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( end1[i], k + start1 - start2, vUp, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  &  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], size + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + offset - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, offset, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1, start ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], start1 + k - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( k[i], vUp + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  <=  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  <  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], start + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - sum, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end2, end1 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i], k + x - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( vUp[i] == vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  !=  ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ||  ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[start + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vUp[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vDown[i] <= vUp[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( vUp[i] <= vDown[i + start1] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  !=  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], start2 + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, y, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1, start1 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], end2 + start1 - start2, end1, k ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - end1, start2, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  <  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  >>  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], start2 + start1 - k, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i], k + start1 - start1, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^for  (  long  d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int d = 0; d < offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  &&  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  <=  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  &  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  <<  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int d = 0; d > offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ||  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  !=  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ^  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for   instanceof   ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  >>  ( int d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int d = -4; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int d = -3; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int d = d; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int offset = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int d = 0; d <= size ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( startnt d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int offset = 0; d <= d ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( sizent d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x > end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x < end1 && y > end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < start && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && size < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < size && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( end1 < x && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < sequence1 && y < end2 && equator.equate ( end1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < equator && end2.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( x < end1 && y < start1 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= y && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && y >= n && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && y >= start2 && equator.equate ( 3.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( equator >= start1 && y >= start2 && x.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= sequence2 && y >= start2 && equator.equate ( sequence1.get ( x ) , start1.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && y >= start2 && sequence1.equate ( equator.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && sequence1 >= start2 && equator.equate ( y.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( y >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k <= -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == -d || k != d && vDown[i-1] > vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  <  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  &&  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  <=  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-2] < vDown[i+2] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-end1] < vDown[i+end1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-4] < vDown[i+4] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-0] < vDown[i+0] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start1 == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == -d || k != size && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( d == -d || k != k && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-1] ;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-3] + 3;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i+delta];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 <= 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta  >=  2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  &  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d <= k && k <= delta  !=  d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  ^  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  !=  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % k != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 != delta && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( sizeelta % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( delta % 2 != 0 && delta - d <= sum && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k % 2 != 0 && delta - d <= delta && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( deltaelta % 2 != 0 && d - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( kelta % 2 != 0 && delta - d <= d && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( delta % 4 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( vUp[i-delta] == vDown[i] )  {^205^^^^^190^220^if  ( vUp[i-delta] <= vDown[i] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  <=  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  ==  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], y + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, y, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, start2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], sum + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - offset, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, start ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( start1[i-delta], k + vUp - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  >>  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, x, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( start2[i-delta], k + start1 - vUp, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  &&  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  ||  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - start2, start1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[sum | delta], k + start1  |  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k != delta  ^  d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k != delta + d && vUp[i+1] < vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  <<  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  &  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  ==  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ||  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  >>  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+m] <= vUp[i-m] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+] <= vUp[i-] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+n] <= vUp[i-n] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+-4] <= vUp[i--4] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( x == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == size - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == xelta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( delta == k - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( d == kelta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == vUpelta - d || k != delta + d && d[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  (  k != delta + d && vDown[i+0] <= vUp[i-0] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i-0];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-1 * 3];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[i] = vUp[i+1]  <=  1;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+1] ;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+x] - x;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+4] - 4;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 < 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 8 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 == start2 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( sum % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( sizeelta % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k % 2 == 0 && -d <= delta && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( delta % 0 == 0 ) {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  <  ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( vUp[i] <= vDown[size + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  ^  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  ^  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - offset, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1, start2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i], k + start1 -size, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  >=  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1, offset ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i], k + y - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  &  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( start1[i], k + vUp - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( end2[i], k + start1 - start2, end1, vUp ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + size - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1, x ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  &  ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[offset + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[i + sum] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1   instanceof   start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + sum - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  >  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  >  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^for  (  short  k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = -d; k > d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  >=  ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  >>  ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for   instanceof   ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ||  ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ^  ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = -d; k < d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = -d; k == d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  !=  ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = -d; k <= d; k += 4 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = -d; k <= d; k += -7 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = -d; k <= size; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( startnt k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( dnt k = -d; k <= i; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x < end1 && y <= end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( offset < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < size && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && start1 < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && equator.equate ( null.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && end2 < y && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( x < end1 && y < start && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == -d || k <= d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if   instanceof   ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-5] < vDown[i+5] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-end2] < vDown[i+end2] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-8] < vDown[i+8] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( sum == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == -d || k != start2 && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == -d || k != vDown && d[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-k] + k;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-1 << 3] + 1 << 3;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i+-1];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 > 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta  &  2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d <= k && k > delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d <= k && k <= delta  <<  d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  <  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  &&  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >>  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 5 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 != x && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( offset % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start2elta % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  <  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  <<  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i || delta], k + start1  ||  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k   instanceof   start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], start + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  <=  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + y - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i+k];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i+4];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-m] + m;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-i] + i;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vDown[i] = vUp[i-1] + 1;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-4] + 4;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i+1];vDown[i] = vDown[i-1] + 1;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i-1];vDown[i] = vDown[i-1] + 1;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i+1] - 1;vDown[i] = vDown[i-1] + 1;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  <<  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start2 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^final  short  i = k + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = y + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + y;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = offset + k;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int i = k + start1;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int i = k + offset - delta;final int i = k + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int sum    = n + m;final int i = k + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int n = end2 - start2;final int i = k + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int m = end1 - start1;final int i = k + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^long  x = vDown[i];^196^^^^^181^211^int x = vDown[i];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int x = vUp[i];^196^^^^^181^211^int x = vDown[i];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int x = vUp[i] - 1;int x = vDown[i];^196^^^^^181^211^int x = vDown[i];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^long  y = x - start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  |  start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x - start1  ^  start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  &  start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = start - start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start2 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + offset - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - offset;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = k - start1 + start2 - x;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = start1 - x + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + k - start2;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P12_Insert_Condition]^if  ( end1 - start1 > end2 - start2 )  { int y = x - start1 + start2 - k; }^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( sum < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && offset < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && null.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && sequence2 < end2 && equator.equate ( sequence1.get ( x ) , y.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && equator < end2 && y.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^199^200^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  { vDown[i] = ++x;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( sequence1 < end1 && y < end2 && equator.equate ( x.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( n < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( x < end1 && n < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^for  (  short  k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta   instanceof   d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta - d; k > delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  &&  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  <  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  >>  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for   instanceof   ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta - d; k < delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  |  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  <=  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  >  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ==  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  !=  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  &  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  !=  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta - d; k == delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ||  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k -= delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = delta - d; k <= delta + d; k += start )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = delta - d; k <= delta + d; k += 11 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = start1 - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = startelta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int x = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( start1nt k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( int k = size - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( x >= start1 && y == start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && x >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( start2 >= start1 && y >= x && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( sequence2 >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , x.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k == delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k != delta  <<  d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  &&  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  >=  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+7] <= vUp[i-7] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+offset] <= vUp[i-offset] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+-7] <= vUp[i--7] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == start2 - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( k == delta - d || k != delta + d && vUp[i+2] <= vUp[i-2] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-1 + 2];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[i] = vUp[i+1]  >  1;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+m] - m;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+2] - 2;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta   instanceof   2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 == 0 && -d == k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 == 0 && -d <= k && k > d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % i == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 == 9 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( startelta % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( delta % 2 == 0 && -d <= size && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( d % 2 == 0 && -d <= k && k <= delta  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( deltaelta % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( kelta % 2 == 0 && -d <= d && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( delta % 3 == 0 && -d <= x && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >  ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[i + start] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  ||  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, size, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, sum, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  >>  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k   instanceof   start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], x + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[sum + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  &&  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, start2, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[i] = vUp[i+1]  ||  1;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+1] ;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+delta] - delta;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vUp[i] = vDown[i+1] - 1;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+1 / 0] - 1 / 0;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i-1];vUp[i] = vUp[i+1] - 1;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i-1] + 1;vUp[i] = vUp[i+1] - 1;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i-start2];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^vUp[i] = vDown[i-1];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-3];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i+1];vUp[i] = vUp[i-1];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = x--;vUp[i] = vUp[i-1];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = vDown[i-1] + 1;vUp[i] = vUp[i-1];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i+1] - 1;vUp[i] = vUp[i-1];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] =  x--;^226^^^^^211^241^vUp[i] = x--;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vUp[i] = vUp[i-1];vUp[i] = x--;^226^^^^^211^241^vUp[i] = x--;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^vDown[i] = ++x;vUp[i] = x--;^226^^^^^211^241^vUp[i] = x--;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i], k + start1 -n, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^final  long  i = k + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int i = k + offset  >  delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int i = k  |  offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = start + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + start - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + offset - size;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = offset + k - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + delta - offset;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = delta + offset - k;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int i = k + offset;final int i = k + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int n = end2 - start2;final int i = k + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^final int m = end1 - start1;final int i = k + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^long  x = vUp[i] - 1;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int x = vUp[i]  ==  1;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^int x = vUp[i] - n;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int x = vDown[i] - 1;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int x = vDown[i];int x = vUp[i] - 1;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^short  y = x - start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  &  start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x - start1  >>  start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  ==  start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = n - start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - size + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + x - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - start2;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = start1 - x + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start2 + start1 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + k - start2;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - k + start2 - start1;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^int y = x - start1 + start2 - start;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P12_Insert_Condition]^if  ( end1 - start1 > end2 - start2 )  { int y = x - start1 + start2 - k; }^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( offset ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( size )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( x ) .get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( y ) , sequence2.get ( x )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& sequence2.equate ( sequence1.get ( x ) , equator.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence2.get ( x ) , sequence1.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( start1 )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^225^226^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  { vUp[i] = x--;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( n ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( 1.get ( x ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( x.get ( sequence1 ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^&& equator.equate ( sequence1.get ( start2 ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( n )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( x ) , y.get ( sequence2 )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^&& equator.equate ( sequence1.get ( x ) , null.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  >=  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, x, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^for  (  long  k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k -= -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = -d; k <= d; k += x )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( int k = -d; k <= d; k += 5 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i+-4];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i+1 >> 2];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-y] + y;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-size] + size;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-1L] + 1L;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^for  (  long  k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( int k = delta - d; k <= delta + d; k += 2 + 1 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+sum] - sum;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+diag] - diag;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+1L] - 1L;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i-y];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-1 / 4];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], x + start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i & delta], k + start1  &  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, end1, y ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = -d; k <= start; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = sum + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + size;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int i = k + start2;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^short  y = x - start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  ^  start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x - start1  |  start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  >=  start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = size - start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start1 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - start;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - k + start2 - start1;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^int y = sum - start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = sizeelta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = d - delta; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = deltaelta - d; k <= d + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^final  short  i = k + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int i = k + offset  |  delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int i = k  <=  offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = y + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + size - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + offset - start2;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int i = k + start2 - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^short  x = vUp[i] - 1;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int x = vUp[i]  <  1;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^int x = vUp[i] ;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^long  y = x - start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  ||  start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x - start1   instanceof   start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  |  start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = size - start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - x + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + size - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - x;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = start2 - start1 + x - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = k - start1 + start2 - x;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( equator < end1 && y < end2 && x.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( size < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( start < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( x < end1 && start < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  ^  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - n, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( offset )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& x.equate ( sequence1.get ( equator ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& y.equate ( sequence1.get ( x ) , sequence2.get ( equator )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^&& equator.equate ( sequence1.get ( size ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( x )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  ||  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ==  ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  <<  ( int k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = -d; k <= d; k += 6 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = -d; k <= d; k += sum )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int offset = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( sizent k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( ynt k = -d; k <= d; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( y < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < offset && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k >= -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ||  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  &  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i--2] < vDown[i+-2] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-9] < vDown[i+9] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == -d || k != d && vDown[i-10] < vDown[i+10] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == -d || k != start1 && vDown[i-1] < vDown[i+1] )  {^190^^^^^175^205^if  ( k == -d || k != d && vDown[i-1] < vDown[i+1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-2] + 2;^193^^^^^190^194^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i+0];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 < 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta  <=  2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  <<  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta - d <= k && k <= delta  |  d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 != 0 && delta  |  d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ==  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % start1 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 != 7 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( startelta % 2 != 0 && delta - d <= k && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( delta % 2 != 0 && delta - d <= start && k <= delta + d )  {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( delta % 2 - 2 != 0 ) {^204^^^^^189^219^if  ( delta % 2 != 0 && delta - d <= k && k <= delta + d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i || delta], k + start1  ||  start2, end1, size ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - sum, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vDown[i ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i | delta], k + start1  |  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k  !=  start1 - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + n - start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i+1 + 1];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-d] + d;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-1 >>> 0] + 1 >>> 0;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1   instanceof   start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return true ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = start2 + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int i = k + start;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  &&  start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = start1 - start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + n - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - sum;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = start2 - start1 + x - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start2 + start1 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && 0.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && sequence1.equate ( equator.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i-delta], k + start1  >  start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  >>  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  <  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  ||  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ^  ( int k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  <<  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int k = delta  |  d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = delta - d; k <= delta + d; k += 4 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = delta - d; k <= delta + d; k += -6 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = x - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = start2elta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int start = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( startnt k = delta - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( deltant k = i - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( sum >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= offset && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && offset >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && start2 >= y && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x >= start1 && equator >= start2 && y.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( sequence1 >= start1 && y >= start2 && equator.equate ( x.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( x >= start1 && y >= y && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^224^225^^^^209^239^while  ( x >= start1 && y >= start2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta   instanceof   d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k >= delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta - d || k != delta + d && vUp[i+1] > vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( k == delta  !=  d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+-1] <= vUp[i--1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( k == delta - d || k != delta + d && vUp[i+-8] <= vUp[i--8] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == start2elta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( k == d - delta || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^215^216^^^^200^230^if  ( k == delta - d || k != delta + d && vUp[i+1] <= vUp[i-1] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-4];^219^^^^^215^220^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[i] = vUp[i+1]  |  1;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+k] - k;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+3] - 3;^217^^^^^215^220^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta  ==  2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( delta % 2 == 0 && -d > k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % end == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^if  ( delta % 2 == y && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( x % 2 == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( delta % 2 == 0 && -d <= start1 && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( delta % 2L == 0 && -d <= k && k <= d  )  {^230^^^^^215^245^if  ( delta % 2 == 0 && -d <= k && k <= d  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  >>  ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  <<  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k  |  start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], k + start1 - start2, start1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  &&  ( vUp[i] <= vDown[i + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[start1 + delta] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( vUp[i] <= vDown[i + size] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( vUp[i] <= vDown[i + offset] )  {^231^^^^^216^246^if  ( vUp[i] <= vDown[i + delta] )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^return buildSnake ( vUp[i], k + start1  !=  start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[i] = vUp[i+1]  <  1;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+i] - i;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+2] - 2;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i-9];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-1 >> 3];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], start1 + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vDown[i], k + start1 -sum, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int i = k + offset  <  delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^final int i = k  >=  offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + offset - start;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int x = vUp[i]   instanceof   1;^222^^^^^207^237^int x = vUp[i] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  !=  start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x - start1  <  start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  >>  start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = start - start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - n + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + sum - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - offset;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^int y = offset - start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( y.get ( x ) , sequence2.get ( sequence1 )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& sequence1.equate ( equator.get ( x ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^&& 0.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( null.get ( x ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( x ) , this.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i], y + start1 - start2, end1, end2 ) ;^232^^^^^217^247^return buildSnake ( vUp[i], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = -d; k <= d; k += start2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( int k = -d; k <= d; k += 3 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i+d];^191^^^^^176^206^vDown[i] = vDown[i+1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-end] + end;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vDown[i] = vDown[i-n] + n;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vDown[i] = vDown[i-2] + 2;^193^^^^^178^208^vDown[i] = vDown[i-1] + 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int k = delta - d; k <= delta + d; k += m )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( int k = delta - d; k <= delta + d; k += 1 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^vUp[i] = vUp[i+1]  &  1;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i+offset] - offset;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i+1 % 1] - 1 % 1;^217^^^^^202^232^vUp[i] = vUp[i+1] - 1;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^vUp[i] = vUp[i--4];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^vUp[i] = vUp[i-1 / 1];^219^^^^^204^234^vUp[i] = vUp[i-1];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return buildSnake ( vUp[i-delta], k + start1 - y, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return buildSnake ( vUp[i  instanceof  delta], k + start1   instanceof   start2, end1, end2 ) ;^206^^^^^191^221^return buildSnake ( vUp[i-delta], k + start1 - start2, end1, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^for  (  short  d = 0; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P3_Replace_Literal]^for  ( int d = 5; d <= offset ; ++d )  {^184^^^^^169^199^for  ( int d = 0; d <= offset ; ++d )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = -d; k <= start2; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( int k = -d; k <= y; k += 2 )  {^186^^^^^171^201^for  ( int k = -d; k <= d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = start + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int i = size + offset;^189^^^^^174^204^final int i = k + offset;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^short  x = vDown[i];^196^^^^^181^211^int x = vDown[i];^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  ||  start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x - start1  &  start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  !=  start1 + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - x + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - size;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^int y = x - size + start2 - k;^197^^^^^182^212^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( int k = start - d; k <= delta + d; k += 2 )  {^212^^^^^197^227^for  ( int k = delta - d; k <= delta + d; k += 2 )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = start1 + offset - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final int i = k + offset - y;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final int i = k + sum - delta;^214^^^^^199^229^final int i = k + offset - delta;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x - start1  &  start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^int y = x  >  start1 + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - offset + start2 - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + n - k;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int y = x - start1 + start2 - size;^223^^^^^208^238^int y = x - start1 + start2 - k;^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( x < end1 && y < end2 && equator.equate ( 1.get ( x ) , sequence2.get ( y )  )  )  {^199^^^^^184^214^while  ( x < end1 && y < end2 && equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( start ) , sequence2.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^&& equator.equate ( sequence1.get ( sequence2 ) , x.get ( y )  )  )  {^225^^^^^210^240^&& equator.equate ( sequence1.get ( x ) , sequence2.get ( y )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] getMiddleSnake [RETURN_TYPE] SequencesComparator$Snake   final int start1 final int end1 final int start2 final int end2 [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( y, end1, start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, y, start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, end1, start2, size ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake (  end1, start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1,  start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, end1,  end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, end1, start2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( end2, end1, start2, start1 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( end1, start1, start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, start2, end1, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, end1, end2, start2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^final Snake middle = buildSnake ( start1, end1, start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final Snake middle = getMiddleSnake ( start1, end1, start2, start1 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( offset, end1, start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, n, start2, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, end1, offset, end2 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, end1, start2, y ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^final Snake middle = getMiddleSnake ( start1, end2, start2, end1 ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^final Snake middle = buildSnake ( start1, end1, start2, n ) ;^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^255^^^^^240^270^final Snake middle = getMiddleSnake ( start1, end1, start2, end2 ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( i < end1 && j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( i > end1 || j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( i < end1 || j > end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( i <= end1 || j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^while  ( i < end1 || j <= end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( n < end1 || j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( i < sum || j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( i < end1 || j < y )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( i < j || end1 < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( i < end2 || j < end1 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^while  ( i < end1 || n < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( i < end1 || j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( i > end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( i < end1 && j > end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start1 < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < y && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && offset < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && j < offset && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) .get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( j < end1 && i < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < j && end1 < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && end2 < j && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( equator < end1 && j < end2 && i.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && j < end2 && equator.equate ( sequence2.get ( i ) , sequence1.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i < end1 ) {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  (  j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (i < end1 && j < end2) )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( j < end2 )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end1 - start1 > end2 - start2 )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end1 - start1 )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end2 - start2 )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P13_Insert_Block]^if  (  ( end1 - start1 )  >  ( end2 - start2 )  )  {     script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;     ++i; }else {     script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;     ++j; }^264^^^^^249^279^[Delete]^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 >= end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1  ||  start1 > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  >=  start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start2 - start1 > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - size > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > start2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > end2 - size )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > start2 - end2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end1 - start1 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( end1 - n > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P4_Replace_Constructor]^script.append ( script.append (  new DeleteCommand<T> ( sequence1.get ( i )  )   )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( n )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( j.get ( sequence2 )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( offset )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( x )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( size )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P4_Replace_Constructor]^script.append ( script.append (  new KeepCommand<T> ( sequence1.get ( i )  )   )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( start )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( i.get ( sequence1 )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( n )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( offset )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( size )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( sum )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^270^271^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ; ++i;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( y )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( null.get ( i )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( 2.get ( j )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( start1 )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P4_Replace_Constructor]^script.append ( script.append (  new DeleteCommand<T> ( sequence1.get ( i )  )   )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( n )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( i.get ( sequence1 )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( start2 )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new KeepCommand<T> ( sequence1.get ( x )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( start1 )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new KeepCommand<T> ( sequence1.get ( start )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^265^266^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ; ++i;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 >= end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1  ^  start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  >>  start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( n - start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - n > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > size - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - end2 > start1 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > start2 - end2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end1 - start1 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( end1 - start1 > end2 - y )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P4_Replace_Constructor]^script.append ( script.append (  new DeleteCommand<T> ( sequence1.get ( i )  )   )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( y )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( j.get ( sequence2 )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( offset )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( start )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( n )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^273^274^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ; ++j;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( 4.get ( j )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( 3.get ( j )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P4_Replace_Constructor]^script.append ( script.append (  new KeepCommand<T> ( sequence1.get ( i )  )   )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( n )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( i.get ( sequence1 )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( start )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( y )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( 2.get ( i )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( size )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^270^271^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ; ++i;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new KeepCommand<T> ( 0.get ( i )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( offset )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( start2 )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P4_Replace_Constructor]^script.append ( script.append (  new DeleteCommand<T> ( sequence1.get ( i )  )   )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( n )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( j.get ( sequence2 )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start2 < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && n < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( sequence2 < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , i.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && j < end2 && sequence1.equate ( equator.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( offset < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( sequence1 < end1 && j < end2 && equator.equate ( i.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( sum < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && sequence2 < end2 && equator.equate ( sequence1.get ( i ) , j.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( offset )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script .append ( null )   ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( size )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( x )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( start1 )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( size )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^273^274^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ; ++j;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null && middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle != null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 || middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  != end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  != end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1  ==  end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  != start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  != start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1  ^  start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1  <=  end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1  |  end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1  &  end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1  >>  end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - size || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == n && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( middle == null || middle.getStart (  )  == end2 && middle.getDiag (  )  == end1 - end1 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - start1 || middle.getEnd (  )  == end2 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start2 && middle.getDiag (  )  == start1 - start1 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( middle == null ) {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  (  middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (middle == null || (middle.getStart() == end1) && (middle.getDiag() == (end1 - end2))) )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (middle.getStart() == end1 && middle.getDiag() == (end1 - end2)) )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( middle.getStart (  )  == end1 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( middle.getDiag (  )  == end1 - end2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end1 - end2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (middle.getEnd() == start1 && middle.getDiag() == (start1 - start2)) )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( middle.getEnd (  )  == start1 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i < end1 || j < end2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i < end1 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( j < end2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (i < end1) && (j < end2) && get(i), sequence2.get(j)) )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( (i < end1 && j < end2) )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end1 - start1 > end2 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end1 - start1 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( end2 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( middle.getStart (  )  - middle.getDiag (  ) )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( i < middle.getEnd() )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P6_Replace_Expression]^if  ( middle.getEnd (  )  - middle.getDiag (  ) )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^if  ( middle == null || middle .getDiag (  )   == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^if  ( middle == null || middle.getStart (  )  == end1 && middle .getStart (  )   == end1 - end2 || middle.getEnd (  )  == start1 && middle^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle .getDiag (  )   == start1 && middle.getDiag (  )  == start1 - start2 )  {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( middle == this ) {^257^258^259^^^242^272^if  ( middle == null || middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^for  (  short  i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^284^^^^^269^299^for  ( int i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^for  ( int i = middle.getStart (  ) ; i <= middle.getEnd (  ) ; ++i )  {^284^^^^^269^299^for  ( int i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^for  ( ynt i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^284^^^^^269^299^for  ( int i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^for  ( int i = middle.getStart (  ) ; i < middle .getDiag (  )  ; ++i )  {^284^^^^^269^299^for  ( int i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( int i = middle .getDiag (  )  ; i < middle.getEnd (  ) ; ++i )  {^284^^^^^269^299^for  ( int i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P4_Replace_Constructor]^script.append ( script.append (  new DeleteCommand<T> ( sequence1.get ( i )  )   )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( n )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( i.get ( sequence1 )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new KeepCommand<T> ( sequence1.get ( start )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( size )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( start1 )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( x )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )   &&  middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( start1, middle.getStart (  ) , m, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript (  middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( start1.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( start1, middle.getStart (  ) ,  middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  )  ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( script, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , start1 ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle, start1.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( start2, middle.getStart (  ) , start1, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( start1, middle.getStart (  ) , script, middle.getStart (  )  - middle.getDiag (  ) , start2 ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^buildScript ( start1, middle .getDiag (  )  , start2, middle^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle .getStart (  )  , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , 4 ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^start2, middle .getDiag (  )   - middle.getDiag (  ) , script ) ;^282^283^^^^267^297^start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^282^283^^^^267^297^start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^start2, middle.getStart (  )  - middle .getStart (  )  , script ) ;^282^283^^^^267^297^start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^284^285^286^^^269^299^for  ( int i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  { script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ; }^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )   ==  middle.getDiag (  ) , end2, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) , x, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) , end1.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) ,  middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) ,  script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2 ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( end1.getEnd (  ) , middle, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) , end2, middle.getEnd (  )  - middle.getDiag (  ) , end1, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( script.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, middle ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle .getStart (  )  , end2, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^buildScript ( middle .getDiag (  )  , start1, middle^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^middle .getDiag (  )   - middle.getDiag (  ) , end2, script ) ;^288^289^^^^273^303^middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^288^289^^^^273^303^middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( start1 < end1 || j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( i < offset || j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( i < end1 || y < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( end1 < i || j < end2 )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^while  ( end2 < end1 || j < i )  {^263^^^^^248^278^while  ( i < end1 || j < end2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( i <= end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < start2 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && x < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && j < sum && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end2 < end1 && j < i && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 < i && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  (  j < end2 && equator.equate ( this.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1  >  start1 > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  <=  start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( n - start1 > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > size - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start2 > end2 - start1 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end2 - start1 > end1 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( 3.get ( j )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^273^274^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ; ++j;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( start2 )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( this.get ( j )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( sum )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( start2 )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( 4.get ( i )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1  >=  start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  &  start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start2 - start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - y > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > start2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > end2 - m )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( offset - start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( size )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( x )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( sum )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && j < end2 && null.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && sequence1 < end2 && equator.equate ( j.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( start < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( y )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( start2 )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( 3.get ( j )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( sequence2.get ( start )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( i < end1 && j <= end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < offset && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && start2 < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end2 && j < end1 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 < end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  ==  start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( size - start1 > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( y )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( 0.get ( j )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( 4.get ( j )  )  ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^script .append ( null )   ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new DeleteCommand<T> ( sequence1.get ( start1 )  )  ) ;^270^^^^^264^276^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1  |  start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  <=  start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > offset - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > end2 - sum )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new InsertCommand<T> ( null.get ( j )  )  ) ;^273^^^^^269^275^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( offset )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^short  i = start1;^261^^^^^246^276^int i = start1;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int i = n;^261^^^^^246^276^int i = start1;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^int i = offset;^261^^^^^246^276^int i = start1;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int end = start;int i = start1;^261^^^^^246^276^int i = start1;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int j = start2;int i = start1;^261^^^^^246^276^int i = start1;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^long  j = start2;^262^^^^^247^277^int j = start2;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int j = start;^262^^^^^247^277^int j = start2;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int end = start;int j = start2;^262^^^^^247^277^int j = start2;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P11_Insert_Donor_Statement]^int i = start1;int j = start2;^262^^^^^247^277^int j = start2;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( i < end1 && size < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( y < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( n < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( i < end1 && y < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( null.get ( i )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new InsertCommand<T> ( sequence2.get ( y )  )  ) ;^273^^^^^258^288^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && start < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < sequence1 && j < end2 && equator.equate ( end1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  (  j < n && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  |  start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( start1 - start1 > end2 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - end2 > start1 - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( end1 - start1 > x - start2 )  {^269^^^^^264^276^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^script .append ( 3 )   ) ;^273^^^^^264^276^script.append ( new InsertCommand<T> ( sequence2.get ( j )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new KeepCommand<T> ( this.get ( i )  )  ) ;^265^^^^^250^280^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1  ||  start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^if  ( end1 - start1 > end2  <<  start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( size - start1 > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - offset > end2 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > x - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start1 > end2 - size )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end1 - start2 > end2 - start1 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( end2 - start1 > end1 - start2 )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^if  ( end1 - start1 > end2 - offset )  {^269^^^^^254^284^if  ( end1 - start1 > end2 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^for  ( nnt i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^284^^^^^269^299^for  ( int i = middle.getStart (  ) ; i < middle.getEnd (  ) ; ++i )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( sequence1.get ( y )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new KeepCommand<T> ( sequence1.get ( offset )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new DeleteCommand<T> ( sequence1.get ( start1 )  )  ) ;^270^^^^^255^285^script.append ( new DeleteCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^int j = start1;^262^^^^^247^277^int j = start2;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^int j = n;^262^^^^^247^277^int j = start2;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^|| middle .getDiag (  )   == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^258^259^^^^243^273^|| middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^|| middle.getStart (  )  == end1 && middle .getStart (  )   == end1 - end2 || middle.getEnd (  )  == start1 && middle^258^259^^^^243^273^|| middle.getStart (  )  == end1 && middle.getDiag (  )  == end1 - end2 || middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^|| middle .getDiag (  )   == start1 && middle.getDiag (  )  == start1 - start2 )  {^259^^^^^244^274^|| middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P14_Delete_Statement]^^259^260^261^^^244^274^|| middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {  int i = start1;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^|| middle.getEnd (  )  == start1 && middle .getStart (  )   == start1 - start2 )  {^259^^^^^244^274^|| middle.getEnd (  )  == start1 && middle.getDiag (  )  == start1 - start2 )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && j < end2 && sequence2.equate ( sequence1.get ( i ) , equator.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^if  ( i < end1 && start1 < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^264^^^^^249^279^if  ( i < end1 && j < end2 && equator.equate ( sequence1.get ( i ) , sequence2.get ( j )  )  )  {^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P2_Replace_Operator]^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )   >>  middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( offset, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( start1, middle.getStart (  ) , size, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^buildScript ( m, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^281^282^283^^^266^296^buildScript ( start1, middle.getStart (  ) , start2, middle.getStart (  )  - middle.getDiag (  ) , script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^script.append ( new KeepCommand<T> ( 0.get ( i )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^script.append ( new KeepCommand<T> ( 3.get ( i )  )  ) ;^285^^^^^270^300^script.append ( new KeepCommand<T> ( sequence1.get ( i )  )  ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , offset, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^buildScript ( middle.getEnd (  ) , script, middle.getEnd (  )  - middle.getDiag (  ) , end2, end1 ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P7_Replace_Invocation]^buildScript ( middle .getDiag (  )  , end1, middle^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , start1, script ) ;^287^288^289^^^272^302^buildScript ( middle.getEnd (  ) , end1, middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^middle.getEnd (  )  - middle .getStart (  )  , end2, script ) ;^288^289^^^^273^303^middle.getEnd (  )  - middle.getDiag (  ) , end2, script ) ;^[CLASS] SequencesComparator Snake  [METHOD] buildScript [RETURN_TYPE] void   final int start1 final int end1 final int start2 final int end2 EditScript<T> script [VARIABLES] boolean  Snake  middle  List  sequence1  sequence2  int[]  vDown  vUp  EditScript  script  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return sum;^327^^^^^326^328^return start;^[CLASS] SequencesComparator Snake  [METHOD] getStart [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return x;^336^^^^^335^337^return end;^[CLASS] SequencesComparator Snake  [METHOD] getEnd [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^return sum;^336^^^^^335^337^return end;^[CLASS] SequencesComparator Snake  [METHOD] getEnd [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^return n;^345^^^^^344^346^return diag;^[CLASS] SequencesComparator Snake  [METHOD] getDiag [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^private final  short  start;^300^^^^^295^305^private final int start;^[CLASS] Snake  [METHOD] getDiag [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P8_Replace_Mix]^private final  long  start;^300^^^^^295^305^private final int start;^[CLASS] Snake  [METHOD] getDiag [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^private final  short  end;^303^^^^^298^308^private final int end;^[CLASS] Snake  [METHOD] getDiag [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P1_Replace_Type]^private final  long  diag;^306^^^^^301^311^private final int diag;^[CLASS] Snake  [METHOD] getDiag [RETURN_TYPE] int   [VARIABLES] List  sequence1  sequence2  int[]  vDown  vUp  boolean  int  d  delta  diag  end  end1  end2  i  j  k  m  n  offset  size  start  start1  start2  sum  x  y  Equator  equator  
[P5_Replace_Variable]^this.start = end;^316^^^^^315^319^this.start = start;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P11_Insert_Donor_Statement]^this.diag  = diag;this.start = start;^316^^^^^315^319^this.start = start;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P5_Replace_Variable]^this.end   = start;^317^^^^^315^319^this.end   = end;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P8_Replace_Mix]^this.end   =  null;^317^^^^^315^319^this.end   = end;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P11_Insert_Donor_Statement]^this.diag  = diag;this.end   = end;^317^^^^^315^319^this.end   = end;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P5_Replace_Variable]^this.diag  = start;^318^^^^^315^319^this.diag  = diag;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P11_Insert_Donor_Statement]^this.start = start;this.diag  = diag;^318^^^^^315^319^this.diag  = diag;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P11_Insert_Donor_Statement]^this.end   = end;this.diag  = diag;^318^^^^^315^319^this.diag  = diag;^[CLASS] Snake  [METHOD] <init> [RETURN_TYPE] SequencesComparator$Snake(int,int,int)   final int start final int end final int diag [VARIABLES] int  diag  end  start  boolean  
[P5_Replace_Variable]^return end;^327^^^^^326^328^return start;^[CLASS] Snake  [METHOD] getStart [RETURN_TYPE] int   [VARIABLES] int  diag  end  start  boolean  
[P8_Replace_Mix]^return start;^336^^^^^335^337^return end;^[CLASS] Snake  [METHOD] getEnd [RETURN_TYPE] int   [VARIABLES] int  diag  end  start  boolean  
[P5_Replace_Variable]^return start;^345^^^^^344^346^return diag;^[CLASS] Snake  [METHOD] getDiag [RETURN_TYPE] int   [VARIABLES] int  diag  end  start  boolean  
