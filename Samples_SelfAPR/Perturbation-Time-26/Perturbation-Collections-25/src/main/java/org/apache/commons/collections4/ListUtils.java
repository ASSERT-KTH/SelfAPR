[P1_Replace_Type]^private final  short  size;^670^^^^^665^675^private final int size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition   [VARIABLES] 
[P4_Replace_Constructor]^sequence = sequence =  new ArrayList<E> ( list1 )  ;^593^^^^^592^594^sequence = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] ListUtils$LcsVisitor()   [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P8_Replace_Mix]^sequence =  new ArrayList<E> ( list1 )  ;^593^^^^^592^594^sequence = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] ListUtils$LcsVisitor()   [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P1_Replace_Type]^sequence = new  List <E> (  ) ;^593^^^^^592^594^sequence = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] ListUtils$LcsVisitor()   [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P8_Replace_Mix]^this.sequence =  null;^617^^^^^616^618^this.sequence = sequence;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] CharSequence)   CharSequence sequence [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P11_Insert_Donor_Statement]^this.size = size;this.sequence = sequence;^617^^^^^616^618^this.sequence = sequence;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] CharSequence)   CharSequence sequence [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P8_Replace_Mix]^this.list =  null;^673^^^^^672^675^this.list = list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P11_Insert_Donor_Statement]^this.size = size;this.list = list;^673^^^^^672^675^this.list = list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P8_Replace_Mix]^this.size =  null;^674^^^^^672^675^this.size = size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P11_Insert_Donor_Statement]^this.sequence = sequence;this.size = size;^674^^^^^672^675^this.size = size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P11_Insert_Donor_Statement]^this.list = list;this.size = size;^674^^^^^672^675^this.size = size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P2_Replace_Operator]^return list != null ? Collections.<T>emptyList (  )  : list;^62^^^^^61^63^return list == null ? Collections.<T>emptyList (  )  : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] emptyIfNull [RETURN_TYPE] <T>   List<T> list [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P6_Replace_Expression]^return list ( list;^62^^^^^61^63^return list == null ? Collections.<T>emptyList (  )  : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] emptyIfNull [RETURN_TYPE] <T>   List<T> list [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P8_Replace_Mix]^return list;^62^^^^^61^63^return list == null ? Collections.<T>emptyList (  )  : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] emptyIfNull [RETURN_TYPE] <T>   List<T> list [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P14_Delete_Statement]^^62^^^^^61^63^return list == null ? Collections.<T>emptyList (  )  : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] emptyIfNull [RETURN_TYPE] <T>   List<T> list [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[P2_Replace_Operator]^return list != null ? defaultList : list;^76^^^^^75^77^return list == null ? defaultList : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] defaultIfNull [RETURN_TYPE] <T>   List<T> list List<T> defaultList [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  defaultList  list  boolean  int  size  
[P5_Replace_Variable]^return defaultList == null ? list : list;^76^^^^^75^77^return list == null ? defaultList : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] defaultIfNull [RETURN_TYPE] <T>   List<T> list List<T> defaultList [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  defaultList  list  boolean  int  size  
[P6_Replace_Expression]^return list ( list;^76^^^^^75^77^return list == null ? defaultList : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] defaultIfNull [RETURN_TYPE] <T>   List<T> list List<T> defaultList [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  defaultList  list  boolean  int  size  
[P8_Replace_Mix]^return   defaultList ;^76^^^^^75^77^return list == null ? defaultList : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] defaultIfNull [RETURN_TYPE] <T>   List<T> list List<T> defaultList [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  defaultList  list  boolean  int  size  
[P1_Replace_Type]^final List<E> result = new  Set <E> (  ) ;^90^^^^^89^108^final List<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P4_Replace_Constructor]^final List<E> result = final List<E> result =  new ArrayList<E> ( list1 )  ;^90^^^^^89^108^final List<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;final List<E> result = new ArrayList<E> (  ) ;^90^^^^^89^108^final List<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final List<E> result = new ArrayList<E> (  ) ;^90^^^^^89^108^final List<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;final List<E> result = new ArrayList<E> (  ) ;^90^^^^^89^108^final List<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> (  ) ;final List<E> result = new ArrayList<E> (  ) ;^90^^^^^89^108^final List<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;final List<E> result = new ArrayList<E> (  ) ;^90^^^^^89^108^final List<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^List<? extends E> larger = list2;List<? extends E> smaller = list1;^92^^^^^89^108^List<? extends E> smaller = list1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^List<? extends E> smaller = list1;List<? extends E> larger = list2;^93^^^^^89^108^List<? extends E> larger = list2;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P2_Replace_Operator]^if  ( list1.size (  )  >= list2.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P3_Replace_Literal]^if  ( list1.size() + 8  > list2.size() + 8  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P5_Replace_Variable]^if  ( list1.size (  )  > this.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P5_Replace_Variable]^if  ( list2.size (  )  > list1.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P7_Replace_Invocation]^if  ( list1.add (  )  > list2.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P15_Unwrap_Block]^smaller = list2; larger = list1;^94^95^96^97^^89^108^if  ( list1.size (  )  > list2.size (  )  )  { smaller = list2; larger = list1; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P16_Remove_Block]^^94^95^96^97^^89^108^if  ( list1.size (  )  > list2.size (  )  )  { smaller = list2; larger = list1; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P8_Replace_Mix]^smaller =  null;^95^^^^^89^108^smaller = list2;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^larger = list1;smaller = list2;^95^^^^^89^108^smaller = list2;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P8_Replace_Mix]^larger =  null;^96^^^^^89^108^larger = list1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^smaller = list2;larger = list1;^96^^^^^89^108^larger = list1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P3_Replace_Literal]^if  ( list1.size() - 3  > list2.size() - 3  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P3_Replace_Literal]^if  ( list1.size() + 1  > list2.size() + 1  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P8_Replace_Mix]^if  ( list1.size (  )  > 2.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^99^^^^^89^108^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^99^^^^^89^108^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^99^^^^^89^108^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> (  ) ;final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^99^^^^^89^108^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final List<E> result = new ArrayList<E> (  ) ;final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^99^^^^^89^108^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^final HashBag<E> bag = new HashBag<E> ( list2 ) ;final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^99^^^^^89^108^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P5_Replace_Variable]^if  ( e.contains ( hashSet )  )  {^102^^^^^89^108^if  ( hashSet.contains ( e )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P9_Replace_Statement]^if  ( !remove.contains ( obj )  )  {^102^^^^^89^108^if  ( hashSet.contains ( e )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P9_Replace_Statement]^if  ( retain.contains ( obj )  )  {^102^^^^^89^108^if  ( hashSet.contains ( e )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P15_Unwrap_Block]^result.add(e); hashSet.remove(e);^102^103^104^105^^89^108^if  ( hashSet.contains ( e )  )  { result.add ( e ) ; hashSet.remove ( e ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P16_Remove_Block]^^102^103^104^105^^89^108^if  ( hashSet.contains ( e )  )  { result.add ( e ) ; hashSet.remove ( e ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P7_Replace_Invocation]^result.subList ( e ) ;^103^^^^^89^108^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P14_Delete_Statement]^^103^104^^^^89^108^result.add ( e ) ; hashSet.remove ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^result.addAll ( list2 ) ;result.add ( e ) ;^103^^^^^89^108^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^sequence.add ( object ) ;result.add ( e ) ;^103^^^^^89^108^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P11_Insert_Donor_Statement]^list.add ( obj ) ;result.add ( e ) ;^103^^^^^89^108^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P14_Delete_Statement]^^104^^^^^89^108^hashSet.remove ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P14_Delete_Statement]^^103^^^^^89^108^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[P1_Replace_Type]^final  LinkedHashSet <E> result = new  LinkedHashSet <E> (  ) ;^127^^^^^126^135^final ArrayList<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P4_Replace_Constructor]^final ArrayList<E> result = final new ArrayList<E> ( list1 )  ;^127^^^^^126^135^final ArrayList<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;final ArrayList<E> result = new ArrayList<E> (  ) ;^127^^^^^126^135^final ArrayList<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final ArrayList<E> result = new ArrayList<E> (  ) ;^127^^^^^126^135^final ArrayList<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;final ArrayList<E> result = new ArrayList<E> (  ) ;^127^^^^^126^135^final ArrayList<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final List<E> result = new ArrayList<E> (  ) ;final ArrayList<E> result = new ArrayList<E> (  ) ;^127^^^^^126^135^final ArrayList<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;final ArrayList<E> result = new ArrayList<E> (  ) ;^127^^^^^126^135^final ArrayList<E> result = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;final HashBag<E> bag = new HashBag<E> ( list2 ) ;^128^^^^^126^135^final HashBag<E> bag = new HashBag<E> ( list2 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final HashBag<E> bag = new HashBag<E> ( list2 ) ;^128^^^^^126^135^final HashBag<E> bag = new HashBag<E> ( list2 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;final HashBag<E> bag = new HashBag<E> ( list2 ) ;^128^^^^^126^135^final HashBag<E> bag = new HashBag<E> ( list2 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P3_Replace_Literal]^if  ( !bag.remove ( e, 8 )  )  {^130^^^^^126^135^if  ( !bag.remove ( e, 1 )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P5_Replace_Variable]^if  ( !bag.remove (  1 )  )  {^130^^^^^126^135^if  ( !bag.remove ( e, 1 )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P8_Replace_Mix]^if  ( !bag.remove ( e, 0 )  )  {^130^^^^^126^135^if  ( !bag.remove ( e, 1 )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P15_Unwrap_Block]^result.add(e);^130^131^132^^^126^135^if  ( !bag.remove ( e, 1 )  )  { result.add ( e ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P16_Remove_Block]^^130^131^132^^^126^135^if  ( !bag.remove ( e, 1 )  )  { result.add ( e ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P13_Insert_Block]^if  ( ! ( remove.contains ( obj )  )  )  {     list.add ( obj ) ; }^130^^^^^126^135^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P14_Delete_Statement]^^131^^^^^126^135^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^result.addAll ( list2 ) ;result.add ( e ) ;^131^^^^^126^135^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^sequence.add ( object ) ;result.add ( e ) ;^131^^^^^126^135^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P11_Insert_Donor_Statement]^list.add ( obj ) ;result.add ( e ) ;^131^^^^^126^135^result.add ( e ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P3_Replace_Literal]^if  ( !bag.remove ( e, -8 )  )  {^130^^^^^126^135^if  ( !bag.remove ( e, 1 )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P5_Replace_Variable]^return 4;^134^^^^^126^135^return result;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[P5_Replace_Variable]^return subtract ( union (  list2 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P5_Replace_Variable]^return subtract ( union ( list1 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P5_Replace_Variable]^return subtract ( union ( list2, list1 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P7_Replace_Invocation]^return subtract ( sum ( list1, list2 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P7_Replace_Invocation]^return subtract ( union ( list1, list2 ) , union ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P14_Delete_Statement]^^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P1_Replace_Type]^final  List <E> result = new  List <E> ( list1 ) ;^163^^^^^162^166^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P4_Replace_Constructor]^final ArrayList<E> result = final new ArrayList<E> (  )  ;^163^^^^^162^166^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^163^^^^^162^166^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> (  ) ;final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^163^^^^^162^166^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P11_Insert_Donor_Statement]^final List<E> result = new ArrayList<E> (  ) ;final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^163^^^^^162^166^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P11_Insert_Donor_Statement]^final HashBag<E> bag = new HashBag<E> ( list2 ) ;final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^163^^^^^162^166^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P11_Insert_Donor_Statement]^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^163^^^^^162^166^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P14_Delete_Statement]^^164^^^^^162^166^result.addAll ( list2 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P11_Insert_Donor_Statement]^result.add ( e ) ;result.addAll ( list2 ) ;^164^^^^^162^166^result.addAll ( list2 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P11_Insert_Donor_Statement]^list.add ( obj ) ;result.addAll ( list2 ) ;^164^^^^^162^166^result.addAll ( list2 ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P8_Replace_Mix]^return null;^165^^^^^162^166^return result;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] union [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[P3_Replace_Literal]^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size() + 5  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P4_Replace_Constructor]^return CollectionUtils.select (  predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P4_Replace_Constructor]^return CollectionUtils.select ( inputCollection,  new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P5_Replace_Variable]^return CollectionUtils.select ( inputCollection, null, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P5_Replace_Variable]^return CollectionUtils.select ( predicate, inputCollection, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P7_Replace_Invocation]^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P7_Replace_Invocation]^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.contains (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P1_Replace_Type]^return CollectionUtils.select ( inputCollection, predicate, new  Set <E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P3_Replace_Literal]^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size() - 7  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P7_Replace_Invocation]^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection .subList ( size , size )   )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P3_Replace_Literal]^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size() + 2  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P14_Delete_Statement]^^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P3_Replace_Literal]^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size() + 1  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P4_Replace_Constructor]^return CollectionUtils.selectRejected (  predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P4_Replace_Constructor]^return CollectionUtils.selectRejected ( inputCollection,  new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P5_Replace_Variable]^return CollectionUtils.selectRejected ( inputCollection, null, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P5_Replace_Variable]^return CollectionUtils.selectRejected ( predicate, inputCollection, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P7_Replace_Invocation]^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.contains (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P1_Replace_Type]^return CollectionUtils.selectRejected ( inputCollection, predicate, new  LinkedHashSet <E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P3_Replace_Literal]^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size() + 8  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P8_Replace_Mix]^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection .subList ( size , size )   )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P3_Replace_Literal]^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size() + 3  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P14_Delete_Statement]^^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P3_Replace_Literal]^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size() + 5  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[P2_Replace_Operator]^if  ( list1 <= list2 )  {^245^^^^^244^267^if  ( list1 == list2 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P5_Replace_Variable]^if  ( 4 == list2 )  {^245^^^^^244^267^if  ( list1 == list2 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P5_Replace_Variable]^if  ( list2 == list1 )  {^245^^^^^244^267^if  ( list1 == list2 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P9_Replace_Statement]^if  ( list == null )  {^245^^^^^244^267^if  ( list1 == list2 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P15_Unwrap_Block]^return true;^245^246^247^^^244^267^if  ( list1 == list2 )  { return true; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P16_Remove_Block]^^245^246^247^^^244^267^if  ( list1 == list2 )  { return true; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P13_Insert_Block]^if  ( list == null )  {     return 0; }^245^^^^^244^267^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P3_Replace_Literal]^return false;^246^^^^^244^267^return true;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^if  ( list1 == null && list2 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^if  ( list1 != null || list2 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^if  ( list1 == null || list2 != null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^if  ( list1 == null || list2 == null || list1.size (  )  == list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P3_Replace_Literal]^if  ( list1 == null || list2 == null || list1.size() + 5  != list2.size() + 5  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P5_Replace_Variable]^if  ( list2 == null || list1 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P6_Replace_Expression]^if  ( list1 == null ) {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P6_Replace_Expression]^if  (  list2 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P6_Replace_Expression]^if  ( (list1 == null || list2 == null) )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P6_Replace_Expression]^if  ( list2 == null )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P6_Replace_Expression]^if  ( list1.size (  )  != list2.size (  ) )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^if  ( list1 == null || list2 == null || list1.contains (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^if  ( list1 == null || list2 == null || list1 .subList ( size , size )   != list2^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^if  (  list2 == false || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P15_Unwrap_Block]^return false;^248^249^250^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  { return false; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P16_Remove_Block]^^248^249^250^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  { return false; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P13_Insert_Block]^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {     return false; }^248^^^^^244^267^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P3_Replace_Literal]^return true;^249^^^^^244^267^return false;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P3_Replace_Literal]^if  ( list1 == null || list2 == null || list1.size() + 0  != list2.size() + 0  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P3_Replace_Literal]^if  ( list1 == null || list2 == null || list1.size() - 2  != list2.size() - 2  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^final Iterator<?> it1 = list1.contains (  ) ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^final Iterator<?> it1 = list1 .size (  )  ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^final Iterator<?> it1 = 4.iterator (  ) ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;final Iterator<?> it1 = list1.iterator (  ) ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it2 = list2.iterator (  ) ;final Iterator<?> it1 = list1.iterator (  ) ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final E item = list.get ( i ) ;final Iterator<?> it1 = list1.iterator (  ) ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Object obj = it.next (  ) ;final Iterator<?> it1 = list1.iterator (  ) ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it = list.iterator (  ) ;final Iterator<?> it1 = list1.iterator (  ) ;^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P14_Delete_Statement]^^252^^^^^244^267^final Iterator<?> it1 = list1.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^final Iterator<?> it2 = list2.contains (  ) ;^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^final Iterator<?> it2 = list2 .size (  )  ;^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;final Iterator<?> it2 = list2.iterator (  ) ;^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final E item = list.get ( i ) ;final Iterator<?> it2 = list2.iterator (  ) ;^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Object obj = it.next (  ) ;final Iterator<?> it2 = list2.iterator (  ) ;^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it1 = list1.iterator (  ) ;final Iterator<?> it2 = list2.iterator (  ) ;^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it = list.iterator (  ) ;final Iterator<?> it2 = list2.iterator (  ) ;^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P14_Delete_Statement]^^253^^^^^244^267^final Iterator<?> it2 = list2.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^Object obj2 = null;Object obj1 = null;^254^^^^^244^267^Object obj1 = null;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^Object obj1 = null;Object obj2 = null;^255^^^^^244^267^Object obj2 = null;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^while  ( it1.hasNext (  )  || it2.hasNext (  )  )  {^257^^^^^244^267^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P5_Replace_Variable]^while  ( it2.hasNext (  )  && it1.hasNext (  )  )  {^257^^^^^244^267^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^while  ( it1 .next (  )   && it2^257^^^^^244^267^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^if  ( ! ( obj1 != null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^if  ( ! ( obj1 == null ? obj2 != null : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P5_Replace_Variable]^if  ( ! ( obj2 == null ? obj1 == null : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P6_Replace_Expression]^if  ( obj2 == null )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^if  ( ! ( obj1 == false ? obj2 == false : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P15_Unwrap_Block]^return false;^261^262^263^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  { return false; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P16_Remove_Block]^^261^262^263^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  { return false; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P13_Insert_Block]^if  (  (  ( list1 == null )  ||  ( list2 == null )  )  ||  (  ( list1.size (  )  )  !=  ( list2.size (  )  )  )  )  {     return false; }^261^^^^^244^267^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P3_Replace_Literal]^return true;^262^^^^^244^267^return false;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^obj1 =  null.next (  ) ;^258^^^^^244^267^obj1 = it1.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^obj2 = it2.next (  ) ;obj1 = it1.next (  ) ;^258^^^^^244^267^obj1 = it1.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^obj2 =  null.next (  ) ;^259^^^^^244^267^obj2 = it2.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^obj1 = it1.next (  ) ;obj2 = it2.next (  ) ;^259^^^^^244^267^obj2 = it2.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^obj1 = it1 .hasNext (  )  ;^258^^^^^244^267^obj1 = it1.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P14_Delete_Statement]^^258^259^^^^244^267^obj1 = it1.next (  ) ; obj2 = it2.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Object obj = it.next (  ) ;obj1 = it1.next (  ) ;^258^^^^^244^267^obj1 = it1.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^obj2 = it2 .hasNext (  )  ;^259^^^^^244^267^obj2 = it2.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P14_Delete_Statement]^^259^^^^^244^267^obj2 = it2.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P11_Insert_Donor_Statement]^final Object obj = it.next (  ) ;obj2 = it2.next (  ) ;^259^^^^^244^267^obj2 = it2.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P6_Replace_Expression]^if  ( ! ( obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^if  ( ! ( obj1 == this ? obj2 == this : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P14_Delete_Statement]^^257^258^^^^244^267^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  { obj1 = it1.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P14_Delete_Statement]^^258^^^^^244^267^obj1 = it1.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^return ! ( it1.hasNext (  )  && it2.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P5_Replace_Variable]^return ! ( it1.hasNext (  )  || 1.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P5_Replace_Variable]^return ! ( it2.hasNext (  )  || it1.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P7_Replace_Invocation]^return ! ( it1 .next (  )   || it2^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^return  ( it1.hasNext (  )  && it2.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P14_Delete_Statement]^^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P8_Replace_Mix]^return ! ( it1.hasNext (  )  || 3.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[P2_Replace_Operator]^if  ( list != null )  {^282^^^^^281^293^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P8_Replace_Mix]^if  ( list == false )  {^282^^^^^281^293^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P9_Replace_Statement]^if  ( equator == null )  {^282^^^^^281^293^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P9_Replace_Statement]^if  ( size <= 0 )  {^282^^^^^281^293^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P9_Replace_Statement]^if  ( listSize < 0 )  {^282^^^^^281^293^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P9_Replace_Statement]^if  ( list1 == list2 )  {^282^^^^^281^293^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P15_Unwrap_Block]^return 0;^282^283^284^^^281^293^if  ( list == null )  { return 0; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P16_Remove_Block]^^282^283^284^^^281^293^if  ( list == null )  { return 0; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P13_Insert_Block]^if  ( predicate.evaluate ( item )  )  {     return i; }^282^^^^^281^293^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P13_Insert_Block]^if  ( list1 == list2 )  {     return true; }^282^^^^^281^293^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P3_Replace_Literal]^return 6;^283^^^^^281^293^return 0;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P8_Replace_Mix]^return 2;^283^^^^^281^293^return 0;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P3_Replace_Literal]^return 9;^283^^^^^281^293^return 0;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P8_Replace_Mix]^return 0 / 3;^283^^^^^281^293^return 0;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P1_Replace_Type]^short  hashCode = 1;^285^^^^^281^293^int hashCode = 1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P3_Replace_Literal]^int hashCode = 6;^285^^^^^281^293^int hashCode = 1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P7_Replace_Invocation]^final Iterator<?> it = list.contains (  ) ;^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P7_Replace_Invocation]^final Iterator<?> it = list .size (  )  ;^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;final Iterator<?> it = list.iterator (  ) ;^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it2 = list2.iterator (  ) ;final Iterator<?> it = list.iterator (  ) ;^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final E item = list.get ( i ) ;final Iterator<?> it = list.iterator (  ) ;^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final Object obj = it.next (  ) ;final Iterator<?> it = list.iterator (  ) ;^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it1 = list1.iterator (  ) ;final Iterator<?> it = list.iterator (  ) ;^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P14_Delete_Statement]^^286^^^^^281^293^final Iterator<?> it = list.iterator (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P7_Replace_Invocation]^while  ( it .next (  )   )  {^288^^^^^281^293^while  ( it.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P2_Replace_Operator]^hashCode = 31 * hashCode +  |  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P2_Replace_Operator]^hashCode = 31 - hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P2_Replace_Operator]^hashCode = 31 * hashCode +  ( obj != null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P3_Replace_Literal]^hashCode = 26 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P3_Replace_Literal]^hashCode = 31 * hashCode +  ( obj == null ?  : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P5_Replace_Variable]^hashCode = 31 * size +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P5_Replace_Variable]^hashCode = 31 * obj +  ( hashCode == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P6_Replace_Expression]^hashCode = 31 * hashCode +  ( obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P7_Replace_Invocation]^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.equals (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P8_Replace_Mix]^hashCode = 3 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P7_Replace_Invocation]^final Object obj = it .hasNext (  )  ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it2 = list2.iterator (  ) ;final Object obj = it.next (  ) ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final E item = list.get ( i ) ;final Object obj = it.next (  ) ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it1 = list1.iterator (  ) ;final Object obj = it.next (  ) ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^final Iterator<?> it = list.iterator (  ) ;final Object obj = it.next (  ) ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P14_Delete_Statement]^^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^obj2 = it2.next (  ) ;final Object obj = it.next (  ) ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^obj1 = it1.next (  ) ;final Object obj = it.next (  ) ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P11_Insert_Donor_Statement]^while  ( it.hasNext (  )  )  { final Object obj = it.next (  ) ;final Object obj = it.next (  ) ;^289^^^^^281^293^final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P7_Replace_Invocation]^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj .Object (  )   ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P14_Delete_Statement]^^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P2_Replace_Operator]^hashCode = 31 * hashCode +  >=  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P2_Replace_Operator]^hashCode = 31 / hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P3_Replace_Literal]^hashCode = size * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P3_Replace_Literal]^hashCode = 31 * hashCode +  ( obj == null ? hashCode : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P8_Replace_Mix]^hashCode = 31L * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P14_Delete_Statement]^^288^289^^^^281^293^while  ( it.hasNext (  )  )  { final Object obj = it.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P5_Replace_Variable]^return size;^292^^^^^281^293^return hashCode;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[P1_Replace_Type]^final List<E> list = new  LinkedList <E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P3_Replace_Literal]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size() + 1 , retain.size() + 1  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P4_Replace_Constructor]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) .size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P5_Replace_Variable]^final List<E> list = new ArrayList<E> ( Math.min ( retain.size (  ) , collection.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P7_Replace_Invocation]^final List<E> list = new ArrayList<E> ( Math.min ( collection.contains (  ) , retain.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P8_Replace_Mix]^final List<E> list = new ArrayList<E> ( Math.min ( null.size (  ) , retain.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P3_Replace_Literal]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size() + 5 , retain.size() + 5  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P7_Replace_Invocation]^final List<E> list = new ArrayList<E> ( Math.min ( collection .subList ( size , size )  , retain^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P8_Replace_Mix]^final List<E> list = new ArrayList<E> ( Math.min ( collection.contains (  ) , this.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P3_Replace_Literal]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size() + 4 , retain.size() + 4  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P7_Replace_Invocation]^final List<E> list = new ArrayList<E> ( Math.min ( collection .subList ( hashCode , hashCode )  , retain^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P8_Replace_Mix]^final List<E> list = new ArrayList<E> ( Math.min ( collection .subList ( hashCode , size )  , retain^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P14_Delete_Statement]^^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P3_Replace_Literal]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size() - 2 , retain.size() - 2  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P3_Replace_Literal]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size() + 0 , retain.size() + 0  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P9_Replace_Statement]^if  ( !remove.contains ( obj )  )  {^322^^^^^318^327^if  ( retain.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P9_Replace_Statement]^if  ( hashSet.contains ( e )  )  {^322^^^^^318^327^if  ( retain.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P15_Unwrap_Block]^list.add(obj);^322^323^324^^^318^327^if  ( retain.contains ( obj )  )  { list.add ( obj ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P16_Remove_Block]^^322^323^324^^^318^327^if  ( retain.contains ( obj )  )  { list.add ( obj ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P13_Insert_Block]^if  ( ! ( remove.contains ( obj )  )  )  {     list.add ( obj ) ; }^322^^^^^318^327^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P7_Replace_Invocation]^list.subList ( obj ) ;^323^^^^^318^327^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P14_Delete_Statement]^^323^^^^^318^327^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^result.addAll ( list2 ) ;list.add ( obj ) ;^323^^^^^318^327^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^result.add ( e ) ;list.add ( obj ) ;^323^^^^^318^327^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^sequence.add ( object ) ;list.add ( obj ) ;^323^^^^^318^327^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P5_Replace_Variable]^if  ( obj.contains ( retain )  )  {^322^^^^^318^327^if  ( retain.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P1_Replace_Type]^final List<E> list = new  Set <E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P4_Replace_Constructor]^final List<E> list = final List<E> list =  new ArrayList<E> ( list1 )  ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final EditScript<E> script = comparator.getScript (  ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> ( list1 ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> (  ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final int listSize = size (  ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final List<E> result = new ArrayList<E> (  ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final HashBag<E> bag = new HashBag<E> ( list2 ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;final List<E> list = new ArrayList<E> (  ) ;^353^^^^^352^360^final List<E> list = new ArrayList<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P8_Replace_Mix]^if  ( remove.contains ( obj )  )  {^355^^^^^352^360^if  ( !remove.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P9_Replace_Statement]^if  ( retain.contains ( obj )  )  {^355^^^^^352^360^if  ( !remove.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P9_Replace_Statement]^if  ( hashSet.contains ( e )  )  {^355^^^^^352^360^if  ( !remove.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P15_Unwrap_Block]^list.add(obj);^355^356^357^^^352^360^if  ( !remove.contains ( obj )  )  { list.add ( obj ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P16_Remove_Block]^^355^356^357^^^352^360^if  ( !remove.contains ( obj )  )  { list.add ( obj ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P13_Insert_Block]^if  ( retain.contains ( obj )  )  {     list.add ( obj ) ; }^355^^^^^352^360^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P13_Insert_Block]^if  ( ! ( bag.remove ( e, 1 )  )  )  {     result.add ( e ) ; }^355^^^^^352^360^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P7_Replace_Invocation]^list.subList ( obj ) ;^356^^^^^352^360^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P14_Delete_Statement]^^356^^^^^352^360^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^result.addAll ( list2 ) ;list.add ( obj ) ;^356^^^^^352^360^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^result.add ( e ) ;list.add ( obj ) ;^356^^^^^352^360^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P11_Insert_Donor_Statement]^sequence.add ( object ) ;list.add ( obj ) ;^356^^^^^352^360^list.add ( obj ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[P7_Replace_Invocation]^return Collections .emptyList (  )  ;^387^^^^^386^388^return Collections.synchronizedList ( list ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] synchronizedList [RETURN_TYPE] <E>   List<E> list [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P14_Delete_Statement]^^387^^^^^386^388^return Collections.synchronizedList ( list ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] synchronizedList [RETURN_TYPE] <E>   List<E> list [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P14_Delete_Statement]^^401^402^^^^400^402^return UnmodifiableList.unmodifiableList ( list ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] unmodifiableList [RETURN_TYPE] <E>   List<? extends E> list [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P5_Replace_Variable]^return PredicatedList.predicatedList ( list, null ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[P5_Replace_Variable]^return PredicatedList.predicatedList (  predicate ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[P5_Replace_Variable]^return PredicatedList.predicatedList ( list ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[P5_Replace_Variable]^return PredicatedList.predicatedList ( predicate, list ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[P8_Replace_Mix]^return PredicatedList.predicatedList ( list, 2 ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[P14_Delete_Statement]^^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[P5_Replace_Variable]^return TransformedList.transformingList (  transformer ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[P5_Replace_Variable]^return TransformedList.transformingList ( list ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[P5_Replace_Variable]^return TransformedList.transformingList ( transformer, list ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[P8_Replace_Mix]^return TransformedList.transformingList ( list, 0 ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[P14_Delete_Statement]^^444^445^^^^442^445^return TransformedList.transformingList ( list, transformer ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[P5_Replace_Variable]^return LazyList.lazyList (  factory ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P5_Replace_Variable]^return LazyList.lazyList ( list ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P5_Replace_Variable]^return LazyList.lazyList ( factory, list ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P8_Replace_Mix]^return LazyList.lazyList ( null, factory ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P14_Delete_Statement]^^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P7_Replace_Invocation]^return FixedSizeList .fixedSizeList ( null )  ;^493^^^^^492^494^return FixedSizeList.fixedSizeList ( list ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] fixedSizeList [RETURN_TYPE] <E>   List<E> list [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P14_Delete_Statement]^^493^^^^^492^494^return FixedSizeList.fixedSizeList ( list ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] fixedSizeList [RETURN_TYPE] <E>   List<E> list [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[P2_Replace_Operator]^if  ( list != null || predicate != null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P2_Replace_Operator]^if  ( list == null && predicate != null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P2_Replace_Operator]^if  ( list != null && predicate == null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P6_Replace_Expression]^if  ( list != null ) {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P6_Replace_Expression]^if  (  predicate != null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P6_Replace_Expression]^if  ( i < list.size() )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P8_Replace_Mix]^if  ( list != this ) {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P15_Unwrap_Block]^for (int i = 0; i < (list.size()); i++) {    final E item = list.get(i);    if (predicate.evaluate(item)) {        return i;    }};^509^510^511^512^513^508^518^if  ( list != null && predicate != null )  { for  ( int i = 0; i < list.size (  ) ; i++ )  { final E item = list.get ( i ) ; if  ( predicate.evaluate ( item )  )  { return i; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P16_Remove_Block]^^509^510^511^512^513^508^518^if  ( list != null && predicate != null )  { for  ( int i = 0; i < list.size (  ) ; i++ )  { final E item = list.get ( i ) ; if  ( predicate.evaluate ( item )  )  { return i; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^if  ( predicate.evaluate ( sizetem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^if  ( item.evaluate ( predicate )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^if  ( predicate.evaluate ( i )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^if  ( predicate.evaluate ( itemtem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P15_Unwrap_Block]^return i;^512^513^514^^^508^518^if  ( predicate.evaluate ( item )  )  { return i; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P16_Remove_Block]^^512^513^514^^^508^518^if  ( predicate.evaluate ( item )  )  { return i; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P13_Insert_Block]^if  ( list == null )  {     return 0; }^512^^^^^508^518^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^return size;^513^^^^^508^518^return i;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P1_Replace_Type]^for  (  short  i = 0; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P2_Replace_Operator]^for  ( int i = 0; i <= list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = i; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = 0; i < list.size() - 9 ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^for  ( sizent i = 0; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^for  ( listnt i = 0; i < i.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P7_Replace_Invocation]^for  ( int i = 0; i < list.add (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P13_Insert_Block]^if  (  ( list != null )  &&  ( predicate != null )  )  {     for  ( int i = 0; i <  ( list.size (  )  ) ; i++ )  {         final E item = list.get ( i ) ;         if  ( predicate.evaluate ( item )  )  {             return i;         }     } }^510^^^^^508^518^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^if  ( i.evaluate ( predicatetem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^final E sizetem = list.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^final E listtem = i.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P7_Replace_Invocation]^final E item = list.subList ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P11_Insert_Donor_Statement]^final Iterator<?> it2 = list2.iterator (  ) ;final E item = list.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P11_Insert_Donor_Statement]^final Object obj = it.next (  ) ;final E item = list.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P11_Insert_Donor_Statement]^final Iterator<?> it1 = list1.iterator (  ) ;final E item = list.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P11_Insert_Donor_Statement]^final Iterator<?> it = list.iterator (  ) ;final E item = list.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P14_Delete_Statement]^^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P13_Insert_Block]^if  ( predicate.evaluate ( item )  )  {     return i; }^512^^^^^508^518^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = 0; i < list.size() - 0 ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P7_Replace_Invocation]^final E item = list .isEmpty (  )  ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P8_Replace_Mix]^final E sizetem = list.subList ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = 0; i < list.size() - 8 ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P14_Delete_Statement]^^510^511^512^513^514^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  { final E item = list.get ( i ) ; if  ( predicate.evaluate ( item )  )  { return i; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P8_Replace_Mix]^if  ( 2.evaluate ( item )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = 9; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = 0; i < list.size() - 2 ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P8_Replace_Mix]^for  ( sizent i = 0; i < list.add (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = -2; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = 0; i < list.size() + 1 ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^for  ( int i = 0; i < list.size() + 3 ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P7_Replace_Invocation]^for  ( int i = 0; i < list .subList ( hashCode , i )  ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^final E item = 0.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P3_Replace_Literal]^return --2;^517^^^^^508^518^return -1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P8_Replace_Mix]^return -0;^517^^^^^508^518^return -1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[P5_Replace_Variable]^return longestCommonSubsequence (   b, DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[P5_Replace_Variable]^return longestCommonSubsequence (  a,  DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[P5_Replace_Variable]^return longestCommonSubsequence (  b, a, DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[P7_Replace_Invocation]^return intersection (  a, b, DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[P5_Replace_Variable]^return longestCommonSubsequence (  a, 2, DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[P14_Delete_Statement]^^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[P2_Replace_Operator]^if  ( a == null && b == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P2_Replace_Operator]^if  ( a != null || b == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P2_Replace_Operator]^if  ( a == null || b != null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P5_Replace_Variable]^if  ( b == null || a == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P6_Replace_Expression]^if  ( a == null ) {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P6_Replace_Expression]^if  (  b == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P8_Replace_Mix]^if  ( a == this || b == this )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("List must not be null");^548^549^550^^^546^560^if  ( a == null || b == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P16_Remove_Block]^^548^549^550^^^546^560^if  ( a == null || b == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^548^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^548^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^548^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^548^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^548^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Equator must not be null" )   ;^549^^^^^546^560^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^549^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^549^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^549^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^549^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^549^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^549^^^^^546^560^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P8_Replace_Mix]^return ;^549^^^^^546^560^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P2_Replace_Operator]^if  ( equator != null )  {^551^^^^^546^560^if  ( equator == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P8_Replace_Mix]^if  ( equator == false )  {^551^^^^^546^560^if  ( equator == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P9_Replace_Statement]^if  ( list == null )  {^551^^^^^546^560^if  ( equator == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Equator must not be null");^551^552^553^^^546^560^if  ( equator == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P16_Remove_Block]^^551^552^553^^^546^560^if  ( equator == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^551^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^551^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^551^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^551^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^551^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^551^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "List must not be null" )   ;^552^^^^^546^560^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^552^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^552^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^552^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^552^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^552^^^^^546^560^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^552^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^552^^^^^546^560^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P4_Replace_Constructor]^final SequencesComparator<E> comparator = new SequencesComparator<E> (  b, equator ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P4_Replace_Constructor]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a,  equator ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P4_Replace_Constructor]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P5_Replace_Variable]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( b, a, equator ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P5_Replace_Variable]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, equator, b ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final EditScript<E> script = comparator.getScript (  ) ;^556^^^^^546^560^final EditScript<E> script = comparator.getScript (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P14_Delete_Statement]^^556^^^^^546^560^final EditScript<E> script = comparator.getScript (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P4_Replace_Constructor]^final LcsVisitor<E> visitor = final new CharSequenceAsList ( b )  ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final ArrayList<E> result = new ArrayList<E> (  ) ;final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final Iterator<?> it2 = list2.iterator (  ) ;final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final List<E> result = new ArrayList<E> (  ) ;final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final Iterator<?> it1 = list1.iterator (  ) ;final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final Iterator<?> it = list.iterator (  ) ;final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P11_Insert_Donor_Statement]^final HashSet<E> hashSet = new HashSet<E> ( smaller ) ;final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^557^^^^^546^560^final LcsVisitor<E> visitor = new LcsVisitor<E> (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P14_Delete_Statement]^^558^^^^^546^560^script.visit ( visitor ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P7_Replace_Invocation]^return visitor.visitKeepCommand (  ) ;^559^^^^^546^560^return visitor.getSubSequence (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P8_Replace_Mix]^return visitor .LcsVisitor (  )  ;^559^^^^^546^560^return visitor.getSubSequence (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P14_Delete_Statement]^^559^^^^^546^560^return visitor.getSubSequence (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[P2_Replace_Operator]^if  ( a == null && b == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P2_Replace_Operator]^if  ( a != null || b == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P2_Replace_Operator]^if  ( a == null || b != null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P5_Replace_Variable]^if  ( sequence == null || b == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P5_Replace_Variable]^if  ( a == null || sequence == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P5_Replace_Variable]^if  ( b == null || a == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P6_Replace_Expression]^if  ( a == null ) {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P6_Replace_Expression]^if  (  b == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P8_Replace_Mix]^if  ( a == true || b == true )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("CharSequence must not be null");^575^576^577^^^574^584^if  ( a == null || b == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P16_Remove_Block]^^575^576^577^^^574^584^if  ( a == null || b == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^575^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^575^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^575^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^575^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^575^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "List must not be null" )   ;^576^^^^^574^584^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^576^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^576^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^576^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^576^^^^^574^584^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^576^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^576^^^^^574^584^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P4_Replace_Constructor]^final List<Character> lcs = longestCommonSubsequence ( final List<Character> lcs = longestCommonSubsequence (  new CharSequenceAsList ( b )  , new CharSequenceAsList (  b  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P5_Replace_Variable]^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  sequence  ) , new CharSequenceAsList (  b  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P4_Replace_Constructor]^final List<Character> lcs = longestCommonSubsequence ( final List<Character> lcs = longestCommonSubsequence (  new Partition<T> ( list, size )  , new CharSequenceAsList (  b  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P5_Replace_Variable]^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  sequence  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P5_Replace_Variable]^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  b  ) , new CharSequenceAsList (  a  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P7_Replace_Invocation]^final List<Character> lcs = intersection ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P8_Replace_Mix]^final List<Character> lcs = intersection ( new CharSequenceAsList (  sequence  ) , new CharSequenceAsList (  b  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P14_Delete_Statement]^^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P14_Delete_Statement]^^581^^^^^574^584^sb.append ( ch ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P7_Replace_Invocation]^return sb.append (  ) ;^583^^^^^574^584^return sb.toString (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P7_Replace_Invocation]^return sb .StringBuilder (  )  ;^583^^^^^574^584^return sb.toString (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P14_Delete_Statement]^^583^^^^^574^584^return sb.toString (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[P7_Replace_Invocation]^sequence.ArrayList ( object ) ;^601^^^^^600^602^sequence.add ( object ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] visitKeepCommand [RETURN_TYPE] void   final E object [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  E  object  int  hashCode  i  size  
[P14_Delete_Statement]^^601^^^^^600^602^sequence.add ( object ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] visitKeepCommand [RETURN_TYPE] void   final E object [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  E  object  int  hashCode  i  size  
[P11_Insert_Donor_Statement]^result.add ( e ) ;sequence.add ( object ) ;^601^^^^^600^602^sequence.add ( object ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] visitKeepCommand [RETURN_TYPE] void   final E object [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  E  object  int  hashCode  i  size  
[P11_Insert_Donor_Statement]^list.add ( obj ) ;sequence.add ( object ) ;^601^^^^^600^602^sequence.add ( object ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] visitKeepCommand [RETURN_TYPE] void   final E object [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  E  object  int  hashCode  i  size  
[P5_Replace_Variable]^return Character.valueOf ( sequence.charAt (  size  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P5_Replace_Variable]^return Character.valueOf ( b.charAt (  index  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P5_Replace_Variable]^return Character.valueOf ( index.charAt (  sequence  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P14_Delete_Statement]^^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P3_Replace_Literal]^return sequence.length() - 0 ;^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P5_Replace_Variable]^return b.length (  ) ;^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P3_Replace_Literal]^return sequence.length() - 4 ;^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P14_Delete_Statement]^^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P2_Replace_Operator]^if  ( list != null )  {^655^^^^^654^662^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P8_Replace_Mix]^if  ( list == this )  {^655^^^^^654^662^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P9_Replace_Statement]^if  ( equator == null )  {^655^^^^^654^662^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P9_Replace_Statement]^if  ( size <= 0 )  {^655^^^^^654^662^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P9_Replace_Statement]^if  ( listSize < 0 )  {^655^^^^^654^662^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P9_Replace_Statement]^if  ( list1 == list2 )  {^655^^^^^654^662^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("List must not be null");^655^656^657^^^654^662^if  ( list == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P16_Remove_Block]^^655^656^657^^^654^662^if  ( list == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^655^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^655^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^655^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^655^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^655^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^655^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Equator must not be null" )   ;^656^^^^^654^662^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^656^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^656^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^656^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^656^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^656^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^656^^^^^654^662^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P2_Replace_Operator]^if  ( size < 0 )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P3_Replace_Literal]^if  ( size <= size )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P5_Replace_Variable]^if  ( index <= 0 )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P8_Replace_Mix]^if  ( size <= 0  )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P9_Replace_Statement]^if  ( list == null )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P9_Replace_Statement]^if  ( index < 0 )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P9_Replace_Statement]^if  ( listSize < 0 )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Size must be greater than 0");^658^659^660^^^654^662^if  ( size <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P16_Remove_Block]^^658^659^660^^^654^662^if  ( size <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "List must not be null" )   ;^659^^^^^654^662^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^659^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P8_Replace_Mix]^throw new IndexOutOfBoundsException  (" ")  ; ;^659^^^^^654^662^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^659^^^^^654^662^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^659^^^^^654^662^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P4_Replace_Constructor]^return return  new CharSequenceAsList ( b )  ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P4_Replace_Constructor]^return new Partition<T> (  size ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P4_Replace_Constructor]^return new Partition<T> ( list ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P5_Replace_Variable]^return new Partition<T> ( list, index ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P5_Replace_Variable]^return new Partition<T> ( size, list ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P8_Replace_Mix]^return  new CharSequenceAsList ( b )  ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[P1_Replace_Type]^final  long  listSize = size (  ) ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^final int listSize = size() + 3 ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P11_Insert_Donor_Statement]^final List<E> list = new ArrayList<E> (  ) ;final int listSize = size (  ) ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P11_Insert_Donor_Statement]^final int start = index * size;final int listSize = size (  ) ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^final int listSize = size() - 0 ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P14_Delete_Statement]^^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^if  ( listSize == 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^if  ( size < 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P6_Replace_Expression]^if  ( "negative size: " + listSize )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^if  ( listSize < 1 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P9_Replace_Statement]^if  ( list == null )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P9_Replace_Statement]^if  ( index < 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P9_Replace_Statement]^if  ( size <= 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("negative size: " + listSize));^680^681^682^^^678^693^if  ( listSize < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P16_Remove_Block]^^680^681^682^^^678^693^if  ( listSize < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^680^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( list == null )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^680^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( equator == null )  {     throw new IllegalArgumentException ( "Equator must not be null" ) ; }^680^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "List must not be null" ) ; }^680^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  (  ( a == null )  ||  ( b == null )  )  {     throw new IllegalArgumentException ( "CharSequence must not be null" ) ; }^680^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( index >= listSize )  {     throw new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  ) ; }^680^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "Size must be greater than 0" ) ; }^680^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^681^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^throw new IndexOutOfBoundsException  (" ")  ; ;^681^^^^^678^693^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^681^^^^^678^693^throw new IllegalArgumentException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^if  ( index <= 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^if  ( index < listSize )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^if  ( listSize < 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P6_Replace_Expression]^if  ( "Index " + index + " must not be negative" )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P6_Replace_Expression]^if  ( "Index " + index )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^if  ( index < 4 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P9_Replace_Statement]^if  ( size <= 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P15_Unwrap_Block]^throw new java.lang.IndexOutOfBoundsException((("Index " + index) + " must not be negative"));^683^684^685^^^678^693^if  ( index < 0 )  { throw new IndexOutOfBoundsException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P16_Remove_Block]^^683^684^685^^^678^693^if  ( index < 0 )  { throw new IndexOutOfBoundsException  (" ")  ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P4_Replace_Constructor]^throw throw  new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  )   ;^684^^^^^678^693^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^684^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( index >= listSize )  {     throw new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  ) ; }^684^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IndexOutOfBoundsException  (" ")  ;^684^^^^^678^693^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^684^^^^^678^693^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^if  ( index < listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^if  ( size >= listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^if  ( index >= start )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^if  ( listSize >= index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P6_Replace_Expression]^if  (  ( "Index " + index )  + " must be less than size " + listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P6_Replace_Expression]^if  ( "Index " + index + " must be less than size " )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P6_Replace_Expression]^if  ( "Index " + index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^if  ( index >= size )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P15_Unwrap_Block]^throw new java.lang.IndexOutOfBoundsException(((("Index " + index) + " must be less than size ") + listSize));^686^687^688^689^^678^693^if  ( index >= listSize )  { throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P16_Remove_Block]^^686^687^688^689^^678^693^if  ( index >= listSize )  { throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ; }^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^686^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^686^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  <  index  <  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  &  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "ndex " + index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size  must " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P4_Replace_Constructor]^throw throw  new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  )  ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^throw new IndexOutOfBoundsException ( "Index " + size + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + start ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^throw new IndexOutOfBoundsException ( "Index " + listSize + " must be less than size " + index ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^687^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P13_Insert_Block]^if  ( index >= listSize )  {     throw new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  ) ; }^687^^^^^678^693^[Delete]^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "   instanceof   index   instanceof   " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  !=  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + "must b" + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  >>  index  >>  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "   instanceof   index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index Inde" + index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + " b" + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^throw new IndexOutOfBoundsException ( "Index " + start + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  ||  index  ||  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  >>  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + "" + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^throw new IndexOutOfBoundsException  (" ")  ; ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P1_Replace_Type]^final  short  start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^final / int start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int start = index * index;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int start = size * index;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^final int start = size * size;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P11_Insert_Donor_Statement]^final int listSize = size (  ) ;final int start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P1_Replace_Type]^final  long  end = Math.min ( start + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^final int end = Math.min ( start + size, list.size (  |  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^final int end = Math.min ( start + size, list.size() + 4  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( size + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( start + listSize, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( start +  list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( start + size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( list + size, start.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( size + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P7_Replace_Invocation]^final int end = Math.min ( start + size, list.isEmpty (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P7_Replace_Invocation]^final int end = Math.min ( start + size, list .subList ( index , size )   ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^final int end = Math.min ( start + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^final int end = Math.min ( start + size, list.size (  &&  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^final int end = Math.min ( start + size, list.size() + 1  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( index + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( start + index, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^final int end = Math.min ( start + list, size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P14_Delete_Statement]^^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return list.subList ( index, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return list.subList ( start, size ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return list.subList (  end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return list.subList ( start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return list.subList ( end, start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return end.subList ( start, list ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return start.subList ( list, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^return list.subList ( start, listSize ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return list.subList ( size, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P14_Delete_Statement]^^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^return  ( list.size (  )  + size - 1 )  + size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^return  ( list.size (  )  + size  ^  1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P2_Replace_Operator]^return  ( list.size (  )   !=  size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^return  ( list.size (  )  + size  )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^return  ( list.size() + 7  + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return  ( list.size (  )  + index - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return  ( size.size (  )  + list - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P7_Replace_Invocation]^return  ( list.isEmpty (  )  + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^return (list.isEmpty() + start - 1)  ;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P12_Insert_Condition]^if  ( list1.size (  )  > list2.size (  )  )  { return  ( list.size (  )  + size - 1 )  / size; }^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P3_Replace_Literal]^return  ( list.size() + 5  + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P7_Replace_Invocation]^return  ( list .subList ( size , listSize )   + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P14_Delete_Statement]^^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P7_Replace_Invocation]^return list.size (  ) ;^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P5_Replace_Variable]^return null.isEmpty (  ) ;^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P7_Replace_Invocation]^return list .get ( end )  ;^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^return list .get ( index )  ;^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P14_Delete_Statement]^^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[P8_Replace_Mix]^sequence  = null ;^593^^^^^592^594^sequence = new ArrayList<E> (  ) ;^[CLASS] LcsVisitor  [METHOD] <init> [RETURN_TYPE] ListUtils$LcsVisitor()   [VARIABLES] ArrayList  sequence  boolean  
[P1_Replace_Type]^sequence = new  Set <E> (  ) ;^593^^^^^592^594^sequence = new ArrayList<E> (  ) ;^[CLASS] LcsVisitor  [METHOD] <init> [RETURN_TYPE] ListUtils$LcsVisitor()   [VARIABLES] ArrayList  sequence  boolean  
[P8_Replace_Mix]^sequence .ArrayList (  )  ;^601^^^^^600^602^sequence.add ( object ) ;^[CLASS] LcsVisitor  [METHOD] visitKeepCommand [RETURN_TYPE] void   final E object [VARIABLES] ArrayList  sequence  E  object  boolean  
[P14_Delete_Statement]^^601^^^^^600^602^sequence.add ( object ) ;^[CLASS] LcsVisitor  [METHOD] visitKeepCommand [RETURN_TYPE] void   final E object [VARIABLES] ArrayList  sequence  E  object  boolean  
[P8_Replace_Mix]^this.sequence =  null;^617^^^^^616^618^this.sequence = sequence;^[CLASS] CharSequenceAsList  [METHOD] <init> [RETURN_TYPE] CharSequence)   CharSequence sequence [VARIABLES] CharSequence  sequence  boolean  
[P5_Replace_Variable]^return Character.valueOf ( index.charAt (  sequence  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] CharSequenceAsList  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] CharSequence  sequence  int  index  boolean  
[P14_Delete_Statement]^^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] CharSequenceAsList  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] CharSequence  sequence  int  index  boolean  
[P3_Replace_Literal]^return sequence.length() + 2 ;^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] CharSequenceAsList  [METHOD] size [RETURN_TYPE] int   [VARIABLES] CharSequence  sequence  boolean  
[P3_Replace_Literal]^return sequence.length() + 4 ;^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] CharSequenceAsList  [METHOD] size [RETURN_TYPE] int   [VARIABLES] CharSequence  sequence  boolean  
[P14_Delete_Statement]^^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] CharSequenceAsList  [METHOD] size [RETURN_TYPE] int   [VARIABLES] CharSequence  sequence  boolean  
[P1_Replace_Type]^private final  long  size;^670^^^^^665^675^private final int size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] CharSequence  sequence  boolean  
[P8_Replace_Mix]^private   short  size;^670^^^^^665^675^private final int size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] CharSequence  sequence  boolean  
[P8_Replace_Mix]^this.list =  null;^673^^^^^672^675^this.list = list;^[CLASS] Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] List  list  int  size  boolean  
[P11_Insert_Donor_Statement]^this.size = size;this.list = list;^673^^^^^672^675^this.list = list;^[CLASS] Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] List  list  int  size  boolean  
[P8_Replace_Mix]^this.size =  null;^674^^^^^672^675^this.size = size;^[CLASS] Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] List  list  int  size  boolean  
[P11_Insert_Donor_Statement]^this.list = list;this.size = size;^674^^^^^672^675^this.size = size;^[CLASS] Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] List  list  int  size  boolean  
[P1_Replace_Type]^final  long  listSize = size (  ) ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^final int listSize = size() - 7 ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P11_Insert_Donor_Statement]^final int start = index * size;final int listSize = size (  ) ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^final int listSize = size() + 3 ;^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P14_Delete_Statement]^^679^^^^^678^693^final int listSize = size (  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^if  ( listSize <= 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^if  ( listSize < 8 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^if  ( start < 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P6_Replace_Expression]^if  ( "negative size: " + listSize )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P8_Replace_Mix]^if  ( listSize < 2 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P9_Replace_Statement]^if  ( index < 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("negative size: " + listSize));^680^681^682^^^678^693^if  ( listSize < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P16_Remove_Block]^^680^681^682^^^678^693^if  ( listSize < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^680^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( index >= listSize )  {     throw new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  ) ; }^680^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^681^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P11_Insert_Donor_Statement]^throw new IndexOutOfBoundsException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^681^^^^^678^693^throw new IllegalArgumentException  (" ")  ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^if  ( index == 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^if  ( index < start )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^if  ( start < 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P6_Replace_Expression]^if  ( "Index " + index + " must not be negative" )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P6_Replace_Expression]^if  ( "Index " + index )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P8_Replace_Mix]^if  ( index < 4 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P9_Replace_Statement]^if  ( listSize < 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P15_Unwrap_Block]^throw new java.lang.IndexOutOfBoundsException((("Index " + index) + " must not be negative"));^683^684^685^^^678^693^if  ( index < 0 )  { throw new IndexOutOfBoundsException  (" ")  ; }^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P16_Remove_Block]^^683^684^685^^^678^693^if  ( index < 0 )  { throw new IndexOutOfBoundsException  (" ")  ; }^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P4_Replace_Constructor]^throw throw  new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  )   ;^684^^^^^678^693^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^684^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( index >= listSize )  {     throw new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  ) ; }^684^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IndexOutOfBoundsException  (" ")  ;^684^^^^^678^693^throw new IndexOutOfBoundsException  (" ")  ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^if  ( index > listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^if  ( index >= start )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^if  ( listSize >= index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P6_Replace_Expression]^if  (  ( "Index " + index )  + " must be less than size " + listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P6_Replace_Expression]^if  ( "Index " + index + " must be less than size " )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P6_Replace_Expression]^if  ( "Index " + index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P15_Unwrap_Block]^throw new java.lang.IndexOutOfBoundsException(((("Index " + index) + " must be less than size ") + listSize));^686^687^688^689^^678^693^if  ( index >= listSize )  { throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ; }^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P16_Remove_Block]^^686^687^688^689^^678^693^if  ( index >= listSize )  { throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ; }^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^686^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( listSize < 0 )  {     throw new IllegalArgumentException (  ( "negative size: " + listSize )  ) ; }^686^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  >=  index  >=  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  !=  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index" + index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size  m" + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P4_Replace_Constructor]^throw throw  new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  )  ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^throw new IndexOutOfBoundsException ( "Index " + start + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + start ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^throw new IndexOutOfBoundsException ( "Index " + listSize + " must be less than size " + index ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( index < 0 )  {     throw new IndexOutOfBoundsException (  (  ( "Index " + index )  + " must not be negative" )  ) ; }^687^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P13_Insert_Block]^if  ( index >= listSize )  {     throw new IndexOutOfBoundsException (  (  (  ( "Index " + index )  + " must be less than size " )  + listSize )  ) ; }^687^^^^^678^693^[Delete]^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  &  index  &  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  ||  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index Ind" + index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + " " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P8_Replace_Mix]^throw new IndexOutOfBoundsException  (" ")  ; ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  <=  index  <=  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  >  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "In" + index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + "st be less tmust be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^throw new IndexOutOfBoundsException ( "Index "  >  index  >  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size  less tha" + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P1_Replace_Type]^final  short  start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^final - int start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int start = size * size;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int start = index * listSize;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int start = size * index;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P11_Insert_Donor_Statement]^final int listSize = size (  ) ;final int start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P1_Replace_Type]^final  short  end = Math.min ( start + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^final int end = Math.min ( start + size, list.size (   instanceof   )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^final int end = Math.min ( start + size, list.size() + 9  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int end = Math.min ( size + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int end = Math.min ( start +  list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int end = Math.min ( start + size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int end = Math.min ( size + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int end = Math.min ( list + size, start.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P7_Replace_Invocation]^final int end = Math.min ( start + size, list.isEmpty (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^final int end = Math.min ( start + size, list.size() + 7  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int end = Math.min ( start + listSize, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^final int end = Math.min ( start + list, size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P14_Delete_Statement]^^691^692^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ; return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^final int end = Math.min ( start + size, list.size() - 9  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P8_Replace_Mix]^final int end = Math.min ( start + size, list .Partition ( 2 , size )   ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return list.subList ( start, start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return list.subList (  end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return list.subList ( start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return start.subList ( list, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return end.subList ( start, list ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P8_Replace_Mix]^return list.subList ( start, size ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return list.subList ( size, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return list.subList ( end, start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P7_Replace_Invocation]^return list .size (  )  ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P14_Delete_Statement]^^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^return  ( list.size (  )  + size - 1 )  + size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^return  ( list.size (  )  + size  >  1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P2_Replace_Operator]^return  ( list.size (  )   <  size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^return  ( list.size (  )  + size  )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^return  ( list.size() + 8  + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return  ( size.size (  )  + list - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P7_Replace_Invocation]^return  ( list.isEmpty (  )  + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P8_Replace_Mix]^return (list.isEmpty() + start - 1)  ;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P3_Replace_Literal]^return  ( list.size() - 1  + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P5_Replace_Variable]^return  ( null.size (  )  + size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P14_Delete_Statement]^^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P7_Replace_Invocation]^return list.size (  ) ;^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[P14_Delete_Statement]^^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
