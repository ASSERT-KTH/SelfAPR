[P8_Replace_Mix]^this.parser =  null;^56^^^^^54^57^this.parser = parser;^[CLASS] IRFactory  [METHOD] <init> [RETURN_TYPE] Parser)   Parser parser [VARIABLES] Parser  parser  boolean  
[P7_Replace_Invocation]^Node children = body.Node (  ) ;^69^^^^^67^71^Node children = body.removeChildren (  ) ;^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P5_Replace_Variable]^Node children = children.removeChildren (  ) ;^69^^^^^67^71^Node children = body.removeChildren (  ) ;^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P7_Replace_Invocation]^Node children = body .getLastChild (  )  ;^69^^^^^67^71^Node children = body.removeChildren (  ) ;^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P14_Delete_Statement]^^69^^^^^67^71^Node children = body.removeChildren (  ) ;^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P2_Replace_Operator]^if  ( children == null )  { scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P5_Replace_Variable]^if  ( body != null )  { scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P5_Replace_Variable]^if  ( scriptNode != null )  { children.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P8_Replace_Mix]^if  ( children != this )  { scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P15_Unwrap_Block]^scriptNode.addChildrenToBack(children);^70^71^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; } }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P16_Remove_Block]^^70^71^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; } }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P13_Insert_Block]^if  ( children != null )  {     scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^[Delete]^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[P4_Replace_Constructor]^return return  new Node ( nodeType, lineno, charno )  ;^78^^^^^76^79^return new Node ( nodeType ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType [VARIABLES] int  nodeType  Parser  parser  boolean  
[P8_Replace_Mix]^return  new Node ( nodeType, lineno, charno )  ;^78^^^^^76^79^return new Node ( nodeType ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType [VARIABLES] int  nodeType  Parser  parser  boolean  
[P4_Replace_Constructor]^return return  new Node ( nodeType, left, right, lineno, charno )  ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node (  lineno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( nodeType,  charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( nodeType, lineno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( charno, lineno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( nodeType, charno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( nodeType, lineno, nodeType ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( lineno, nodeType, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( nodeType, charno, lineno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( charno, lineno, nodeType ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P8_Replace_Mix]^return  new Node ( nodeType, left, right, lineno, charno )  ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( lineno, lineno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( Token.SWITCH,  charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( Token.SWITCH, lineno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( Token.SWITCH, charno, charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node (  lineno, charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( Token.SWITCH, charno, lineno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( lineno, Token.SWITCH, charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P8_Replace_Mix]^return new Node ( Token.SWITCH, lineno, lineno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P2_Replace_Operator]^if  ( switchNode.getType (  )  == Token.SWITCH )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^if  ( statements.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^if  ( Token.SWITCH.getType (  )  != switchNode )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P7_Replace_Invocation]^if  ( switchNode.Node (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P2_Replace_Operator]^if  ( caseExpression == null )  {^107^^^^^101^115^if  ( caseExpression != null )  {^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^if  ( switchNode != null )  {^107^^^^^101^115^if  ( caseExpression != null )  {^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P8_Replace_Mix]^if  ( caseExpression != false )  {^107^^^^^101^115^if  ( caseExpression != null )  {^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P9_Replace_Statement]^if  ( namespace != null )  {^107^^^^^101^115^if  ( caseExpression != null )  {^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P15_Unwrap_Block]^caseNode = new com.google.javascript.rhino.Node(Token.CASE, caseExpression, lineno, charno);^107^108^109^110^111^101^115^if  ( caseExpression != null )  { caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ; } else { caseNode = new Node ( Token.DEFAULT, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P16_Remove_Block]^^107^108^109^110^111^101^115^if  ( caseExpression != null )  { caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ; } else { caseNode = new Node ( Token.DEFAULT, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P13_Insert_Block]^if  ( namespace.equals ( "*" )  )  {     nsNode = new Node ( Token.NULL, lineno, charno ) ; }else {     nsNode = createName ( namespace, lineno, charno ) ; }^107^^^^^101^115^[Delete]^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P13_Insert_Block]^if  ( namespace == null )  {     ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; }else {     ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^107^^^^^101^115^[Delete]^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P13_Insert_Block]^if  ( namespace == null )  {     ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; }else {     ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ; }^107^^^^^101^115^[Delete]^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P4_Replace_Constructor]^caseNode = new Node ( Token.DEFAULT,  charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P4_Replace_Constructor]^caseNode = new Node ( Token.DEFAULT, lineno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node (  lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( Token.DEFAULT, charno, lineno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( charno, lineno, Token.DEFAULT ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P8_Replace_Mix]^caseNode =  new Node ( Token.DEFAULT, charno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( Token.DEFAULT, lineno, lineno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P4_Replace_Constructor]^caseNode = new Node ( Token.CASE,  lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P4_Replace_Constructor]^caseNode = new Node ( Token.CASE, caseExpression,  charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P4_Replace_Constructor]^caseNode = new Node ( Token.CASE, caseExpression, lineno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( Token.CASE, switchNode, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( Token.CASE, caseExpression, charno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node (  caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( caseExpression, Token.CASE, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( Token.CASE, caseExpression, charno, lineno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( lineno, caseExpression, Token.CASE, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( Token.CASE, lineno, caseExpression, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( lineno, Token.DEFAULT, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode = new Node ( charno, caseExpression, lineno, Token.CASE ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^caseNode.addChildToBack ( switchNode ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P7_Replace_Invocation]^caseNode .addChildToBack ( caseNode )  ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P14_Delete_Statement]^^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;caseNode.addChildToBack ( statements ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;caseNode.addChildToBack ( statements ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;caseNode.addChildToBack ( statements ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;caseNode.addChildToBack ( statements ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;caseNode.addChildToBack ( statements ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;caseNode.addChildToBack ( statements ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;caseNode.addChildToBack ( statements ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P5_Replace_Variable]^switchNode.addChildToBack ( statements ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P8_Replace_Mix]^switchNode .addChildToBack ( caseNode )  ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P14_Delete_Statement]^^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;switchNode.addChildToBack ( caseNode ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;switchNode.addChildToBack ( caseNode ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;switchNode.addChildToBack ( caseNode ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;switchNode.addChildToBack ( caseNode ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;switchNode.addChildToBack ( caseNode ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;switchNode.addChildToBack ( caseNode ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;switchNode.addChildToBack ( caseNode ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[P4_Replace_Constructor]^return return  new Node ( nodeType, left, right, lineno, charno )  ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node (  lineno, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( token,  charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( token, lineno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( lineno, lineno, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( token, token, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( token, lineno, token ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( lineno, token, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( charno, lineno, token ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P8_Replace_Mix]^return  new Node ( nodeType, left, right, lineno, charno )  ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( token, charno, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( token, charno, lineno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P8_Replace_Mix]^return new Node ( token, lineno, lineno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[P1_Replace_Type]^short  type;^128^^^^^126^135^int type;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P7_Replace_Invocation]^if  ( parser.getSourceName (  )  )  {^129^^^^^126^135^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P15_Unwrap_Block]^type = Token.EXPR_VOID;^129^130^131^132^133^126^135^if  ( parser.insideFunction (  )  )  { type = Token.EXPR_VOID; } else { type = Token.EXPR_RESULT; }^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P16_Remove_Block]^^129^130^131^132^133^126^135^if  ( parser.insideFunction (  )  )  { type = Token.EXPR_VOID; } else { type = Token.EXPR_RESULT; }^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P8_Replace_Mix]^type  =  type ;^132^^^^^126^135^type = Token.EXPR_RESULT;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P11_Insert_Donor_Statement]^type = Token.EXPR_VOID;type = Token.EXPR_RESULT;^132^^^^^126^135^type = Token.EXPR_RESULT;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P8_Replace_Mix]^type  =  type ;^130^^^^^126^135^type = Token.EXPR_VOID;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P11_Insert_Donor_Statement]^type = Token.EXPR_RESULT;type = Token.EXPR_VOID;^130^^^^^126^135^type = Token.EXPR_VOID;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P11_Insert_Donor_Statement]^nodeType = Token.GETPROP;type = Token.EXPR_VOID;^130^^^^^126^135^type = Token.EXPR_VOID;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^type = this;^130^^^^^126^135^type = Token.EXPR_VOID;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node (  expr, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( type,  lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( type, expr,  charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( type, expr, lineno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( lineno, expr, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( type, expr, charno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( type, expr, lineno, type ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( charno, expr, lineno, type ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( type, lineno, expr, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( type, expr, type, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( expr, type, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( type, expr, charno, lineno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( Token.EXPR_VOID,  lineno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( Token.EXPR_VOID, expr,  charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( Token.EXPR_VOID, expr, lineno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.EXPR_VOID, expr, charno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node (  expr, lineno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.EXPR_VOID, lineno, expr, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.EXPR_VOID, expr, charno, lineno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( lineno, expr, Token.EXPR_VOID, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P8_Replace_Mix]^return new Node ( null, expr, lineno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.EXPR_VOID, expr, lineno, lineno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.EXPR_VOID, charno, lineno, expr ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P7_Replace_Invocation]^getLanguageVersion (  ) ;^145^^^^^142^149^setRequiresActivation (  ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P14_Delete_Statement]^^145^^^^^142^149^setRequiresActivation (  ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, charno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, lineno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE,  lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr,  charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE, lineno, expr, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, charno, lineno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P7_Replace_Invocation]^Node n = createThrow ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P8_Replace_Mix]^Node n = createUnary ( Token.DEFAULTNAMESPACE, result, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node n = createUnary ( Token.DEFAULTNAMESPACE, charno, lineno, expr ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P14_Delete_Statement]^^146^147^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ; Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, name, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( n, charno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( n, lineno, lineno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement (  lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( n,  charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( n, lineno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( lineno, n, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( charno, lineno, n ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P7_Replace_Invocation]^Node result = createExprStatementNoReturn ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P8_Replace_Mix]^Node result = createExprStatement ( expr, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node result = createExprStatement ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node result = createExprStatement ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node result = createExprStatement ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node result = createExprStatement ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node result = createExprStatement ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node result = createExprStatement ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( result, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^Node result = createExprStatement ( n, charno, lineno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P8_Replace_Mix]^Node result = createExprStatementNoReturn ( result, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P14_Delete_Statement]^^147^148^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ; return result;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;Node result = createExprStatement ( n, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P5_Replace_Variable]^return n;^148^^^^^142^149^return result;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[P7_Replace_Invocation]^return Node.putProp ( Token.NAME, "error" ) ;^152^^^^^151^153^return Node.newString ( Token.NAME, "error" ) ;^[CLASS] IRFactory  [METHOD] createErrorName [RETURN_TYPE] Node   [VARIABLES] Parser  parser  boolean  
[P3_Replace_Literal]^return Node.newString ( Token.NAME, "rrrror" ) ;^152^^^^^151^153^return Node.newString ( Token.NAME, "error" ) ;^[CLASS] IRFactory  [METHOD] createErrorName [RETURN_TYPE] Node   [VARIABLES] Parser  parser  boolean  
[P14_Delete_Statement]^^152^^^^^151^153^return Node.newString ( Token.NAME, "error" ) ;^[CLASS] IRFactory  [METHOD] createErrorName [RETURN_TYPE] Node   [VARIABLES] Parser  parser  boolean  
[P7_Replace_Invocation]^createString ( name, Token.NAME ) ;^160^^^^^158^162^checkActivationName ( name, Token.NAME ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^160^161^^^^158^162^checkActivationName ( name, Token.NAME ) ; return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^checkActivationName ( name, Token.GETPROP ) ;checkActivationName ( name, Token.NAME ) ;^160^^^^^158^162^checkActivationName ( name, Token.NAME ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( Token.NAME,  lineno, charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( Token.NAME, name,  charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( Token.NAME, name, lineno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( Token.NAME, lineno, name, charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( Token.NAME, name, charno, lineno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return Node.newNumber ( Token.NAME, name, lineno, charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( Token.NAME, charno, lineno, name ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return Node .newString ( name )  ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^return Node.newString ( Token.NAME, name, lineno, lineno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node n = createName ( name, charno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P5_Replace_Variable]^Node n = createName ( name, lineno, lineno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P5_Replace_Variable]^Node n = createName (  lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P5_Replace_Variable]^Node n = createName ( name,  charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P5_Replace_Variable]^Node n = createName ( name, lineno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P5_Replace_Variable]^Node n = createName ( charno, lineno, name ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P5_Replace_Variable]^Node n = createName ( name, charno, lineno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P7_Replace_Invocation]^Node n = createLabel ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P14_Delete_Statement]^^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^return Node.newNumber ( number, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, name, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^return createName ( name, nameLineno, nameCharno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^return Node.newString ( string, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;Node n = createName ( name, lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P2_Replace_Operator]^if  ( info == null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P5_Replace_Variable]^if  ( n != infoull )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P8_Replace_Mix]^if  ( info != this )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P9_Replace_Statement]^if  ( label == null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P9_Replace_Statement]^if  ( target == null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P9_Replace_Statement]^if  ( catchCond == null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P9_Replace_Statement]^if  ( child == null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P9_Replace_Statement]^if  ( elem != null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P9_Replace_Statement]^if  ( namespace != null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P15_Unwrap_Block]^n.setJSDocInfo(info);^167^168^169^^^164^171^if  ( info != null )  { n.setJSDocInfo ( info ) ; }^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P16_Remove_Block]^^167^168^169^^^164^171^if  ( info != null )  { n.setJSDocInfo ( info ) ; }^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P13_Insert_Block]^if  ( info != null )  {     fnNode.setJSDocInfo ( info ) ; }^167^^^^^164^171^[Delete]^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P14_Delete_Statement]^^168^^^^^164^171^n.setJSDocInfo ( info ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P11_Insert_Donor_Statement]^fnNode.setJSDocInfo ( info ) ;n.setJSDocInfo ( info ) ;^168^^^^^164^171^n.setJSDocInfo ( info ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P8_Replace_Mix]^n .getString (  )  ;^168^^^^^164^171^n.setJSDocInfo ( info ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[P7_Replace_Invocation]^return Node.putProp ( string ) ;^178^^^^^176^179^return Node.newString ( string ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string [VARIABLES] Parser  parser  String  string  boolean  
[P14_Delete_Statement]^^178^^^^^176^179^return Node.newString ( string ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string [VARIABLES] Parser  parser  String  string  boolean  
[P5_Replace_Variable]^return Node.newString ( string, charno, charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString (  lineno, charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( string,  charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( string, lineno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( charno, lineno, string ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( string, charno, lineno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return Node.newNumber ( string, lineno, charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return Node .newString ( string )  ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( string, lineno, lineno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newString ( lineno, string, charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return Node.Node ( number ) ;^191^^^^^189^192^return Node.newNumber ( number ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number [VARIABLES] double  number  Parser  parser  boolean  
[P14_Delete_Statement]^^191^^^^^189^192^return Node.newNumber ( number ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number [VARIABLES] double  number  Parser  parser  boolean  
[P5_Replace_Variable]^return Node.newNumber ( number, charno, charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newNumber (  lineno, charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newNumber ( number,  charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newNumber ( number, lineno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newNumber ( charno, lineno, number ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newNumber ( number, charno, lineno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return Node.Node ( number, lineno, charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return Node .newNumber ( number )  ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return Node.newNumber ( lineno, number, charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^return Node.newNumber ( number, lineno, lineno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[P2_Replace_Operator]^if  ( catchCond != null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^if  ( stmts == null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P8_Replace_Mix]^if  ( catchCond == true )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P9_Replace_Statement]^if  ( label == null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P9_Replace_Statement]^if  ( target == null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P9_Replace_Statement]^if  ( info != null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P9_Replace_Statement]^if  ( child == null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P9_Replace_Statement]^if  ( namespace != null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P9_Replace_Statement]^if  ( namespace == null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P15_Unwrap_Block]^catchCond = new com.google.javascript.rhino.Node(Token.EMPTY, nameLineno, nameCharno);^213^214^215^^^210^219^if  ( catchCond == null )  { catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ; }^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P16_Remove_Block]^^213^214^215^^^210^219^if  ( catchCond == null )  { catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ; }^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^catchCond = new Node ( Token.EMPTY,  nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^catchCond = new Node ( Token.EMPTY, nameLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( Token.EMPTY, nameCharno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( Token.EMPTY, nameLineno, catchLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node (  nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( Token.EMPTY, nameCharno, nameLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( nameCharno, nameLineno, Token.EMPTY ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( Token.EMPTY, catchLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( nameLineno, Token.EMPTY, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( null, nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^catchCond = new Node ( Token.EMPTY, nameLineno, nameLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.CATCH, createName (  nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.CATCH, createName ( varName,  nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.CATCH, createName ( varName, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) ,  stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond,  catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts,  catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, catchLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, catchCond, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, nameLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, nameCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node (  createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( nameCharno, nameLineno, varName ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( nameLineno, varName, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameCharno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( catchCond, createName ( varName, nameLineno, nameCharno ) , Token.CATCH, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , stmts, catchCond, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, catchLineno ) , catchCond, stmts, nameCharno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, catchCharno, nameCharno ) , catchCond, stmts, catchLineno, nameLineno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( varName, createName ( Token.CATCH, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P7_Replace_Invocation]^return new Node ( Token.CATCH, createLabel ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P8_Replace_Mix]^return new Node ( Token.CATCH, createLabel ( varName, nameLineno, nameCharno ) , catchCond, stmts, nameLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameCharno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, catchLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , stmts, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( catchLineno, nameLineno, nameCharno ) , catchCond, stmts, varName, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( Token.CATCH, createName ( varName, nameLineno, catchCharno ) , catchCond, stmts, catchLineno, nameCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^return new Node ( stmts, createName ( varName, nameLineno, nameCharno ) , catchCond, Token.CATCH, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^createName ( varName, catchLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^createName ( varName, nameLineno, catchLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^createName (  nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^createName ( varName,  nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^createName ( varName, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^createName ( nameLineno, varName, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P5_Replace_Variable]^createName ( varName, nameCharno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P7_Replace_Invocation]^createLabel ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P8_Replace_Mix]^createName ( varName, nameCharno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P14_Delete_Statement]^^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P11_Insert_Donor_Statement]^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[P4_Replace_Constructor]^return new Node ( Token.THROW,  lineno, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( Token.THROW, expr,  charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( Token.THROW, expr, lineno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.THROW, expr, lineno, lineno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node (  expr, lineno, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( expr, Token.THROW, lineno, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.THROW, expr, charno, lineno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( charno, expr, lineno, Token.THROW ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( lineno, expr, Token.THROW, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.THROW, expr, charno, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return new Node ( Token.THROW, lineno, expr, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P2_Replace_Operator]^return expr != null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN,  lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return expr == null ? new Node ( Token.RETURN,  charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return expr == null ? new Node ( Token.RETURN, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return expr == null ? new Node ( Token.RETURN, lineno, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return expr == null ? new Node (  lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return charno == null ? new Node ( Token.RETURN, lineno, expr ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return expr == null ? new Node ( lineno, Token.RETURN, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return expr == null ? new Node ( charno, lineno, Token.RETURN ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^return Token.RETURN == null ? new Node ( expr, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P6_Replace_Expression]^return expr ( new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P8_Replace_Mix]^return expr != null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^? new Node ( Token.RETURN,  charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^? new Node ( Token.RETURN, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^? new Node ( Token.RETURN, lineno, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^? new Node (  lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^? new Node ( lineno, Token.RETURN, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^? new Node ( Token.RETURN, charno, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^: new Node ( Token.RETURN,  lineno, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^: new Node ( Token.RETURN, expr,  charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^: new Node ( Token.RETURN, expr, lineno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^: new Node ( Token.RETURN, expr, charno, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^: new Node (  expr, lineno, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^: new Node ( Token.RETURN, lineno, expr, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^: new Node ( Token.RETURN, expr, charno, lineno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^: new Node ( Token.RETURN, charno, lineno, expr ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P5_Replace_Variable]^: new Node ( charno, expr, lineno, Token.RETURN ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[P4_Replace_Constructor]^return new Node ( Token.LABEL, Node.newString ( Token.NAME,  lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name,  charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return new Node (  Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, lineno, name, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, charno, lineno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return new Node ( name, Node.newString ( Token.NAME, Token.LABEL, lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return new Node ( Token.LABEL, Node.newNumber ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, charno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return new Node ( charno, Node.newString ( Token.NAME, name, lineno, Token.LABEL ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return new Node ( Token.LABEL, Node .newString ( name )  , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, lineno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( Token.NAME,  lineno, charno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( Token.NAME, name,  charno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( Token.NAME, name, lineno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( Token.NAME, charno, lineno, name ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( Token.NAME, name, charno, lineno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^Node.newNumber ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^Node result = new Node ( Token.BREAK,  charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P4_Replace_Constructor]^Node result = new Node ( Token.BREAK, lineno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( Token.BREAK, lineno, lineno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node (  lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( Token.BREAK, charno, lineno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( charno, lineno, Token.BREAK ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P8_Replace_Mix]^Node result = new Node ( Token.BREAK, charno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( lineno, Token.BREAK, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node result = new Node ( Token.BREAK, lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P2_Replace_Operator]^if  ( label != null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P8_Replace_Mix]^if  ( label == false )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( target == null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( info != null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( catchCond == null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( child == null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( elem != null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( namespace != null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( namespace == null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^return name;^260^^^^^252^262^return result;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, charno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, lineno, lineno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME,  lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label,  charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, lineno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, lineno, label, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, charno, lineno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P7_Replace_Invocation]^Node name = Node.newNumber ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P7_Replace_Invocation]^Node name = Node .newString ( label )  ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P13_Insert_Block]^if  ( label == null )  {     return result; }else {     Node name = newString ( Token.NAME, label, lineno, charno ) ;     result.addChildToBack ( name ) ;     return result; }^258^^^^^252^262^[Delete]^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, charno, lineno, label ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P14_Delete_Statement]^^258^259^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ; result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newNumber ( number, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, name, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newString ( string, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, "error" ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P8_Replace_Mix]^result .addChildToBack ( result )  ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P14_Delete_Statement]^^259^260^^^^252^262^result.addChildToBack ( name ) ; return result;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;result.addChildToBack ( name ) ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;result.addChildToBack ( name ) ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;result.addChildToBack ( name ) ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;result.addChildToBack ( name ) ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;result.addChildToBack ( name ) ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;result.addChildToBack ( name ) ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;result.addChildToBack ( name ) ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^return name;^256^^^^^252^262^return result;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P7_Replace_Invocation]^result .addChildToBack ( name )  ;^259^^^^^252^262^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P4_Replace_Constructor]^Node result = new Node ( Token.CONTINUE,  charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P4_Replace_Constructor]^Node result = new Node ( Token.CONTINUE, lineno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node (  lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( lineno, Token.CONTINUE, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( Token.CONTINUE, charno, lineno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( charno, lineno, Token.CONTINUE ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P8_Replace_Mix]^Node result = new Node ( Token.CONTINUE, charno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node result = new Node ( Token.CONTINUE, lineno, lineno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P2_Replace_Operator]^if  ( label != null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P8_Replace_Mix]^if  ( label == false )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( target == null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( info != null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( catchCond == null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( child == null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( elem != null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( namespace != null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P9_Replace_Statement]^if  ( namespace == null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^return name;^275^^^^^267^277^return result;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, charno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, lineno, lineno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME,  lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label,  charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, lineno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, lineno, label, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, label, charno, lineno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P7_Replace_Invocation]^Node name = Node.newNumber ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P13_Insert_Block]^if  ( label == null )  {     return result; }else {     Node name = newString ( Token.NAME, label, lineno, charno ) ;     result.addChildToBack ( name ) ;     return result; }^273^^^^^267^277^[Delete]^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, charno, lineno, label ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P14_Delete_Statement]^^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newNumber ( number, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, name, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newString ( string, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, "error" ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P8_Replace_Mix]^result .addChildToBack ( name )  ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P14_Delete_Statement]^^274^275^^^^267^277^result.addChildToBack ( name ) ; return result;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;result.addChildToBack ( name ) ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;result.addChildToBack ( name ) ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;result.addChildToBack ( name ) ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;result.addChildToBack ( name ) ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;result.addChildToBack ( name ) ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;result.addChildToBack ( name ) ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;result.addChildToBack ( name ) ;^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P5_Replace_Variable]^return name;^271^^^^^267^277^return result;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P7_Replace_Invocation]^Node name = Node .newString ( label )  ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P14_Delete_Statement]^^274^^^^^267^277^result.addChildToBack ( name ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[P4_Replace_Constructor]^return new Node ( Token.DEBUGGER,  charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( Token.DEBUGGER, lineno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( Token.DEBUGGER, charno, charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node (  lineno, charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( lineno, Token.DEBUGGER, charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( Token.DEBUGGER, charno, lineno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( charno, lineno, Token.DEBUGGER ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( Token.BLOCK,  charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P4_Replace_Constructor]^return new Node ( Token.BLOCK, lineno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node (  lineno, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( Token.BLOCK, charno, lineno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( lineno, Token.BLOCK, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P8_Replace_Mix]^return new Node ( Token.BLOCK, charno, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P5_Replace_Variable]^return new Node ( null, lineno, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P8_Replace_Mix]^return new Node ( 2, lineno, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[P4_Replace_Constructor]^FunctionNode fnNode = new Node ( Token.BLOCK, lineno, charno )  ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^FunctionNode fnNode = new FunctionNode (  lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^FunctionNode fnNode = new FunctionNode ( name,  charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^FunctionNode fnNode = new FunctionNode ( name, lineno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^FunctionNode fnNode = new FunctionNode ( name, charno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^FunctionNode fnNode = new FunctionNode ( charno, lineno, name ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^FunctionNode fnNode = new FunctionNode ( name, charno, lineno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^FunctionNode fnNode = new FunctionNode ( name, lineno, lineno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^FunctionNode fnNode = new FunctionNode ( lineno, name, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^FunctionNode fn = fnNode.getFunctionNode ( i ) ;FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( createName (  lineno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( createName ( name,  charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( createName ( name, lineno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( createName ( charno, lineno, name )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( createName ( name, charno, lineno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^fnNode.addChildToBack ( createLabel ( name, lineno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^fnNode.addChildToBack ( createLabel ( name, charno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^302^303^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ; return fnNode;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, name, lineno, charno ) ;fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( createName ( name, charno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^fnNode.itsFunctionType = i;^310^^^^^295^325^fnNode.itsFunctionType = functionType;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( statements ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;fnNode.addChildToBack ( args ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;fnNode.addChildToBack ( args ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;fnNode.addChildToBack ( args ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;fnNode.addChildToBack ( args ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;fnNode.addChildToBack ( args ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;fnNode.addChildToBack ( args ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;fnNode.addChildToBack ( args ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^fnNode.addChildToBack ( args ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;fnNode.addChildToBack ( statements ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( parser.getSourceName (  )  == null )  {^313^^^^^298^328^if  ( parser.getSourceName (  )  != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^if  ( parser.insideFunction (  )  != null )  {^313^^^^^298^328^if  ( parser.getSourceName (  )  != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( parser.getSourceName (  )  != true )  {^313^^^^^298^328^if  ( parser.getSourceName (  )  != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P15_Unwrap_Block]^fnNode.putProp(Node.SOURCENAME_PROP, parser.getSourceName());^313^314^315^^^298^328^if  ( parser.getSourceName (  )  != null )  { fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P16_Remove_Block]^^313^314^315^^^298^328^if  ( parser.getSourceName (  )  != null )  { fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^fnNode.putProp ( Node.SOURCENAME_PROP.getSourceName (  )  ) ;^314^^^^^299^329^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^fnNode.putIntProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^314^^^^^299^329^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^fnNode.putProp ( Node.SOURCENAME_PROP, parser.insideFunction (  )  ) ;^314^^^^^299^329^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^fnNode.putProp ( Node.SOURCENAME_PROP, parser .reportError ( name )   ) ;^314^^^^^299^329^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^314^^^^^299^329^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P13_Insert_Block]^if  (  ( parser.getSourceName (  )  )  != null )  {     fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ; }^314^^^^^299^329^[Delete]^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^fnNode .putIntProp ( functionIndex )  ;^314^^^^^299^329^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( info == null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( info != false )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( label == null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( target == null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( catchCond == null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( child == null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( elem != null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( namespace != null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P15_Unwrap_Block]^fnNode.setJSDocInfo(info);^316^317^318^^^301^331^if  ( info != null )  { fnNode.setJSDocInfo ( info ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P16_Remove_Block]^^316^317^318^^^301^331^if  ( info != null )  { fnNode.setJSDocInfo ( info ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P13_Insert_Block]^if  ( info != null )  {     n.setJSDocInfo ( info ) ; }^316^^^^^301^331^[Delete]^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^fnNode .getString (  )  ;^317^^^^^302^332^fnNode.setJSDocInfo ( info ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^317^^^^^302^332^fnNode.setJSDocInfo ( info ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^n.setJSDocInfo ( info ) ;fnNode.setJSDocInfo ( info ) ;^317^^^^^302^332^fnNode.setJSDocInfo ( info ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P1_Replace_Type]^short  functionCount = fnNode.getFunctionCount (  ) ;^320^^^^^305^335^int functionCount = fnNode.getFunctionCount (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^int functionCount = fn.getFunctionCount (  ) ;^320^^^^^305^335^int functionCount = fnNode.getFunctionCount (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^int functionCount = fnNode.getFunctionNode (  ) ;^320^^^^^305^335^int functionCount = fnNode.getFunctionCount (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^FunctionNode fn = fnNode.getFunctionNode ( i ) ;int functionCount = fnNode.getFunctionCount (  ) ;^320^^^^^305^335^int functionCount = fnNode.getFunctionCount (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^String name = fn.getFunctionName (  ) ;int functionCount = fnNode.getFunctionCount (  ) ;^320^^^^^305^335^int functionCount = fnNode.getFunctionCount (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^320^^^^^305^335^int functionCount = fnNode.getFunctionCount (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( functionCount == 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( functionCount > 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( functionCount >= 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( functionCount <= 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( functionCount != functionIndex )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( functionCount != -3 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( i != functionCount )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( fn.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION_STATEMENT )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name != null && name.length() != 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name != null )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name.length (  )  != 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( functionCount != 0 + 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P9_Replace_Statement]^if  ( skipCount != 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( fn.getFunctionType (  ) != FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^if  ( fnNode.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name != null && name.length() != 0 ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name != null ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name.length (  )  != 0 ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^if  ( fn.getFunctionNode (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( name != null || name.length (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( name == null && name.length (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( name != null && name.length (  )  == 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != 2 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() + 1  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name != null ) {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  (  name.length (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^if  ( name != null && name.equals (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  (  name.equals (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P15_Unwrap_Block]^fnNode.removeParamOrVar(name);^331^332^333^^^327^334^if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P16_Remove_Block]^^331^332^333^^^327^334^if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^332^^^^^327^334^fnNode.removeParamOrVar ( name ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P1_Replace_Type]^char name = fn.getFunctionName (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^String name = fnNode.getFunctionName (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^String name = fn.getFunctionNode (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^String name = fnNode .getFunctionNode ( functionType )  ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^String name = child.getLastChild (  ) .getString (  ) ;String name = fn.getFunctionName (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^int functionCount = fnNode.getFunctionCount (  ) ;String name = fn.getFunctionName (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = fn.getFunctionName (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^FunctionNode fn = fnNode.getFunctionNode ( i ) ;String name = fn.getFunctionName (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^String name = fn .getFunctionNode ( i )  ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^String name = fnNode.getFunctionNode (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() + 9  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^fnNode .putProp (  )  ;^332^^^^^327^334^fnNode.removeParamOrVar ( name ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( name != null || name.length (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( name == null && name.length (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( name != null && name.length (  )  == 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != functionIndex )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() - 3  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  ( name != null ) {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P6_Replace_Expression]^if  (  name.length (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^if  ( name != null && name.equals (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( name != false && name.length (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P15_Unwrap_Block]^fnNode.removeParamOrVar(name);^331^332^333^^^316^346^if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P16_Remove_Block]^^331^332^333^^^316^346^if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^fnNode .putProp (  )  ;^332^^^^^317^347^fnNode.removeParamOrVar ( name ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^332^^^^^317^347^fnNode.removeParamOrVar ( name ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P1_Replace_Type]^for  (  short  i = 0; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^for  ( int i = 0; i <= functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^for  ( int i = functionType; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^for  ( int i = 3; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^for  ( functionTypent i = 0; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^for  ( int i = 0; i != functionType; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^for  ( functionCountnt i = 0; i != i; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( fn.getFunctionType (  ) < FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^if  ( fn .getFunctionNode ( functionType )  == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != -5 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( name != false ) {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^String name = fn .getFunctionNode ( functionCount )  ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != 5 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() + 4  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( name != true ) {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^FunctionNode fn = fnNode.getFunctionNode ( functionType ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^FunctionNode fn = i.getFunctionNode ( fnNode ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P1_Replace_Type]^char name = fn.getFunctionName (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^String name = fnNode.getFunctionName (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^String name = fn.getFunctionNode (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^String name = child.getLastChild (  ) .getString (  ) ;String name = fn.getFunctionName (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^int functionCount = fnNode.getFunctionCount (  ) ;String name = fn.getFunctionName (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = fn.getFunctionName (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^FunctionNode fn = fnNode.getFunctionNode ( i ) ;String name = fn.getFunctionName (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^FunctionNode fn = fn.getFunctionNode ( i ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^int functionCount = fnNode.getFunctionCount (  ) ;FunctionNode fn = fnNode.getFunctionNode ( i ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^String name = fn.getFunctionName (  ) ;FunctionNode fn = fnNode.getFunctionNode ( i ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^String name = fnNode.getFunctionNode (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() - 2  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^fnNode.itsNeedsActivation = false;^323^^^^^308^338^fnNode.itsNeedsActivation = true;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^activation = true;fnNode.itsNeedsActivation = true;^323^^^^^308^338^fnNode.itsNeedsActivation = true;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^for  ( int i = -7; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^FunctionNode fn = fnNode .getFunctionName (  )  ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() - 7  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^if  ( fn.getFunctionType (  ) > FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^if  ( fn .getFunctionNode ( i )  == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != functionCount )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() + 6  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( name != false && name.length (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^String name = fn .getFunctionNode ( functionIndex )  ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() + 3  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != -5 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() + 1  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( name != false ) {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P2_Replace_Operator]^for  ( int i = 0; i == functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^for  ( int i = -4; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^for  ( int i = 1; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^if  ( FunctionNode.FUNCTION_EXPRESSION_STATEMENT.getFunctionType (  ) == fn ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^if  ( fn .getFunctionNode ( functionIndex )  == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( fnNode .getFunctionNode ( functionType )  == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != 1 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( name != this ) {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() - 2  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length (  )  != -9 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() - 1  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  (  name.equals (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^if  ( fnNode.getFunctionNode (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^String name = fn .getFunctionNode ( functionIndex )  ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() - 5  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P1_Replace_Type]^for  (  long  i = 0; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^for  ( int i = ; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P8_Replace_Mix]^String name = fnNode .getFunctionNode ( i )  ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P3_Replace_Literal]^if  ( name != null && name.length() + 0  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^fnNode.putIntProp ( Node.FUNCTION_PROP, i ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^fnNode.putIntProp ( Node.FUNCTION_PROP ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P7_Replace_Invocation]^fnNode .putProp (  )  ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^338^339^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ; return fnNode;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^ref.putProp ( Node.NAME_PROP, name ) ;fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P11_Insert_Donor_Statement]^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P5_Replace_Variable]^return fn;^339^^^^^324^354^return fnNode;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[P14_Delete_Statement]^^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;parent.addChildToBack ( child ) ;^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;parent.addChildToBack ( child ) ;^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;parent.addChildToBack ( child ) ;^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;parent.addChildToBack ( child ) ;^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;parent.addChildToBack ( child ) ;^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;parent.addChildToBack ( child ) ;^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;parent.addChildToBack ( child ) ;^349^^^^^347^350^parent.addChildToBack ( child ) ;^[CLASS] IRFactory  [METHOD] addChildToBack [RETURN_TYPE] void   Node parent Node child [VARIABLES] Parser  parser  Node  child  parent  boolean  
[P4_Replace_Constructor]^return new Node ( Token.WHILE,  body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.WHILE, cond,  lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.WHILE, cond, body,  charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.WHILE, cond, body, lineno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node (  cond, body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.WHILE, lineno, body, cond, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.WHILE, cond, charno, lineno, body ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.WHILE, cond, body, charno, lineno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( cond, Token.WHILE, body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P8_Replace_Mix]^return new Node ( Token.WHILE, cond, body, lineno, lineno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.WHILE, charno, body, lineno, cond ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.WHILE, cond, lineno, body, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P8_Replace_Mix]^return new Node ( Token.WHILE, cond, cond, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.DO,  cond, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.DO, body,  lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.DO, body, cond,  charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.DO, body, cond, lineno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.DO, body, body, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.DO, body, cond, lineno, lineno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node (  body, cond, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.DO, cond, body, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.DO, body, cond, charno, lineno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( cond, body, Token.DO, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.DO, cond, cond, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( Token.DO, body, cond, charno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P5_Replace_Variable]^return new Node ( charno, body, cond, lineno, Token.DO ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[P4_Replace_Constructor]^return new Node ( Token.FOR,  test, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P4_Replace_Constructor]^return new Node ( Token.FOR, init,  incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P4_Replace_Constructor]^return new Node ( Token.FOR, init, test,  body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P4_Replace_Constructor]^return new Node ( Token.FOR, init, test, incr,  lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P4_Replace_Constructor]^return new Node ( Token.FOR, init, test, incr, body,  charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P4_Replace_Constructor]^return new Node ( Token.FOR, init, test, incr, body, lineno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, test, test, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, init, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, test, test, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, test, incr, init, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node (  init, test, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, incr, test, init, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, test, init, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, test, body, incr, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, body, test, incr, init, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, test, incr, body, charno, lineno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( init, Token.FOR, test, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, test, incr, test, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, incr, test, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( incr, init, test, Token.FOR, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, body, incr, test, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( Token.FOR, init, test, charno, body, lineno, incr ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P5_Replace_Variable]^return new Node ( body, init, test, incr, Token.FOR, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[P4_Replace_Constructor]^return new Node ( Token.FOR,  obj, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P4_Replace_Constructor]^return new Node ( Token.FOR, lhs,  body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P4_Replace_Constructor]^return new Node ( Token.FOR, lhs, obj,  lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P4_Replace_Constructor]^return new Node ( Token.FOR, lhs, obj, body,  charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P4_Replace_Constructor]^return new Node ( Token.FOR, lhs, obj, body, lineno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, lhs, lhs, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, lhs, obj, lhs, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, lhs, obj, body, charno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, lhs, obj, body, lineno, lineno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node (  lhs, obj, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, body, obj, lhs, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, obj, lhs, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, lhs, body, obj, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, lhs, obj, body, charno, lineno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( charno, lhs, obj, body, lineno, Token.FOR ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P8_Replace_Mix]^return new Node ( Token.FOR, lhs, obj, obj, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( Token.FOR, obj, obj, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P5_Replace_Variable]^return new Node ( obj, lhs, Token.FOR, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[P2_Replace_Operator]^if  ( finallyBlock != null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P8_Replace_Mix]^if  ( finallyBlock == true )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P9_Replace_Statement]^if  ( label == null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P9_Replace_Statement]^if  ( info != null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P9_Replace_Statement]^if  ( catchCond == null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P9_Replace_Statement]^if  ( namespace != null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P9_Replace_Statement]^if  ( namespace == null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P15_Unwrap_Block]^return new com.google.javascript.rhino.Node(Token.TRY, tryBlock, catchBlocks, lineno, charno);^393^394^395^396^^390^399^if  ( finallyBlock == null )  { return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P16_Remove_Block]^^393^394^395^396^^390^399^if  ( finallyBlock == null )  { return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY,  catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY, tryBlock,  lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY, tryBlock, catchBlocks,  charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, finallyBlock, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, finallyBlock, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, catchBlocks, charno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node (  tryBlock, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, catchBlocks, tryBlock, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, lineno, catchBlocks, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, catchBlocks, charno, lineno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( charno, tryBlock, catchBlocks, lineno, Token.TRY ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( tryBlock, Token.TRY, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P8_Replace_Mix]^return new Node ( Token.TRY, tryBlock, tryBlock, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, lineno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, charno, lineno, catchBlocks ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( lineno, tryBlock, catchBlocks, Token.TRY, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY,  catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY, tryBlock,  finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY, tryBlock, catchBlocks,  lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock,  charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, finallyBlock, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, catchBlocks, tryBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( 4, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node (  tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, finallyBlock, catchBlocks, tryBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( catchBlocks, tryBlock, Token.TRY, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, finallyBlock, catchBlocks, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, charno, lineno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P8_Replace_Mix]^return new Node ( Token.TRY, tryBlock, catchBlocks, catchBlocks, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, finallyBlock, catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, lineno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, lineno, catchBlocks, finallyBlock, tryBlock, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( Token.TRY, charno, catchBlocks, finallyBlock, lineno, tryBlock ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P5_Replace_Variable]^return new Node ( finallyBlock, tryBlock, catchBlocks, Token.TRY, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[P4_Replace_Constructor]^return new Node ( Token.WITH,  body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P4_Replace_Constructor]^return new Node ( Token.WITH, obj,  lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P4_Replace_Constructor]^return new Node ( Token.WITH, obj, body,  charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P4_Replace_Constructor]^return new Node ( Token.WITH, obj, body, lineno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( Token.WITH, body, body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( Token.WITH, obj, obj, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( Token.WITH, obj, body, charno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node (  obj, body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( Token.WITH, body, obj, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( Token.WITH, lineno, body, obj, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( Token.WITH, obj, body, charno, lineno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( obj, Token.WITH, body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P8_Replace_Mix]^return new Node ( Token.WITH, obj, body, lineno, lineno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( 0, obj, body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P5_Replace_Variable]^return new Node ( Token.WITH, obj, charno, lineno, body ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[P7_Replace_Invocation]^getLanguageVersion (  ) ;^418^^^^^416^421^setRequiresActivation (  ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P14_Delete_Statement]^^418^419^^^^416^421^setRequiresActivation (  ) ; Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P4_Replace_Constructor]^Node result = new Node ( Token.DOTQUERY,  body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P4_Replace_Constructor]^Node result = new Node ( Token.DOTQUERY, obj,  lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P4_Replace_Constructor]^Node result = new Node ( Token.DOTQUERY, obj, body,  charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P4_Replace_Constructor]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, result, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node (  obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, body, obj, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( body, obj, Token.DOTQUERY, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, obj, body, charno, lineno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( charno, obj, body, lineno, Token.DOTQUERY ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( obj, Token.DOTQUERY, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, body, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, obj, obj, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, obj, body, charno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, lineno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( 0, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^Node result = new Node ( Token.DOTQUERY, obj, charno, lineno, body ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P5_Replace_Variable]^return obj;^420^^^^^416^421^return result;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[P1_Replace_Type]^short  length = elems.size (  ) ;^426^^^^^423^445^int length = elems.size (  ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^int length = elems.size() + 9 ;^426^^^^^423^445^int length = elems.size (  ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P7_Replace_Invocation]^int length = elems.get (  ) ;^426^^^^^423^445^int length = elems.size (  ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^int nodeType = left.getType (  ) ;int length = elems.size (  ) ;^426^^^^^423^445^int length = elems.size (  ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^int length = elems.size() - 3 ;^426^^^^^423^445^int length = elems.size (  ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P14_Delete_Statement]^^426^427^^^^423^445^int length = elems.size (  ) ; int[] skipIndexes = null;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P2_Replace_Operator]^if  ( skipCount >= 0 )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^if  ( skipCount != 2 )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^if  ( length != 0 )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^if  ( skipCount != 4 )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( functionCount != 0 )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P15_Unwrap_Block]^skipIndexes = new int[skipCount];^428^429^430^^^423^445^if  ( skipCount != 0 )  { skipIndexes = new int[skipCount]; }^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P16_Remove_Block]^^428^429^430^^^423^445^if  ( skipCount != 0 )  { skipIndexes = new int[skipCount]; }^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P13_Insert_Block]^if  ( skipCount != 0 )  {     array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ; }^428^^^^^423^445^[Delete]^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^skipIndexes =  new int[length];^429^^^^^423^445^skipIndexes = new int[skipCount];^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P13_Insert_Block]^if  ( skipCount != 0 )  {     skipIndexes = new int[skipCount]; }^429^^^^^423^445^[Delete]^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^skipIndexes =  new int[lineno];^429^^^^^423^445^skipIndexes = new int[skipCount];^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P4_Replace_Constructor]^Node array = new Node ( Token.ARRAYLIT,  charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P4_Replace_Constructor]^Node array = new Node ( Token.ARRAYLIT, lineno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node ( Token.ARRAYLIT, skipCount, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node (  lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node ( lineno, Token.ARRAYLIT, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node ( Token.ARRAYLIT, charno, lineno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^Node array = new Node ( Token.ARRAYLIT, lineno, skipCount ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node ( Token.ARRAYLIT, length, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node ( Token.ARRAYLIT, lineno, lineno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node ( 2, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node array = new Node ( charno, lineno, Token.ARRAYLIT ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P2_Replace_Operator]^if  ( elem == null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^if  ( array != null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^if  ( elem != false )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( label == null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( target == null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( info != null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( child == null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( namespace != null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( namespace == null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P15_Unwrap_Block]^array.addChildToBack(elem);^434^435^436^437^438^423^445^if  ( elem != null )  { array.addChildToBack ( elem ) ; } else { skipIndexes[j] = i; ++j; }^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P16_Remove_Block]^^434^435^436^437^438^423^445^if  ( elem != null )  { array.addChildToBack ( elem ) ; } else { skipIndexes[j] = i; ++j; }^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^skipIndexes[j]  = null ;^437^^^^^423^445^skipIndexes[j] = i;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P7_Replace_Invocation]^array .addChildToBack ( array )  ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P14_Delete_Statement]^^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;array.addChildToBack ( elem ) ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;array.addChildToBack ( elem ) ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^object.addChildToBack ( n ) ;array.addChildToBack ( elem ) ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;array.addChildToBack ( elem ) ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;array.addChildToBack ( elem ) ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;array.addChildToBack ( elem ) ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;array.addChildToBack ( elem ) ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P1_Replace_Type]^for  (  long  i = 0, j = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P2_Replace_Operator]^for  ( int i = 0, j = 0; i < length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P2_Replace_Operator]^for  ( int i = 0, j = 0; i <= length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^for  ( int i = 3, j = 3; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^for  ( int i = length, j = length; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^for  ( skipCountnt i = 0, j = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^for  ( int i = 0, j = 0; i != skipCount; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^for  ( int i = 0, skipCount = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^for  ( int i = 0 = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^for  ( jnt i = 0, i = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^for  ( lengthnt i = 0, j = 0; i != i; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^if  ( elem != true )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^skipIndexes[j] = skipCount;^437^^^^^423^445^skipIndexes[j] = i;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^skipIndexes[j]  =  skipIndexes[j] ;^437^^^^^423^445^skipIndexes[j] = i;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node elem =  ( Node ) elems.get ( lineno ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node elem =  ( Node ) i.get ( elems ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^Node n =  ( Node ) obj.get ( i ) ;Node elem =  ( Node ) elems.get ( i ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^Node elem =  ( Node ) elems.get ( skipCount ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P14_Delete_Statement]^^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^n =  ( Node ) obj.get ( i + 1 ) ;Node elem =  ( Node ) elems.get ( i ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P7_Replace_Invocation]^array .addChildToBack ( elem )  ;^435^^^^^423^445^array.addChildToBack ( elem ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P1_Replace_Type]^for  (  short  i = 0, j = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^for  ( int i = 7, j = 7; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^for  ( int i = 8, j = 8; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P2_Replace_Operator]^if  ( skipCount == 0 )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P3_Replace_Literal]^if  ( skipCount != -2 )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^if  ( length != 0 )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^if  ( skipCount != 2 )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P9_Replace_Statement]^if  ( functionCount != 0 )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P15_Unwrap_Block]^array.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);^441^442^443^^^423^445^if  ( skipCount != 0 )  { array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ; }^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P16_Remove_Block]^^441^442^443^^^423^445^if  ( skipCount != 0 )  { array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ; }^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P13_Insert_Block]^if  ( skipCount != 0 )  {     skipIndexes = new int[skipCount]; }^441^^^^^423^445^[Delete]^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P5_Replace_Variable]^array.putProp ( Node.SKIP_INDEXES_PROP ) ;^442^^^^^423^445^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P14_Delete_Statement]^^442^^^^^423^445^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^ref.putProp ( Node.NAME_PROP, name ) ;array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^442^^^^^423^445^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P11_Insert_Donor_Statement]^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^442^^^^^423^445^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P13_Insert_Block]^if  ( skipCount != 0 )  {     array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ; }^442^^^^^423^445^[Delete]^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P7_Replace_Invocation]^array .putProp (  )  ;^442^^^^^423^445^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P8_Replace_Mix]^return elem;^444^^^^^423^445^return array;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[P4_Replace_Constructor]^Node object = new Node ( Token.OBJECTLIT,  charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P4_Replace_Constructor]^Node object = new Node ( Token.OBJECTLIT, lineno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node object = new Node ( Token.OBJECTLIT, lineno, lineno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node object = new Node (  lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node object = new Node ( Token.OBJECTLIT, charno, lineno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node object = new Node ( charno, lineno, Token.OBJECTLIT ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P8_Replace_Mix]^Node object = new Node ( Token.OBJECTLIT, lineno, i ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node object = new Node ( Token.OBJECTLIT, i, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node object = new Node ( lineno, Token.OBJECTLIT, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P1_Replace_Type]^for  (  short  i = 0; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P2_Replace_Operator]^for  ( int i = 0; i <= obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P2_Replace_Operator]^for  <<  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^for  ( int i = -5; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^for  ( int i = 0; i < obj.size (  ) ; i += 7 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^for  ( int i = 0; i < obj.size() - 5 ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^for  ( linenont i = 0; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^for  ( objnt i = 0; i < i.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P7_Replace_Invocation]^for  ( int i = 0; i < obj.get (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P8_Replace_Mix]^for  ( linenont i = 0; i < obj.get (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P2_Replace_Operator]^n =  ( Node ) obj.get ( i  >  1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^n =  ( Node ) obj.get ( i + lineno ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^n =  ( Node ) obj.get ( lineno + 1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^n =  ( Node ) i.get ( obj + 1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P8_Replace_Mix]^n =  ( Node ) obj.get ( i + 2 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node n =  ( Node ) obj.get ( lineno ) ;^454^^^^^450^461^Node n =  ( Node ) obj.get ( i ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^Node n =  ( Node ) i.get ( obj ) ;^454^^^^^450^461^Node n =  ( Node ) obj.get ( i ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node elem =  ( Node ) elems.get ( i ) ;Node n =  ( Node ) obj.get ( i ) ;^454^^^^^450^461^Node n =  ( Node ) obj.get ( i ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P14_Delete_Statement]^^454^455^^^^450^461^Node n =  ( Node ) obj.get ( i ) ; object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^n =  ( Node ) obj.get ( i + 1 ) ;Node n =  ( Node ) obj.get ( i ) ;^454^^^^^450^461^Node n =  ( Node ) obj.get ( i ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P14_Delete_Statement]^^455^456^^^^450^461^object.addChildToBack ( n ) ; n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;object.addChildToBack ( n ) ;^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;object.addChildToBack ( n ) ;^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;object.addChildToBack ( n ) ;^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;object.addChildToBack ( n ) ;^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;object.addChildToBack ( n ) ;^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;object.addChildToBack ( n ) ;^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;object.addChildToBack ( n ) ;^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P14_Delete_Statement]^^456^457^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ; object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node elem =  ( Node ) elems.get ( i ) ;n =  ( Node ) obj.get ( i + 1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^Node n =  ( Node ) obj.get ( i ) ;n =  ( Node ) obj.get ( i + 1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P8_Replace_Mix]^object .addChildToBack ( n )  ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P14_Delete_Statement]^^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^array.addChildToBack ( elem ) ;object.addChildToBack ( n ) ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^parent.addChildToBack ( child ) ;object.addChildToBack ( n ) ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( args ) ;object.addChildToBack ( n ) ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^caseNode.addChildToBack ( statements ) ;object.addChildToBack ( n ) ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^switchNode.addChildToBack ( caseNode ) ;object.addChildToBack ( n ) ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( statements ) ;object.addChildToBack ( n ) ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P11_Insert_Donor_Statement]^result.addChildToBack ( name ) ;object.addChildToBack ( n ) ;^457^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P2_Replace_Operator]^for  ( int i -= 0; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^for  ( int i = 0; i < obj.size (  ) ; i += -6 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^for  ( int i = 0; i < obj.size() - 0 ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P8_Replace_Mix]^for  ( int i = 0; i < obj.size (  ) ; i += 0  )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P2_Replace_Operator]^n =  ( Node ) obj.get ( i  |  1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^n =  ( Node ) obj.get ( i + i ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P8_Replace_Mix]^n =  ( Node ) obj.get ( i + 1 + 2 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^for  ( int i = 0; i < obj.size() + 0 ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^for  ( int i = 0; i < obj.size() - 9 ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P14_Delete_Statement]^^453^454^455^456^457^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  { Node n =  ( Node ) obj.get ( i ) ; object.addChildToBack ( n ) ; n =  ( Node ) obj.get ( i + 1 ) ; object.addChildToBack ( n ) ; }^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P14_Delete_Statement]^^455^^^^^450^461^object.addChildToBack ( n ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P2_Replace_Operator]^n =  ( Node ) obj.get ( i  ==  1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P3_Replace_Literal]^n =  ( Node ) obj.get ( i + charno ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P5_Replace_Variable]^return n;^460^^^^^450^461^return object;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[P2_Replace_Operator]^return flags.length (  )  != 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P3_Replace_Literal]^return flags.length() - 8  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString (  lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string,  charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, lineno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return flags.length (  )  == 0 ? new Node (  Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return string.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, charno, lineno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return flags.length (  )  == 0 ? new Node ( string, Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return flags.equals (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newNumber ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node .newString ( flags )  , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^? new Node ( Token.REGEXP, Node.newString (  lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^? new Node ( Token.REGEXP, Node.newString ( string,  charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^? new Node ( Token.REGEXP, Node.newString ( string, lineno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^? new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^? new Node ( Token.REGEXP, Node.newString ( string, lineno, lineno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^? new Node (  Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^? new Node ( string, Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^? new Node ( Token.REGEXP, Node.newString ( lineno, string, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^? new Node ( charno, Node.newString ( string, lineno, Token.REGEXP ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^? new Node ( Token.REGEXP, Node.newNumber ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^: new Node ( Token.REGEXP, Node.newString (  lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^: new Node ( Token.REGEXP, Node.newString ( string,  charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^: new Node ( Token.REGEXP, Node.newString ( string, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P4_Replace_Constructor]^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString (  lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^: new Node (  Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^: new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , Node.newString ( string, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^: new Node ( Token.REGEXP, Node.newString ( string, charno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^: new Node ( flags, Node.newString ( string, lineno, charno ) , Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^: new Node ( string, Node.newString ( Token.REGEXP, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^: new Node ( Token.REGEXP, Node.newNumber ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^: new Node ( Token.REGEXP, Node .newString ( string )  , Node^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^: new Node ( Token.REGEXP, Node.newString ( string, lineno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P1_Replace_Type]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newchar ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^return string.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^return string.equals (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( flags, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string, charno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString (  lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string,  charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string, lineno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( charno, lineno, string ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string, charno, lineno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^Node.newNumber ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( flags, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString (  lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string,  charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( lineno, string, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string, charno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^Node.newNumber ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P8_Replace_Mix]^Node.newNumber ( string, lineno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( string, lineno, charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( flags, charno, charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString (  lineno, charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( flags,  charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( flags, lineno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( charno, lineno, flags ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P5_Replace_Variable]^Node.newString ( flags, charno, lineno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P7_Replace_Invocation]^Node.newNumber ( flags, lineno, charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P14_Delete_Statement]^^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[P2_Replace_Operator]^if  ( ifFalse != null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^if  ( ifFalse == null ) return new Node ( Token.IF,  ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^if  ( ifFalse == null ) return new Node ( Token.IF, cond,  lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue,  charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifTrue == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifFalse == null ) return new Node ( Token.IF, ifFalse, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifFalse, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, charno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifFalse == null ) return new Node (  cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( Token.IF == null ) return new Node ( ifFalse, cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifFalse == null ) return new Node ( Token.IF, ifTrue, cond, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, charno, lineno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^if  ( ifFalse == null ) return new Node ( charno, cond, ifTrue, lineno, Token.IF ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P8_Replace_Mix]^if  ( ifFalse == false ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P15_Unwrap_Block]^return new com.google.javascript.rhino.Node(Token.IF, cond, ifTrue, lineno, charno);^483^484^485^486^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ; return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P16_Remove_Block]^^483^484^485^486^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ; return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF,  ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF, cond,  lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF, cond, ifTrue,  charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF, cond, ifTrue, lineno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, ifFalse, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifFalse, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node (  cond, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, lineno, ifTrue, cond, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, ifTrue, cond, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( lineno, cond, ifTrue, Token.IF, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifTrue, charno, lineno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, ifTrue, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifTrue, lineno, lineno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, charno, ifTrue, lineno, cond ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, charno, lineno, ifTrue ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P8_Replace_Mix]^return new Node ( Token.IF, cond, ifTrue, charno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, lineno, ifTrue, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( cond, Token.IF, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( charno, cond, ifTrue, lineno, Token.IF ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF,  ifTrue, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF, cond,  ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF, cond, ifTrue,  lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF, cond, ifTrue, ifFalse,  charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, ifTrue, ifTrue, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, cond, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifTrue, cond, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifTrue, ifFalse, charno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node (  cond, ifTrue, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, ifTrue, cond, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, lineno, ifFalse, ifTrue, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( ifFalse, cond, ifTrue, Token.IF, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifTrue, ifFalse, charno, lineno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( lineno, cond, ifTrue, ifFalse, Token.IF, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifFalse, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, ifFalse, ifTrue, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.IF, cond, charno, ifFalse, lineno, ifTrue ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.HOOK,  ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.HOOK, cond,  ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.HOOK, cond, ifTrue,  lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse,  charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, ifFalse, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, ifFalse, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, ifTrue, ifTrue, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, lineno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node (  cond, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, ifFalse, ifTrue, cond, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, ifFalse, ifTrue, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, charno, lineno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, charno, ifTrue, ifFalse, lineno, cond ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( ifTrue, cond, Token.HOOK, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, cond, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, ifTrue, cond, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( null, cond, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, ifTrue, cond, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( Token.HOOK, cond, ifTrue, lineno, ifFalse, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P5_Replace_Variable]^return new Node ( cond, Token.HOOK, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[P4_Replace_Constructor]^return new Node (  child, lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P4_Replace_Constructor]^return new Node ( nodeType,  lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P4_Replace_Constructor]^return new Node ( nodeType, child,  charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P4_Replace_Constructor]^return new Node ( nodeType, child, lineno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P5_Replace_Variable]^return new Node ( charno, child, lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P5_Replace_Variable]^return new Node ( nodeType, child, nodeType, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P5_Replace_Variable]^return new Node ( nodeType, child, lineno, nodeType ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P5_Replace_Variable]^return new Node ( lineno, child, nodeType, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P5_Replace_Variable]^return new Node ( nodeType, charno, lineno, child ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P5_Replace_Variable]^return new Node ( nodeType, lineno, child, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P5_Replace_Variable]^return new Node ( nodeType, child, charno, lineno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P8_Replace_Mix]^return new Node ( nodeType, child, charno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[P1_Replace_Type]^short  type = Node.NON_SPECIALCALL;^504^^^^^502^525^int type = Node.NON_SPECIALCALL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^int type = node.getType (  ) ;int type = Node.NON_SPECIALCALL;^504^^^^^502^525^int type = Node.NON_SPECIALCALL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P12_Insert_Condition]^if  ( type != Node.NON_SPECIALCALL )  { int type = Node.NON_SPECIALCALL; }^504^^^^^502^525^int type = Node.NON_SPECIALCALL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P2_Replace_Operator]^if  ( child.getType (  )  >= Token.NAME )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.NAME )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P6_Replace_Expression]^if  ( child.getType() == Token.GETPROP )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^if  ( child.Node (  )  == Token.NAME )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.NAME )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P2_Replace_Operator]^} else if  ( child.getType (  )  != Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^} else if  ( node.getType (  )  == Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^} else if  ( Token.GETPROP.getType (  )  == child )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P6_Replace_Expression]^} else {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^} else if  ( child.Node (  )  == Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P15_Unwrap_Block]^java.lang.String name = child.getLastChild().getString(); if (name.equals("eval")) {    type = Node.SPECIALCALL_EVAL;};^512^513^514^515^516^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  { String name = child.getLastChild (  ) .getString (  ) ; if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P16_Remove_Block]^^512^513^514^515^516^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  { String name = child.getLastChild (  ) .getString (  ) ; if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P13_Insert_Block]^if  ( name.equals ( "eval" )  )  {     type = Node.SPECIALCALL_EVAL; }else     if  ( name.equals ( "With" )  )  {         type = Node.SPECIALCALL_WITH;     }^512^^^^^502^525^[Delete]^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "vaval" )  )  {^514^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P15_Unwrap_Block]^type = Node.SPECIALCALL_EVAL;^514^515^516^^^502^525^if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P16_Remove_Block]^^514^515^516^^^502^525^if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P13_Insert_Block]^if  ( name.equals ( "With" )  )  {     type = Node.SPECIALCALL_WITH; }^514^^^^^502^525^[Delete]^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^type  =  type ;^515^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^type = Node.SPECIALCALL_WITH;type = Node.SPECIALCALL_EVAL;^515^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P12_Insert_Condition]^if  ( type != Node.NON_SPECIALCALL )  { type = Node.SPECIALCALL_EVAL; }^515^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^type ;^515^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P1_Replace_Type]^char name = child.getLastChild (  ) .getchar (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^String name = node.getLastChild (  ) .getString (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^String name = child.getLastChild (  )  .newString ( name )  ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^String name = child.Node (  ) .getString (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = child.getLastChild (  ) .getString (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^String name = fn.getFunctionName (  ) ;String name = child.getLastChild (  ) .getString (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^String name = node.Node (  ) .getString (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P14_Delete_Statement]^^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^String name = child .getString (  )  .getString (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "v" )  )  {^514^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^} else if  ( node .setType (  )   == Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^String name = node.getLastChild (  )  .newString ( name )  ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "v" )  )  {^507^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P15_Unwrap_Block]^type = Node.SPECIALCALL_EVAL;^507^508^509^510^511^502^525^if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; } else if  ( name.equals ( "With" )  )  { type = Node.SPECIALCALL_WITH; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P16_Remove_Block]^^507^508^509^510^511^502^525^if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; } else if  ( name.equals ( "With" )  )  { type = Node.SPECIALCALL_WITH; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( Token.GETPROP )  )  {     String name = child.getLastChild (  ) .getString (  ) ;     if  ( name.equals ( "eval" )  )  {         type = Node.SPECIALCALL_EVAL;     } }^507^^^^^502^525^[Delete]^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P6_Replace_Expression]^} else {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P9_Replace_Statement]^} else if  ( "length".equals ( name )  )  {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P15_Unwrap_Block]^type = Node.SPECIALCALL_WITH;^509^510^511^^^502^525^} else if  ( name.equals ( "With" )  )  { type = Node.SPECIALCALL_WITH; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P16_Remove_Block]^^509^510^511^^^502^525^} else if  ( name.equals ( "With" )  )  { type = Node.SPECIALCALL_WITH; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P13_Insert_Block]^if  ( name.equals ( "eval" )  )  {     type = Node.SPECIALCALL_EVAL; }^509^^^^^502^525^[Delete]^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^type  =  type ;^510^^^^^502^525^type = Node.SPECIALCALL_WITH;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^type = Node.SPECIALCALL_EVAL;type = Node.SPECIALCALL_WITH;^510^^^^^502^525^type = Node.SPECIALCALL_WITH;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P12_Insert_Condition]^if  ( type != Node.NON_SPECIALCALL )  { type = Node.SPECIALCALL_WITH; }^510^^^^^502^525^type = Node.SPECIALCALL_WITH;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^} else if  ( name.equals ( "Withit" )  )  {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^type ;^508^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^type = Node.SPECIALCALL_WITH;type = Node.SPECIALCALL_EVAL;^508^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P12_Insert_Condition]^if  ( type != Node.NON_SPECIALCALL )  { type = Node.SPECIALCALL_EVAL; }^508^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^type  = null ;^510^^^^^502^525^type = Node.SPECIALCALL_WITH;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^type  =  type ;^508^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^type = 1;^510^^^^^502^525^type = Node.SPECIALCALL_WITH;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^type ;^510^^^^^502^525^type = Node.SPECIALCALL_WITH;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P1_Replace_Type]^char name = child.getchar (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^String name = node.getString (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^String name = child.Node (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^String name = child.getLastChild (  ) .getString (  ) ;String name = child.getString (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^int childType = child.getType (  ) ;String name = child.getString (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^String name = fn.getFunctionName (  ) ;String name = child.getString (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^int type = node.getType (  ) ;String name = child.getString (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^String name = child .newString ( name )  ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P14_Delete_Statement]^^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "evale" )  )  {^507^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "evalv" )  )  {^507^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^} else if  ( name.equals ( "Witith" )  )  {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^}  if  ( name.equals ( "With" )  )  {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^} else if  ( name.equals ( "tith" )  )  {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^} else if  ( name.equals ( "WithW" )  )  {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P2_Replace_Operator]^} else if  ( child.getType (  )  >= Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^} else if  ( child .setType (  )   == Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "evaleva" )  )  {^514^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "evval" )  )  {^514^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^type = 0;^515^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "vval" )  )  {^507^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^} else if  ( name.equals ( "Withi" )  )  {^509^^^^^502^525^} else if  ( name.equals ( "With" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P3_Replace_Literal]^if  ( name.equals ( "ev" )  )  {^514^^^^^502^525^if  ( name.equals ( "eval" )  )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P4_Replace_Constructor]^Node node = new Node (  child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P4_Replace_Constructor]^Node node = new Node ( nodeType,  lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P4_Replace_Constructor]^Node node = new Node ( nodeType, child,  charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P4_Replace_Constructor]^Node node = new Node ( nodeType, child, lineno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( type, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( nodeType, node, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( nodeType, child, type, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( nodeType, child, lineno, type ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( lineno, child, nodeType, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( nodeType, lineno, child, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( charno, child, lineno, nodeType ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^Node node = new Node ( nodeType, child, charno, lineno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node node = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P2_Replace_Operator]^if  ( type >= Node.NON_SPECIALCALL )  {^519^^^^^502^525^if  ( type != Node.NON_SPECIALCALL )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^if  ( nodeType != Node.NON_SPECIALCALL )  {^519^^^^^502^525^if  ( type != Node.NON_SPECIALCALL )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P15_Unwrap_Block]^setRequiresActivation(); node.putIntProp(Node.SPECIALCALL_PROP, type);^519^520^521^522^523^502^525^if  ( type != Node.NON_SPECIALCALL )  {  setRequiresActivation (  ) ; node.putIntProp ( Node.SPECIALCALL_PROP, type ) ; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P16_Remove_Block]^^519^520^521^522^523^502^525^if  ( type != Node.NON_SPECIALCALL )  {  setRequiresActivation (  ) ; node.putIntProp ( Node.SPECIALCALL_PROP, type ) ; }^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^getLanguageVersion (  ) ;^521^^^^^502^525^setRequiresActivation (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P14_Delete_Statement]^^521^522^^^^502^525^setRequiresActivation (  ) ; node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^node.putIntProp ( Node.SPECIALCALL_PROP, nodeType ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^node.putIntProp ( Node.SPECIALCALL_PROP ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P14_Delete_Statement]^^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^ref.putProp ( Node.NAME_PROP, name ) ;node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P11_Insert_Donor_Statement]^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P14_Delete_Statement]^^521^^^^^502^525^setRequiresActivation (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P7_Replace_Invocation]^node .putProp (  )  ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P8_Replace_Mix]^return child;^524^^^^^502^525^return node;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[P5_Replace_Variable]^child = makeReference ( n ) ;^530^^^^^529^556^child = makeReference ( child ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P7_Replace_Invocation]^child = createString ( child ) ;^530^^^^^529^556^child = makeReference ( child ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^child = createString ( n ) ;^530^^^^^529^556^child = makeReference ( child ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P14_Delete_Statement]^^530^^^^^529^556^child = makeReference ( child ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P2_Replace_Operator]^if  ( child != null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P6_Replace_Expression]^if  ( nodeType == Token.DEC )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^if  ( n == false )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P9_Replace_Statement]^if  ( label == null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P9_Replace_Statement]^if  ( target == null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P9_Replace_Statement]^if  ( info != null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P9_Replace_Statement]^if  ( catchCond == null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P9_Replace_Statement]^if  ( elem != null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P9_Replace_Statement]^if  ( namespace == null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P2_Replace_Operator]^if  ( nodeType != Token.DEC )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^if  ( Token.DEC == nodeType )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^if  ( lineno == Token.DEC )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P15_Unwrap_Block]^msg = "msg.bad.decr";^533^534^535^536^537^529^556^if  ( nodeType == Token.DEC )  { msg = "msg.bad.decr"; } else { msg = "msg.bad.incr"; }^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P16_Remove_Block]^^533^534^535^536^537^529^556^if  ( nodeType == Token.DEC )  { msg = "msg.bad.decr"; } else { msg = "msg.bad.incr"; }^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "";^536^^^^^533^537^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^msg ;^536^^^^^533^537^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^msg = "msg.bad.decr";msg = "msg.bad.incr";^536^^^^^533^537^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "msg.bad.decrmsg.b";^534^^^^^529^556^msg = "msg.bad.decr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^msg  = null ;^534^^^^^529^556^msg = "msg.bad.decr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^msg = "msg.bad.incr";msg = "msg.bad.decr";^534^^^^^529^556^msg = "msg.bad.decr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "g.";^534^^^^^529^556^msg = "msg.bad.decr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "msg.bad.incrmsg.";^536^^^^^529^556^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^msg ;^536^^^^^529^556^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^msg = "msg.bad.decr";msg = "msg.bad.incr";^536^^^^^529^556^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^return false;^539^^^^^529^556^return null;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P1_Replace_Type]^char msg;^532^^^^^529^556^String msg;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P7_Replace_Invocation]^parser .getSourceName (  )  ;^538^^^^^529^556^parser.reportError ( msg ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P14_Delete_Statement]^^538^539^^^^529^556^parser.reportError ( msg ) ; return null;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^parser.reportError ( "msg.bad.assign.left" ) ;parser.reportError ( msg ) ;^538^^^^^529^556^parser.reportError ( msg ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P2_Replace_Operator]^if  ( nodeType <= Token.DEC )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "g.sg.bad.incr";^536^^^^^533^537^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^msg  = null ;^536^^^^^533^537^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "msg.bad.decrsg.b";^534^^^^^529^556^msg = "msg.bad.decr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^msg ;^534^^^^^529^556^msg = "msg.bad.decr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "d";^534^^^^^529^556^msg = "msg.bad.decr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^msg = "sg.";^536^^^^^529^556^msg = "msg.bad.incr";^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^return true;^539^^^^^529^556^return null;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P1_Replace_Type]^short  childType = child.getType (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^int nType = child.getType (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P7_Replace_Invocation]^int childType = child.Node (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P8_Replace_Mix]^int nType = child.Node (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;int childType = child.getType (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^int nodeType = left.getType (  ) ;int childType = child.getType (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^int type = node.getType (  ) ;int childType = child.getType (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P7_Replace_Invocation]^int childType = child .setType (  )  ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P14_Delete_Statement]^^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^return child;^552^^^^^529^556^return n;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P4_Replace_Constructor]^Node n = new Node (  child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P4_Replace_Constructor]^Node n = new Node ( nodeType,  lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P4_Replace_Constructor]^Node n = new Node ( nodeType, child,  charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P4_Replace_Constructor]^Node n = new Node ( nodeType, child, lineno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( childType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( nodeType, child, nodeType, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( nodeType, child, lineno, lineno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( charno, child, lineno, nodeType ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( child, nodeType, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( nodeType, child, charno, lineno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( nodeType, child, lineno, nodeType ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( nodeType, lineno, child, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^Node n = new Node ( lineno, child, nodeType, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node n = new Node ( nodeType, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^n.putIntProp ( Node.INCRDECR_PROP, post ? lineno : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P3_Replace_Literal]^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 1 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P5_Replace_Variable]^n.putIntProp ( Node.INCRDECR_PROP ? 1 : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P14_Delete_Statement]^^551^552^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ; return n;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^ref.putProp ( Node.NAME_PROP, name ) ;n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P11_Insert_Donor_Statement]^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P14_Delete_Statement]^^555^^^^^529^556^throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[P2_Replace_Operator]^if  ( namespace == null || memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P2_Replace_Operator]^if  ( namespace != null && memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P2_Replace_Operator]^if  ( namespace == null && memberTypeFlags != 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P3_Replace_Literal]^if  ( namespace == null && memberTypeFlags == -7 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^if  ( name == null && memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^if  ( namespace == null && nameLineno == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^if  ( namespacespace == null && memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P6_Replace_Expression]^if  ( namespace == null ) {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P6_Replace_Expression]^if  (  memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P6_Replace_Expression]^if  ( target == null )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P15_Unwrap_Block]^if (target == null) {    return createName(name, nameLineno, nameCharno);}; checkActivationName(name, Token.GETPROP); if (com.google.javascript.rhino.ScriptRuntime.isSpecialProperty(name)) {    com.google.javascript.rhino.Node ref = new com.google.javascript.rhino.Node(Token.REF_SPECIAL, target);    ref.putProp(Node.NAME_PROP, name);    return new com.google.javascript.rhino.Node(Token.GET_REF, ref, dotLineno, dotCharno);}; return new com.google.javascript.rhino.Node(Token.GETPROP, target, createString(name, nameLineno, nameCharno), dotLineno, dotCharno);^562^563^564^565^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  { if  ( target == null )  { return createName ( name, nameLineno, nameCharno ) ; }^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P16_Remove_Block]^^562^563^564^565^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  { if  ( target == null )  { return createName ( name, nameLineno, nameCharno ) ; }^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P2_Replace_Operator]^if  ( target != null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^if  ( ref == null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^if  ( target == false )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P9_Replace_Statement]^if  ( label == null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P9_Replace_Statement]^if  ( info != null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P9_Replace_Statement]^if  ( catchCond == null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P9_Replace_Statement]^if  ( child == null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P9_Replace_Statement]^if  ( elem != null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P9_Replace_Statement]^if  ( namespace != null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P9_Replace_Statement]^if  ( namespace == null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P15_Unwrap_Block]^return createName(name, nameLineno, nameCharno);^563^564^565^^^558^581^if  ( target == null )  { return createName ( name, nameLineno, nameCharno ) ; }^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P16_Remove_Block]^^563^564^565^^^558^581^if  ( target == null )  { return createName ( name, nameLineno, nameCharno ) ; }^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P13_Insert_Block]^if  ( catchCond == null )  {     catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ; }^563^^^^^558^581^[Delete]^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( namespace, nameLineno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( name, memberTypeFlags, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( name, nameLineno, nameLineno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName (  nameLineno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( name,  nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( name, nameLineno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( nameCharno, nameLineno, name ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( name, nameCharno, nameLineno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P7_Replace_Invocation]^return createLabel ( name, nameLineno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P13_Insert_Block]^if  ( target == null )  {     return createName ( name, nameLineno, nameCharno ) ; }^564^^^^^558^581^[Delete]^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( name, nameCharno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( name, nameLineno, memberTypeFlags ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^return createLabel ( namespace, nameLineno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P14_Delete_Statement]^^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^if  ( ScriptRuntime.isSpecialProperty ( namespace )  )  {^567^^^^^558^581^if  ( ScriptRuntime.isSpecialProperty ( name )  )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node ref = new com.google.javascript.rhino.Node(Token.REF_SPECIAL, target); ref.putProp(Node.NAME_PROP, name); return new com.google.javascript.rhino.Node(Token.GET_REF, ref, dotLineno, dotCharno);^567^568^569^570^571^558^581^if  ( ScriptRuntime.isSpecialProperty ( name )  )  { Node ref = new Node ( Token.REF_SPECIAL, target ) ; ref.putProp ( Node.NAME_PROP, name ) ; return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ; }^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P16_Remove_Block]^^567^568^569^570^571^558^581^if  ( ScriptRuntime.isSpecialProperty ( name )  )  { Node ref = new Node ( Token.REF_SPECIAL, target ) ; ref.putProp ( Node.NAME_PROP, name ) ; return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ; }^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GET_REF,  dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GET_REF, ref,  dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GET_REF, ref, dotLineno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, target, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, ref, nameLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, ref, dotLineno, nameLineno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node (  ref, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( ref, Token.GET_REF, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( dotLineno, ref, Token.GET_REF, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, ref, dotCharno, dotLineno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^Node ref = new Node ( Token.REF_SPECIAL, ref ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^Node ref = new Node ( Token.REF_SPECIAL ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^Node ref = new Node (  target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^Node ref = new Node ( target, Token.REF_SPECIAL ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, dotLineno, ref, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^Node ref = new Node ( Token.REF_SPECIAL, elem ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^Node n = new Node ( nodeType, child, lineno, charno ) ;Node ref = new Node ( Token.REF_SPECIAL, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.BREAK, lineno, charno ) ;Node ref = new Node ( Token.REF_SPECIAL, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;Node ref = new Node ( Token.REF_SPECIAL, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;Node ref = new Node ( Token.REF_SPECIAL, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;Node ref = new Node ( Token.REF_SPECIAL, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^Node node = new Node ( nodeType, child, lineno, charno ) ;Node ref = new Node ( Token.REF_SPECIAL, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;Node ref = new Node ( Token.REF_SPECIAL, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^ref.putProp ( Node.NAME_PROP, namespace ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^ref.putProp ( Node.NAME_PROP ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P14_Delete_Statement]^^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;ref.putProp ( Node.NAME_PROP, name ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;ref.putProp ( Node.NAME_PROP, name ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;ref.putProp ( Node.NAME_PROP, name ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;ref.putProp ( Node.NAME_PROP, name ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;ref.putProp ( Node.NAME_PROP, name ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;ref.putProp ( Node.NAME_PROP, name ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createName ( nameLineno, name, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, ref, nameCharno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( null, ref, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, dotCharno, dotLineno, ref ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GETPROP,  createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GETPROP, target, createString (  nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GETPROP, target, createString ( name,  nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) ,  dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, ref, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( namespace, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, memberTypeFlags, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, nameCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node (  target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, nameCharno, createString ( name, nameLineno, target ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( nameLineno, name, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, dotLineno, nameCharno ) , nameLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, dotLineno ) , nameCharno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, dotCharno, nameCharno ) , dotLineno, nameLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( dotCharno, target, createString ( name, nameLineno, nameCharno ) , dotLineno, Token.GETPROP ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, target, createBreak ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameCharno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , nameLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, nameLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, name, createString ( target, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameCharno, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, dotCharno ) , dotLineno, nameCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( dotLineno, target, createString ( name, nameLineno, nameCharno ) , Token.GETPROP, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^return new Node ( Token.GETPROP, target, createBreak ( name, nameLineno, nameCharno ) , nameLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^return createLabel ( name, nameLineno, memberTypeFlags ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^checkActivationName ( namespace, Token.GETPROP ) ;^566^^^^^558^581^checkActivationName ( name, Token.GETPROP ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P7_Replace_Invocation]^createString ( name, Token.GETPROP ) ;^566^^^^^558^581^checkActivationName ( name, Token.GETPROP ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P14_Delete_Statement]^^566^^^^^558^581^checkActivationName ( name, Token.GETPROP ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P11_Insert_Donor_Statement]^checkActivationName ( name, Token.NAME ) ;checkActivationName ( name, Token.GETPROP ) ;^566^^^^^558^581^checkActivationName ( name, Token.GETPROP ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P7_Replace_Invocation]^ref .putProp (  )  ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( namespace, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( name, memberTypeFlags, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( name, nameLineno, nameLineno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString (  nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( name,  nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( name, nameLineno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( nameCharno, nameLineno, name ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( name, nameCharno, nameLineno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P7_Replace_Invocation]^createBreak ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P14_Delete_Statement]^^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^if  ( target == true )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( dotCharno, ref, dotLineno, Token.GET_REF ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P14_Delete_Statement]^^569^570^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ; return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^return createLabel ( name, memberTypeFlags, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , nameCharno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( target, Token.GETPROP, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( dotLineno, nameLineno, nameCharno ) , name, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, dotLineno, createString ( name, nameLineno, nameCharno ) , target, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( name, target, createString ( Token.GETPROP, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( null, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, dotCharno, createString ( name, nameLineno, nameCharno ) , dotLineno, target ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( nameCharno, nameLineno, name ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotCharno, dotLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^createString ( namespace, Token.GETPROP ) ;^566^^^^^558^581^checkActivationName ( name, Token.GETPROP ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( name, nameLineno, memberTypeFlags ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^createString ( nameLineno, name, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^Node elem = createString ( namespace ) ;^577^^^^^558^581^Node elem = createString ( name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P7_Replace_Invocation]^Node elem = containsKey ( name ) ;^577^^^^^558^581^Node elem = createString ( name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P14_Delete_Statement]^^577^578^^^^558^581^Node elem = createString ( name ) ; memberTypeFlags |= Node.PROPERTY_FLAG;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^memberTypeFlags | =  memberTypeFlags |;^578^^^^^558^581^memberTypeFlags |= Node.PROPERTY_FLAG;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( ref, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, name, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, ref, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, nameLineno, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, nameLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, nameLineno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet (  namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target,  elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace,  memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem,  dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags,  dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( elem, namespace, target, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, dotLineno, elem, memberTypeFlags, namespace, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, dotLineno, memberTypeFlags, elem, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, dotCharno, dotLineno, memberTypeFlags ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, dotLineno, memberTypeFlags, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P7_Replace_Invocation]^return createElementGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P8_Replace_Mix]^return createElementGet ( target, namespace, elem, memberTypeFlags, nameLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( memberTypeFlags, namespace, elem, target, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, dotCharno, elem, memberTypeFlags, dotLineno, namespace ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, memberTypeFlags, elem, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P14_Delete_Statement]^^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[P2_Replace_Operator]^if  ( namespace == null || memberTypeFlags == 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P2_Replace_Operator]^if  ( namespace != null && memberTypeFlags == 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P2_Replace_Operator]^if  ( namespace == null && memberTypeFlags != 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P3_Replace_Literal]^if  ( namespace == null && memberTypeFlags == lineno )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^if  ( namespace == null && charno == 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P6_Replace_Expression]^if  ( namespace == null ) {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P6_Replace_Expression]^if  (  memberTypeFlags == 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P6_Replace_Expression]^if  ( target == null )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P15_Unwrap_Block]^if (target == null)    throw com.google.javascript.rhino.Kit.codeBug();; return new com.google.javascript.rhino.Node(Token.GETELEM, target, elem, lineno, charno);^588^589^^591^592^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {  if  ( target == null )  throw Kit.codeBug (  ) ; return new Node ( Token.GETELEM, target, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P16_Remove_Block]^^588^589^^591^592^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {  if  ( target == null )  throw Kit.codeBug (  ) ; return new Node ( Token.GETELEM, target, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P2_Replace_Operator]^if  ( target != null )  throw Kit.codeBug (  ) ;^591^^^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^if  ( elem == null )  throw Kit.codeBug (  ) ;^591^^^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P8_Replace_Mix]^if  ( target == false )  throw Kit.codeBug (  ) ;^591^^^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P15_Unwrap_Block]^throw com.google.javascript.rhino.Kit.codeBug();^591^592^593^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ; return new Node ( Token.GETELEM, target, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P16_Remove_Block]^^591^592^593^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ; return new Node ( Token.GETELEM, target, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P8_Replace_Mix]^return false;^591^^^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P4_Replace_Constructor]^return new Node ( Token.GETELEM,  elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P4_Replace_Constructor]^return new Node ( Token.GETELEM, target,  lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P4_Replace_Constructor]^return new Node ( Token.GETELEM, target, elem,  charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P4_Replace_Constructor]^return new Node ( Token.GETELEM, target, elem, lineno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, elem, elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, target, elem, memberTypeFlags, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, target, elem, lineno, memberTypeFlags ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node (  target, elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, charno, elem, lineno, target ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, elem, target, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, target, elem, charno, lineno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( charno, target, elem, lineno, Token.GETELEM ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( target, Token.GETELEM, elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P8_Replace_Mix]^if  ( target == true )  throw Kit.codeBug (  ) ;^591^^^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, target, target, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( Token.GETELEM, target, lineno, elem, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return new Node ( lineno, target, elem, Token.GETELEM, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( elem, namespace, elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, target, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, charno, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, memberTypeFlags, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, memberTypeFlags ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet (  namespace, elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target,  elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace,  memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem,  lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags,  charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( elem, namespace, target, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( namespace, target, elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, memberTypeFlags, elem, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, charno, lineno, memberTypeFlags ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, lineno, memberTypeFlags, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, charno, lineno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P7_Replace_Invocation]^return createElementGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P5_Replace_Variable]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, charno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P14_Delete_Statement]^^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[P11_Insert_Donor_Statement]^Node idNode = right;Node nsNode = null;^601^^^^^600^629^Node nsNode = null;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P2_Replace_Operator]^if  ( namespace == null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^if  ( namespace != this )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( caseExpression != null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( label == null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( target == null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( info != null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( catchCond == null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( elem != null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( namespace.equals ( "*" )  )  {     nsNode = new Node ( Token.NULL, lineno, charno ) ; }else {     nsNode = createName ( namespace, lineno, charno ) ; }^602^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( name.equals ( "eval" )  )  {^604^^^^^600^629^if  ( namespace.equals ( "*" )  )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P15_Unwrap_Block]^nsNode = new com.google.javascript.rhino.Node(Token.NULL, lineno, charno);^604^605^606^607^608^600^629^if  ( namespace.equals ( "*" )  )  { nsNode = new Node ( Token.NULL, lineno, charno ) ; } else { nsNode = createName ( namespace, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P16_Remove_Block]^^604^605^606^607^608^600^629^if  ( namespace.equals ( "*" )  )  { nsNode = new Node ( Token.NULL, lineno, charno ) ; } else { nsNode = createName ( namespace, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, memberTypeFlags, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, lineno, memberTypeFlags ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName (  lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace,  charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, lineno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( lineno, namespace, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, charno, lineno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P7_Replace_Invocation]^nsNode = createLabel ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^nsNode =  createName ( null, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( charno, lineno, namespace ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P14_Delete_Statement]^^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^return Node.newNumber ( number, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, name, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^return createName ( name, nameLineno, nameCharno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^nsNode = new Node ( Token.NULL,  charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^nsNode = new Node ( Token.NULL, lineno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = new Node ( Token.NULL, memberTypeFlags, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = new Node ( Token.NULL, lineno, memberTypeFlags ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = new Node (  lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = new Node ( lineno, Token.NULL, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = new Node ( Token.NULL, charno, lineno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = new Node ( charno, lineno, Token.NULL ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;nsNode = new Node ( Token.NULL, lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;nsNode = new Node ( Token.NULL, lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;nsNode = new Node ( Token.NULL, lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;nsNode = new Node ( Token.NULL, lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;nsNode = new Node ( Token.NULL, lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;nsNode = new Node ( Token.NULL, lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;nsNode = new Node ( Token.NULL, lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, lineno, memberTypeFlags ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName (  lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace,  charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, lineno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( charno, lineno, namespace ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, charno, lineno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P7_Replace_Invocation]^nsNode = createLabel ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^nsNode =  createName ( null, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( namespace, memberTypeFlags, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^nsNode = createName ( lineno, namespace, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P14_Delete_Statement]^^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^return Node.newNumber ( number, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node result = createExprStatement ( n, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, name, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node n = createName ( name, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^return createName ( name, nameLineno, nameCharno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;nsNode = createName ( namespace, lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^nsNode = createLabel ( namespace, lineno, memberTypeFlags ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P3_Replace_Literal]^if  ( namespace.equals ( "" )  )  {^604^^^^^600^629^if  ( namespace.equals ( "*" )  )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^nsNode = createLabel ( namespace, memberTypeFlags, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node temp;Node ref;^610^^^^^600^629^Node ref;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P2_Replace_Operator]^if  ( target != null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^if  ( ref == null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P6_Replace_Expression]^if  ( namespace == null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^if  ( target == true )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( label == null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( info != null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( catchCond == null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( child == null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( elem != null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( namespace != null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P15_Unwrap_Block]^if (namespace == null) {    ref = new com.google.javascript.rhino.Node(Token.REF_NAME, elem, lineno, charno);}else {    ref = new com.google.javascript.rhino.Node(Token.REF_NS_NAME, nsNode, elem, lineno, charno);};^611^612^613^614^615^600^629^if  ( target == null )  { if  ( namespace == null )  { ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P16_Remove_Block]^^611^612^613^614^615^600^629^if  ( target == null )  { if  ( namespace == null )  { ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P2_Replace_Operator]^if  ( namespace != null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^if  ( namespace == false )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( label == null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( target == null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( catchCond == null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( child == null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( elem != null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P15_Unwrap_Block]^ref = new com.google.javascript.rhino.Node(Token.REF_MEMBER, target, elem, lineno, charno);^618^619^620^621^622^611^624^if  ( namespace == null )  { ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P16_Remove_Block]^^618^619^620^621^622^611^624^if  ( namespace == null )  { ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( caseExpression != null )  {     caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ; }else {     caseNode = new Node ( Token.DEFAULT, lineno, charno ) ; }^618^^^^^611^624^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( namespace.equals ( "*" )  )  {     nsNode = new Node ( Token.NULL, lineno, charno ) ; }else {     nsNode = createName ( namespace, lineno, charno ) ; }^618^^^^^611^624^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( namespace == null )  {     ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; }else {     ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^618^^^^^611^624^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER,  nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target,  elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode,  lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem,  charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, ref, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, target, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, ref, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, memberTypeFlags, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, memberTypeFlags ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( this, target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, lineno, nsNode, elem, target, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( elem, target, nsNode, Token.REF_NS_MEMBER, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, charno, elem, lineno, nsNode ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( target, Token.REF_NS_MEMBER, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref =  new Node ( Token.REF_NS_MEMBER, nsNode, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, target, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, lineno, elem, nsNode, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, elem, nsNode, target, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, lineno, elem, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, charno, lineno, elem ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER,  elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER, target,  lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER, target, elem,  charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, ref, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, target, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, charno, elem, lineno, target ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, elem, target, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, elem, charno, lineno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( target, Token.REF_MEMBER, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref =  new Node ( Token.REF_MEMBER, null, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, ref, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, memberTypeFlags ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( elem, target, Token.REF_MEMBER, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, elem, memberTypeFlags, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, charno, lineno, elem ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref =  new Node ( Token.REF_MEMBER, nsNode, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, lineno, elem, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( charno, target, elem, lineno, Token.REF_MEMBER ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( lineno, target, elem, Token.REF_MEMBER, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, ref, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P2_Replace_Operator]^if  ( namespace != null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^if  ( namespace == this )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( label == null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( target == null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( catchCond == null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( child == null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( elem != null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P15_Unwrap_Block]^ref = new com.google.javascript.rhino.Node(Token.REF_NAME, elem, lineno, charno);^612^613^614^615^616^600^629^if  ( namespace == null )  { ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P16_Remove_Block]^^612^613^614^615^616^600^629^if  ( namespace == null )  { ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( caseExpression != null )  {     caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ; }else {     caseNode = new Node ( Token.DEFAULT, lineno, charno ) ; }^612^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( namespace.equals ( "*" )  )  {     nsNode = new Node ( Token.NULL, lineno, charno ) ; }else {     nsNode = createName ( namespace, lineno, charno ) ; }^612^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( namespace == null )  {     ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; }else {     ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ; }^612^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME,  elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME, nsNode,  lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem,  charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, target, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, target, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, memberTypeFlags, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, memberTypeFlags ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, charno, elem, lineno, nsNode ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, elem, nsNode, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, charno, lineno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( elem, nsNode, Token.REF_NS_NAME, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( nsNode, Token.REF_NS_NAME, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NAME,  lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NAME, elem,  charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NAME, elem, lineno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NAME, target, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NAME, elem, memberTypeFlags, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NAME, elem, lineno, memberTypeFlags ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( this, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( elem, Token.REF_NAME, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NAME, elem, charno, lineno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( charno, elem, lineno, Token.REF_NAME ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( lineno, elem, Token.REF_NAME, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME,  elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME, nsNode,  lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem,  charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, target, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, target, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, memberTypeFlags, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( nsNode, Token.REF_NS_NAME, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, elem, nsNode, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, lineno, elem, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, charno, lineno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( elem, nsNode, Token.REF_NS_NAME, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NAME, charno, lineno, elem ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, memberTypeFlags ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( charno, nsNode, elem, lineno, Token.REF_NS_NAME ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^if  ( namespace == true )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, lineno, elem, nsNode, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( charno, nsNode, elem, lineno, Token.REF_NS_NAME ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, lineno, elem, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref = new Node ( 3, nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NAME, lineno, elem, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P2_Replace_Operator]^if  ( namespace != null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^if  ( namespace == true )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( label == null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( target == null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( catchCond == null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( child == null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( elem != null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P9_Replace_Statement]^if  ( finallyBlock == null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P15_Unwrap_Block]^ref = new com.google.javascript.rhino.Node(Token.REF_MEMBER, target, elem, lineno, charno);^618^619^620^621^622^600^629^if  ( namespace == null )  { ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P16_Remove_Block]^^618^619^620^621^622^600^629^if  ( namespace == null )  { ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( caseExpression != null )  {     caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ; }else {     caseNode = new Node ( Token.DEFAULT, lineno, charno ) ; }^618^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( namespace.equals ( "*" )  )  {     nsNode = new Node ( Token.NULL, lineno, charno ) ; }else {     nsNode = createName ( namespace, lineno, charno ) ; }^618^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( namespace == null )  {     ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; }else {     ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^618^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER,  nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target,  elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode,  lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem,  charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, ref, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, target, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, memberTypeFlags, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, memberTypeFlags ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, lineno, elem, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, charno, nsNode, elem, lineno, target ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( charno, target, nsNode, elem, lineno, Token.REF_NS_MEMBER ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref =  new Node ( Token.REF_NS_MEMBER, nsNode, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, ref, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, target, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( 2, target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( nsNode, target, Token.REF_NS_MEMBER, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER,  elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER, target,  lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER, target, elem,  charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, ref, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, ref, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, elem, memberTypeFlags, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, memberTypeFlags ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, elem, target, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, charno, lineno, elem ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, elem, charno, lineno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( charno, target, elem, lineno, Token.REF_MEMBER ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref =  new Node ( Token.REF_MEMBER, nsNode, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = new Node ( Token.NULL, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^nsNode = createName ( namespace, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, charno, elem, lineno, target ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( lineno, target, elem, Token.REF_MEMBER, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref =  new Node ( Token.REF_NAME, null, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( lineno, nsNode, elem, Token.REF_NS_NAME, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( elem, target, Token.REF_MEMBER, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER,  nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target,  elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode,  lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem,  charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, ref, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, target, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, target, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, memberTypeFlags, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, memberTypeFlags ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node (  target, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, lineno, elem, nsNode, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( elem, target, nsNode, Token.REF_NS_MEMBER, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref =  new Node ( Token.REF_NS_MEMBER, nsNode, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_NAME, nsNode, charno, lineno, elem ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_MEMBER, target, target, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( target, Token.REF_MEMBER, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, ref, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref = new Node ( nsNode, target, Token.REF_NS_MEMBER, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P2_Replace_Operator]^if  ( memberTypeFlags == 0 )  {^625^^^^^600^629^if  ( memberTypeFlags != 0 )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P3_Replace_Literal]^if  ( memberTypeFlags != -1 )  {^625^^^^^600^629^if  ( memberTypeFlags != 0 )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^if  ( lineno != 0 )  {^625^^^^^600^629^if  ( memberTypeFlags != 0 )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^if  ( memberTypeFlags != 4 )  {^625^^^^^600^629^if  ( memberTypeFlags != 0 )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P15_Unwrap_Block]^ref.putIntProp(Node.MEMBER_TYPE_PROP, memberTypeFlags);^625^626^627^^^600^629^if  ( memberTypeFlags != 0 )  { ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P16_Remove_Block]^^625^626^627^^^600^629^if  ( memberTypeFlags != 0 )  { ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ; }^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref.putIntProp ( Node.MEMBER_TYPE_PROP, lineno ) ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^ref.putIntProp ( Node.MEMBER_TYPE_PROP ) ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P14_Delete_Statement]^^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^ref.putProp ( Node.NAME_PROP, name ) ;ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P13_Insert_Block]^if  ( memberTypeFlags != 0 )  {     ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ; }^626^^^^^600^629^[Delete]^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P8_Replace_Mix]^ref .putProp (  )  ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GET_REF,  lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GET_REF, ref,  charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P4_Replace_Constructor]^return new Node ( Token.GET_REF, ref, lineno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, target, lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, ref, memberTypeFlags, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, ref, lineno, memberTypeFlags ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node (  ref, lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, lineno, ref, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, ref, charno, lineno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( charno, ref, lineno, Token.GET_REF ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( lineno, ref, Token.GET_REF, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( Token.GET_REF, charno, lineno, ref ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P5_Replace_Variable]^return new Node ( ref, Token.GET_REF, lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[P11_Insert_Donor_Statement]^Node ref;Node temp;^637^^^^^634^652^Node temp;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P8_Replace_Mix]^nodeType ;^641^^^^^634^652^nodeType = Token.GETPROP;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P11_Insert_Donor_Statement]^nodeType = Token.GETELEM;nodeType = Token.GETPROP;^641^^^^^634^652^nodeType = Token.GETPROP;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P11_Insert_Donor_Statement]^type = Token.EXPR_VOID;nodeType = Token.GETPROP;^641^^^^^634^652^nodeType = Token.GETPROP;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P8_Replace_Mix]^nodeType  =  nodeType ;^648^^^^^634^652^nodeType = Token.GETELEM;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P11_Insert_Donor_Statement]^nodeType = Token.GETPROP;nodeType = Token.GETELEM;^648^^^^^634^652^nodeType = Token.GETELEM;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^Node idNode = temp;^642^^^^^634^652^Node idNode = right;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P11_Insert_Donor_Statement]^Node nsNode = null;Node idNode = right;^642^^^^^634^652^Node idNode = right;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P7_Replace_Invocation]^idNode.Node ( Token.STRING ) ;^643^^^^^634^652^idNode.setType ( Token.STRING ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P7_Replace_Invocation]^idNode .getType (  )  ;^643^^^^^634^652^idNode.setType ( Token.STRING ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P14_Delete_Statement]^^643^^^^^634^652^idNode.setType ( Token.STRING ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P4_Replace_Constructor]^return new Node (  left, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P4_Replace_Constructor]^return new Node ( nodeType,  right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P4_Replace_Constructor]^return new Node ( nodeType, left,  lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P4_Replace_Constructor]^return new Node ( nodeType, left, right,  charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P4_Replace_Constructor]^return new Node ( nodeType, left, right, lineno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( lineno, left, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, temp, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, left, temp, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, left, right, charno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, left, right, lineno, nodeType ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( lineno, left, right, nodeType, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( left, nodeType, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, right, left, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, left, right, charno, lineno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, left, charno, lineno, right ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, left, right, lineno, lineno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( charno, left, right, lineno, nodeType ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P5_Replace_Variable]^return new Node ( nodeType, lineno, right, left, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[P1_Replace_Type]^short  nodeType = left.getType (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^int nodeType = right.getType (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P7_Replace_Invocation]^int nodeType = left.Node (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P7_Replace_Invocation]^int nodeType = left .setType (  )  ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P8_Replace_Mix]^int nodeType = right.Node (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P11_Insert_Donor_Statement]^int childType = child.getType (  ) ;int nodeType = left.getType (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P11_Insert_Donor_Statement]^int type = node.getType (  ) ;int nodeType = left.getType (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P11_Insert_Donor_Statement]^int length = elems.size (  ) ;int nodeType = left.getType (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P14_Delete_Statement]^^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P3_Replace_Literal]^parser.reportError ( "sign" ) ;^666^^^^^654^670^parser.reportError ( "msg.bad.assign.left" ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P7_Replace_Invocation]^parser .getSourceName (  )  ;^666^^^^^654^670^parser.reportError ( "msg.bad.assign.left" ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P14_Delete_Statement]^^666^^^^^654^670^parser.reportError ( "msg.bad.assign.left" ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P11_Insert_Donor_Statement]^parser.reportError ( msg ) ;parser.reportError ( "msg.bad.assign.left" ) ;^666^^^^^654^670^parser.reportError ( "msg.bad.assign.left" ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P4_Replace_Constructor]^return new Node ( Token.ASSIGN,  right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P4_Replace_Constructor]^return new Node ( Token.ASSIGN, left,  lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P4_Replace_Constructor]^return new Node ( Token.ASSIGN, left, right,  charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P4_Replace_Constructor]^return new Node ( Token.ASSIGN, left, right, lineno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, right, right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, left, right, nodeType, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, left, right, lineno, nodeType ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node (  left, right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, lineno, right, left, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, right, left, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, left, right, charno, lineno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, charno, right, lineno, left ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( right, left, Token.ASSIGN, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, left, lineno, right, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( charno, left, right, lineno, Token.ASSIGN ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P5_Replace_Variable]^return new Node ( left, Token.ASSIGN, right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[P1_Replace_Type]^short  type = node.getType (  ) ;^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P7_Replace_Invocation]^int type = node.Node (  ) ;^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;int type = node.getType (  ) ;^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P11_Insert_Donor_Statement]^int childType = child.getType (  ) ;int type = node.getType (  ) ;^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P11_Insert_Donor_Statement]^int type = Node.NON_SPECIALCALL;int type = node.getType (  ) ;^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P11_Insert_Donor_Statement]^int nodeType = left.getType (  ) ;int type = node.getType (  ) ;^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P7_Replace_Invocation]^int type = node .setType (  )  ;^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P14_Delete_Statement]^^674^^^^^672^685^int type = node.getType (  ) ;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P8_Replace_Mix]^return true;^684^^^^^672^685^return null;^[CLASS] IRFactory  [METHOD] makeReference [RETURN_TYPE] Node   Node node [VARIABLES] boolean  int  type  Parser  parser  Node  node  
[P6_Replace_Expression]^if  ( activationNames != null && containsKey(name)) )  {^713^^^^^711^733^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( activationNames != null )  {^713^^^^^711^733^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( token == Token.GETPROP && getLanguageVersion() == Context.VERSION_1_2 )  {^713^^^^^711^733^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( token == Token.GETPROP )  {^713^^^^^711^733^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( getLanguageVersion (  )  == Context.VERSION_1_2 )  {^713^^^^^711^733^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P7_Replace_Invocation]^if  ( parser.getSourceName (  )  )  {^713^^^^^711^733^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( "arguments".equals ( name ) &&  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null || parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames == null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^if  ( "argurguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( "arguments".equals ( name ) ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  (   ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( activationNames != null && containsKey(name)) ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( activationNames != null ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( token == Token.GETPROP && getLanguageVersion() == Context.VERSION_1_2 ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( token == Token.GETPROP ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( getLanguageVersion (  )  == Context.VERSION_1_2 ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P7_Replace_Invocation]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.createString ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P8_Replace_Mix]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != true && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^} else if  ( "nength".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^} else if  ( token == Token.GETPROP )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^} else if  ( getLanguageVersion (  )  == Context.VERSION_1_2 )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^} else {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P9_Replace_Statement]^} else if  ( name.equals ( "With" )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P13_Insert_Block]^if  (  ( token ==  ( Token.GETPROP )  )  &&  (  ( getLanguageVersion (  )  )  ==  ( Context.VERSION_1_2 )  )  )  {     activation = true; }^720^^^^^711^733^[Delete]^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( token == Token.GETPROP || parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( token >= Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( token != Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( token == Token.GETPROP ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  (  parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P6_Replace_Expression]^if  ( getLanguageVersion (  )  == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P7_Replace_Invocation]^if  ( token == Token.GETPROP && parser.compilerEnv.setRequiresActivation (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P13_Insert_Block]^if  ( "length".equals ( name )  )  {     if  (  ( token ==  ( Token.GETPROP )  )  &&  (  ( getLanguageVersion (  )  )  ==  ( Context.VERSION_1_2 )  )  )  {         activation = true;     } }^721^^^^^711^733^[Delete]^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^activation = false;^726^^^^^711^733^activation = true;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P11_Insert_Donor_Statement]^fnNode.itsNeedsActivation = true;activation = true;^726^^^^^711^733^activation = true;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P7_Replace_Invocation]^&& parser.compilerEnv.setRequiresActivation (  ) == Context.VERSION_1_2 ) {^722^723^724^^^711^733^&& parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( token <= Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^} else if  ( "leng".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^activation = false;^719^^^^^711^733^activation = true;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P11_Insert_Donor_Statement]^fnNode.itsNeedsActivation = true;activation = true;^719^^^^^711^733^activation = true;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P8_Replace_Mix]^}  if  ( "length".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P8_Replace_Mix]^if  (  parser.compilerEnv.setRequiresActivation (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P15_Unwrap_Block]^setRequiresActivation();^729^730^731^^^711^733^if  ( activation )  { setRequiresActivation (  ) ; }^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P16_Remove_Block]^^729^730^731^^^711^733^if  ( activation )  { setRequiresActivation (  ) ; }^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P7_Replace_Invocation]^getLanguageVersion (  ) ;^730^^^^^711^733^setRequiresActivation (  ) ;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P14_Delete_Statement]^^730^^^^^711^733^setRequiresActivation (  ) ;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^boolean activation = true;^714^^^^^711^733^boolean activation = false;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^if  ( "a".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P7_Replace_Invocation]^&& parser.compilerEnv.activationNames.createString ( name )  )  ) {^717^718^^^^711^733^&& parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P14_Delete_Statement]^^717^718^719^^^711^733^&& parser.compilerEnv.activationNames.containsKey ( name )  )  ) { activation = true;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^} else if  ( "g".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^if  ( "n".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P8_Replace_Mix]^if  (   ( parser.compilerEnv.activationNames != this && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^} else if  ( "ength".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( token > Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^} else if  ( "lengthl".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^} else if  ( "lengtht".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P2_Replace_Operator]^if  ( token < Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^if  ( "mentrguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P3_Replace_Literal]^} else if  ( "lengtheng".equals ( name )  )  {^720^^^^^711^733^} else if  ( "length".equals ( name )  )  {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[P7_Replace_Invocation]^if  ( parser.getSourceName (  )  )  {^737^^^^^735^740^if  ( parser.insideFunction (  )  )  {^[CLASS] IRFactory  [METHOD] setRequiresActivation [RETURN_TYPE] void   [VARIABLES] Parser  parser  boolean  
[P15_Unwrap_Block]^((com.google.javascript.rhino.FunctionNode) (parser.currentScriptOrFn)).itsNeedsActivation = true;^737^738^739^^^735^740^if  ( parser.insideFunction (  )  )  { (  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = true; }^[CLASS] IRFactory  [METHOD] setRequiresActivation [RETURN_TYPE] void   [VARIABLES] Parser  parser  boolean  
[P16_Remove_Block]^^737^738^739^^^735^740^if  ( parser.insideFunction (  )  )  { (  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = true; }^[CLASS] IRFactory  [METHOD] setRequiresActivation [RETURN_TYPE] void   [VARIABLES] Parser  parser  boolean  
[P3_Replace_Literal]^(  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = false;^738^^^^^735^740^(  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = true;^[CLASS] IRFactory  [METHOD] setRequiresActivation [RETURN_TYPE] void   [VARIABLES] Parser  parser  boolean  
[P13_Insert_Block]^if  ( parser.insideFunction (  )  )  {      (  ( FunctionNode )   ( parser.currentScriptOrFn )  ) .itsNeedsActivation = true; }^738^^^^^735^740^[Delete]^[CLASS] IRFactory  [METHOD] setRequiresActivation [RETURN_TYPE] void   [VARIABLES] Parser  parser  boolean  
