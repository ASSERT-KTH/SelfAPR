[P8_Replace_Mix]^protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes ;^41^42^^^^41^42^protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes = Maps.newHashMap (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^protected List<DiGraphEdge<N, E>> inEdgeList  = null ;^337^^^^^332^342^protected List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^protected List<DiGraphEdge<N, E>> outEdgeList ;^338^339^^^^338^339^protected List<DiGraphEdge<N, E>> outEdgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^private Annotation annotation;^343^^^^^338^348^protected Annotation annotation;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P1_Replace_Type]^protected  long  id;^345^^^^^340^350^protected int id;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^protected  short  id;^345^^^^^340^350^protected int id;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P1_Replace_Type]^private static  long  totalNodes = 0;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P3_Replace_Literal]^private static int totalNodes = 3;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^private static int totalNodes = 0 % 0;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P7_Replace_Invocation]^private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.size (  ) ;^411^^^^^406^416^private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^private final Iterator<DiGraphEdge<N, E>> in ;^411^^^^^406^416^private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P7_Replace_Invocation]^private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.size (  ) ;^412^^^^^407^417^private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^private  Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^412^^^^^407^417^private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[P8_Replace_Mix]^this.value =  value;^355^^^^^354^357^this.value = nodeValue;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] LinkedDirectedGraph$LinkedDirectedGraphNode(N)   N nodeValue [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^this.value = edgeValue;this.value = nodeValue;^355^^^^^354^357^this.value = nodeValue;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] LinkedDirectedGraph$LinkedDirectedGraphNode(N)   N nodeValue [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^this.id  =  this.id ;^356^^^^^354^357^this.id = totalNodes++;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] LinkedDirectedGraph$LinkedDirectedGraphNode(N)   N nodeValue [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^this.value = value;^456^^^^^454^459^this.value = edgeValue;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^this.value = nodeValue;this.value = edgeValue;^456^^^^^454^459^this.value = edgeValue;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^this.sourceNode =  null;^457^^^^^454^459^this.sourceNode = sourceNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^sourceNode = node;this.sourceNode = sourceNode;^457^^^^^454^459^this.sourceNode = sourceNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^this.destNode = destNode;this.sourceNode = sourceNode;^457^^^^^454^459^this.sourceNode = sourceNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^this.destNode =  null;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^this.sourceNode = sourceNode;this.destNode = destNode;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^sourceNode = node;this.destNode = destNode;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^destNode = node;this.destNode = destNode;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^return new SimpleSubGraph<N, E> ( null ) ;^45^^^^^44^46^return new SimpleSubGraph<N, E> ( this ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] newSubGraph [RETURN_TYPE] SubGraph   [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^DiGraphNode<N, E> node = createDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^DiGraphNode<N, E> node = createDirectedGraphNode ( value ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedGraphNode ( nodeValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return createDirectedGraphNode ( value ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^node = getDirectedGraphNode ( destValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^if  ( node != null )  {^51^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P6_Replace_Expression]^if  ( srcValue + " does not exist in graph" )  {^51^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^if  ( node == true )  {^51^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode == null )  {^51^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^51^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^51^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((srcValue + " does not exist in graph"));^51^52^53^54^^49^67^if  ( node == null )  { throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P16_Remove_Block]^^51^52^53^54^^49^67^if  ( node == null )  { throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^51^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^51^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^51^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^51^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^51^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^51^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  &  " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( srcValue + "t exdoes not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )  ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^52^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^52^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^52^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^52^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^52^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^52^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  <=  " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( srcValue + " does not exist in graphp" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  >=  " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( srcValue + " does not exist in graphnot exist in grap" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  |  " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( srcValue + " does not exist in graph exist i" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^55^^^^^49^67^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^55^^^^^49^67^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^55^^^^^49^67^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^55^^^^^49^67^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^55^^^^^49^67^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^55^^^^^49^67^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^node = getDirectedGraphNode ( value ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^node = createDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;node = getDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^node = createDirectedGraphNode ( value ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;node = getDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedGraphNode ( nodeValue ) ;node = getDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;node = getDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;node = getDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;node = getDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return createDirectedGraphNode ( value ) ;node = getDirectedGraphNode ( destValue ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^if  ( node != null )  {^57^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P6_Replace_Expression]^if  ( destValue + " does not exist in graph" )  {^57^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^if  ( node == false )  {^57^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode == null )  {^57^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^57^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^57^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((destValue + " does not exist in graph"));^57^58^59^60^^49^67^if  ( node == null )  { throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P16_Remove_Block]^^57^58^59^60^^49^67^if  ( node == null )  { throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^57^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^57^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^57^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^57^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^57^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^57^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  >=  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )  ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^58^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^58^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^58^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^58^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^58^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^58^^^^^49^67^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  &&  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( destValue + " does not exist in graphes not exist" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  <<  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( destValue + " does not exist in graphs" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  >>  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( destValue + "does nodoes not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^61^^^^^49^67^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^61^^^^^49^67^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^61^^^^^49^67^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^61^^^^^49^67^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^61^^^^^49^67^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^61^^^^^49^67^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^new LinkedDirectedGraphNode<N, E> ( nodeValue )  ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^new LinkedDirectedGraphEdge<N, E> (  edgeValue, dest ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^new LinkedDirectedGraphEdge<N, E> ( src,  dest ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^new LinkedDirectedGraphEdge<N, E> ( src, value, dest ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^new LinkedDirectedGraphEdge<N, E> ( dest, edgeValue, src ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^new LinkedDirectedGraphEdge<N, E> ( src, dest, edgeValue ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphNode<N, E> ( nodeValue )  ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> (  edgeValue, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src,  dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, value, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( dest, edgeValue, src ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( edgeValue, src, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, dest, edgeValue ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^src.LinkedDirectedGraphNode (  ) .add ( edge ) ;^64^^^^^49^67^src.getOutEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^64^^^^^49^67^src.getOutEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .remove ( edge ) ;src.getOutEdges (  ) .add ( edge ) ;^64^^^^^49^67^src.getOutEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;src.getOutEdges (  ) .add ( edge ) ;^64^^^^^49^67^src.getOutEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .remove ( edge ) ;src.getOutEdges (  ) .add ( edge ) ;^64^^^^^49^67^src.getOutEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .add ( edge ) ;src.getOutEdges (  ) .add ( edge ) ;^64^^^^^49^67^src.getOutEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^src .getInEdges (  )  .add ( edge ) ;^64^^^^^49^67^src.getOutEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^dest.LinkedDirectedGraphNode (  ) .add ( edge ) ;^65^^^^^49^67^dest.getInEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^65^66^^^^49^67^dest.getInEdges (  ) .add ( edge ) ; return edge;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .remove ( edge ) ;dest.getInEdges (  ) .add ( edge ) ;^65^^^^^49^67^dest.getInEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;dest.getInEdges (  ) .add ( edge ) ;^65^^^^^49^67^dest.getInEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .remove ( edge ) ;dest.getInEdges (  ) .add ( edge ) ;^65^^^^^49^67^dest.getInEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .add ( edge ) ;dest.getInEdges (  ) .add ( edge ) ;^65^^^^^49^67^dest.getInEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^65^^^^^49^67^dest.getInEdges (  ) .add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( value, n2 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( n1, value ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection (  n2 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( n1 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( n2, n1 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^isConnectedInDirection ( n1, n2 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^71^72^^^^70^73^disconnectInDirection ( n1, n2 ) ; disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^disconnectInDirection ( n2, n1 ) ;disconnectInDirection ( n1, n2 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( value, n1 ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( n2, value ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection (  n1 ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( n2 ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^disconnectInDirection ( n1, n2 ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^isConnectedInDirection ( n2, n1 ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^isConnectedInDirection ( n2, value ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^disconnectInDirection ( n1, n2 ) ;disconnectInDirection ( n2, n1 ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^DiGraphNode<N, E> node = createDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^DiGraphNode<N, E> node = createDirectedGraphNode ( value ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^DiGraphNode<N, E> node = createDirectedGraphNode ( nodeValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedGraphNode ( nodeValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return createDirectedGraphNode ( value ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^node = getDirectedGraphNode ( destValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^if  ( node != null )  {^78^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P6_Replace_Expression]^if  ( srcValue + " does not exist in graph" )  {^78^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^if  ( node == false )  {^78^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode == null )  {^78^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^78^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^78^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((srcValue + " does not exist in graph"));^78^79^80^81^^76^93^if  ( node == null )  { throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P16_Remove_Block]^^78^79^80^81^^76^93^if  ( node == null )  { throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^78^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^78^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^78^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^78^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^78^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^78^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  <=  " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( srcValue + "ot exist" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )  ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^79^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^79^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^79^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^79^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^79^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^79^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  >>  " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( srcValue + " does not exist in graphoes" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  >=  " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( srcValue  |  " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( srcValue + "oes not exist i" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^82^^^^^76^93^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^82^^^^^76^93^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^82^^^^^76^93^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^82^^^^^76^93^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^82^^^^^76^93^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^82^^^^^76^93^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^node = createDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^node =  getDirectedGraphNode ( null ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;node = getDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^node = getDirectedGraphNode ( value ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;node = getDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedGraphNode ( nodeValue ) ;node = getDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;node = getDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;node = getDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;node = getDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return createDirectedGraphNode ( value ) ;node = getDirectedGraphNode ( destValue ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^if  ( node != null )  {^84^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P6_Replace_Expression]^if  ( destValue + " does not exist in graph" )  {^84^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^if  ( node == this )  {^84^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode == null )  {^84^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^84^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^84^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((destValue + " does not exist in graph"));^84^85^86^87^^76^93^if  ( node == null )  { throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P16_Remove_Block]^^84^85^86^87^^76^93^if  ( node == null )  { throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^84^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^84^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^84^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^84^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^84^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^84^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  !=  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( destValue + " does not exist in graph does " ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )  ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^85^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^85^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^85^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^85^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^85^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^85^^^^^76^93^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  <  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( destValue + "doe" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^return 0;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  >>  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( destValue + "oes does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( destValue  ==  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( destValue + "xist in gra" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^88^^^^^76^93^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^88^^^^^76^93^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^88^^^^^76^93^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^88^^^^^76^93^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^88^^^^^76^93^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^88^^^^^76^93^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( value, destValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, value )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges (  destValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( destValue, srcValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^for  ( DiGraphEdge<?, E> edge : getEdges ( srcValue, destValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^for  ( DiGraphEdge<?, E> edge : getEdges ( value, destValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^89^90^91^92^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  { src.getOutEdges (  ) .remove ( edge ) ; dest.getInEdges (  ) .remove ( edge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^src.getOutEdges (  )  .size (  )  ;^90^^^^^76^93^src.getOutEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^src.LinkedDirectedGraphNode (  ) .remove ( edge ) ;^90^^^^^76^93^src.getOutEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^90^^^^^76^93^src.getOutEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .remove ( edge ) ;src.getOutEdges (  ) .remove ( edge ) ;^90^^^^^76^93^src.getOutEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .add ( edge ) ;src.getOutEdges (  ) .remove ( edge ) ;^90^^^^^76^93^src.getOutEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .add ( edge ) ;src.getOutEdges (  ) .remove ( edge ) ;^90^^^^^76^93^src.getOutEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^dest.LinkedDirectedGraphNode (  ) .remove ( edge ) ;^91^^^^^76^93^dest.getInEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^dest .getOutEdges (  )  .remove ( edge ) ;^91^^^^^76^93^dest.getInEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^dest.getInEdges (  )  .size (  )  ;^91^^^^^76^93^dest.getInEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^91^^^^^76^93^dest.getInEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .remove ( edge ) ;dest.getInEdges (  ) .remove ( edge ) ;^91^^^^^76^93^dest.getInEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .add ( edge ) ;dest.getInEdges (  ) .remove ( edge ) ;^91^^^^^76^93^dest.getInEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .add ( edge ) ;dest.getInEdges (  ) .remove ( edge ) ;^91^^^^^76^93^dest.getInEdges (  ) .remove ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^97^^^^^96^100^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^nodeList.addAll ( nodes.size (  )  ) ;^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^98^99^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ; return nodeList;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodes.put ( nodeValue, node ) ;nodeList.addAll ( nodes.values (  )  ) ;^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getDestination (  )  ) ;nodeList.addAll ( nodes.values (  )  ) ;^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^list.addAll ( nodes.values (  )  ) ;nodeList.addAll ( nodes.values (  )  ) ;^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getSource (  )  ) ;nodeList.addAll ( nodes.values (  )  ) ;^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.add ( node ) ;nodeList.addAll ( nodes.values (  )  ) ;^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^nodeList.addAll ( null.size (  )  ) ;^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^98^^^^^96^100^nodeList.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^return null;^99^^^^^96^100^return nodeList;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^return nodes.get ( value ) ;^104^^^^^103^105^return nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^return nodeValue.get ( nodes ) ;^104^^^^^103^105^return nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^return nodes.get ( srcValue ) ;^104^^^^^103^105^return nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^104^^^^^103^105^return nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^return getDirectedGraphNode ( value ) ;^109^^^^^108^110^return getDirectedGraphNode ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode [RETURN_TYPE] GraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^return createDirectedGraphNode ( nodeValue ) ;^109^^^^^108^110^return getDirectedGraphNode ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode [RETURN_TYPE] GraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^109^^^^^108^110^return getDirectedGraphNode ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode [RETURN_TYPE] GraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = nodeValue.get ( nodes ) ;^114^^^^^113^125^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^114^^^^^113^125^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^LinkedDirectedGraphNode<N, E> node = nodes.get ( srcValue ) ;^114^^^^^113^125^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^114^^^^^113^125^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^if  ( node != null )  {^115^^^^^113^125^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P6_Replace_Expression]^if  ( nodeValue + " does not exist in graph" )  {^115^^^^^113^125^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^if  ( node == true )  {^115^^^^^113^125^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode == null )  {^115^^^^^113^125^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^115^^^^^113^125^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^115^^^^^113^125^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((nodeValue + " does not exist in graph"));^115^116^117^118^^113^125^if  ( node == null )  { throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P16_Remove_Block]^^115^116^117^118^^113^125^if  ( node == null )  { throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^115^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^115^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^115^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^115^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^115^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^115^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue   instanceof   " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( nodeValue + "does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )  ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^116^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^116^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^116^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^116^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^116^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^116^^^^^113^125^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue  ||  " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue  ==  " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( nodeValue + " " ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue  !=  " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( nodeValue + "s notdoes not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^List<DiGraphEdge<N, E>> edgeList = Lists .newArrayListWithCapacity ( id )  ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^119^^^^^113^125^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> edge : node.LinkedDirectedGraphNode (  )  )  {^120^^^^^113^125^for  ( DiGraphEdge<N, E> edge : node.getInEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^120^121^122^^^113^125^for  ( DiGraphEdge<N, E> edge : node.getInEdges (  )  )  { edgeList.add ( edge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edges.add ( outEdge ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^result.add ( edge ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edges.addAll ( backwardEdges ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .add ( edge ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .add ( edge ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getSource (  )  ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.add ( node ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edges.addAll ( forwardEdges ) ;edgeList.add ( edge ) ;^121^^^^^113^125^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = nodes.get ( srcValue ) ;^129^^^^^128^139^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = nodeValue.get ( nodes ) ;^129^^^^^128^139^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^LinkedDirectedGraphNode<N, E> node = nodes .put ( 3 , 2 )  ;^129^^^^^128^139^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^129^^^^^128^139^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^if  ( node != null )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^if  ( 3 == null )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P6_Replace_Expression]^if  ( nodeValue + " does not exist in graph" )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^if  ( node == false )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode == null )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((nodeValue + " does not exist in graph"));^130^131^132^133^^128^139^if  ( node == null )  { throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P16_Remove_Block]^^130^131^132^133^^128^139^if  ( node == null )  { throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^130^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^130^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^130^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^130^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^130^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^130^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue  ||  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( nodeValue + " does not exist in graphs " ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )  ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^131^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^131^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^131^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^131^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^131^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^131^^^^^128^139^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue  >=  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( nodeValue + "exist idoes not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue  &&  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( nodeValue + "e" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^throw new IllegalArgumentException ( nodeValue  <=  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P3_Replace_Literal]^throw new IllegalArgumentException ( nodeValue + "does not exist in does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^List<DiGraphEdge<N, E>> edgeList = Lists .newArrayListWithCapacity ( totalNodes )  ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^134^^^^^128^139^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> edge : node.LinkedDirectedGraphNode (  )  )  {^135^^^^^128^139^for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^135^136^137^^^128^139^for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  { edgeList.add ( edge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edges.add ( outEdge ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^result.add ( edge ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edges.addAll ( backwardEdges ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^dest.getInEdges (  ) .add ( edge ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^src.getOutEdges (  ) .add ( edge ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getSource (  )  ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.add ( node ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^edges.addAll ( forwardEdges ) ;edgeList.add ( edge ) ;^136^^^^^128^139^edgeList.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^143^^^^^142^149^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = nodeValue.get ( nodes ) ;^143^^^^^142^149^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = nodes.get ( srcValue ) ;^143^^^^^142^149^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^143^^^^^142^149^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P2_Replace_Operator]^if  ( node != null )  {^144^^^^^142^149^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^if  ( node == true )  {^144^^^^^142^149^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode == null )  {^144^^^^^142^149^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^144^^^^^142^149^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^144^^^^^142^149^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P15_Unwrap_Block]^node = new com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode<N, E>(nodeValue); nodes.put(nodeValue, node);^144^145^146^147^^142^149^if  ( node == null )  { node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ; nodes.put ( nodeValue, node ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P16_Remove_Block]^^144^145^146^147^^142^149^if  ( node == null )  { node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ; nodes.put ( nodeValue, node ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P4_Replace_Constructor]^node = node =  new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest )  ;^145^^^^^142^149^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^node =   new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest )  ;^145^^^^^142^149^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^node = getDirectedGraphNode ( destValue ) ;node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^145^^^^^142^149^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P13_Insert_Block]^if  ( node == null )  {     node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;     nodes.put ( nodeValue, node ) ; }^145^^^^^142^149^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^node = new LinkedDirectedGraphNode<N, E> ( value ) ;^145^^^^^142^149^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^node = new LinkedDirectedGraphNode<N, E> ( srcValue ) ;^145^^^^^142^149^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^nodes.put ( value, node ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^nodes.put (  node ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^nodes.put ( nodeValue ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^nodes.put ( node, nodeValue ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P14_Delete_Statement]^^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^nodeList.addAll ( nodes.values (  )  ) ;nodes.put ( nodeValue, node ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P11_Insert_Donor_Statement]^return nodes.get ( nodeValue ) ;nodes.put ( nodeValue, node ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^nodes.put ( srcValue, node ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( srcValue, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, srcValue ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges (  n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<DiGraphEdge<N, E>> forwardEdges = getEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<DiGraphEdge<N, E>> forwardEdges = getEdges ( n1, srcValue ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( value, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, value ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( value, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, srcValue ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges (  n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<DiGraphEdge<N, E>> backwardEdges = getEdges ( n2, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, value ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<DiGraphEdge<N, E>> backwardEdges = getEdges ( n2, value ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P1_Replace_Type]^short  totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^int totalSize = forwardEdges.size (  !=  )  + backwardEdges.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^int totalSize = forwardEdges.size() + 5  + backwardEdges.size() + 5 ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^int totalSize = 2.size (  )  + backwardEdges.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^int totalSize = backwardEdges.size (  )  + forwardEdges.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^int totalSize = forwardEdges.addAll (  )  + backwardEdges.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^int totalSize = forwardEdges.addAll (  )  + null.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^int totalSize = forwardEdges.size() + 4  + backwardEdges.size() + 4 ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^157^158^159^160^161^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ; List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ; edges.addAll ( forwardEdges ) ; edges.addAll ( backwardEdges ) ; return edges; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^int totalSize = forwardEdges.size() - 3  + backwardEdges.size() - 3 ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalNodes ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<GraphEdge<N, E>> edges = Lists .newArrayList (  )  ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^edges.addAll ( null ) ;^159^^^^^152^162^edges.addAll ( forwardEdges ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^159^160^161^162^^152^162^edges.addAll ( forwardEdges ) ; edges.addAll ( backwardEdges ) ; return edges; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.add ( outEdge ) ;edges.addAll ( forwardEdges ) ;^159^^^^^152^162^edges.addAll ( forwardEdges ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;edges.addAll ( forwardEdges ) ;^159^^^^^152^162^edges.addAll ( forwardEdges ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.addAll ( backwardEdges ) ;edges.addAll ( forwardEdges ) ;^159^^^^^152^162^edges.addAll ( forwardEdges ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^160^161^^^^152^162^edges.addAll ( backwardEdges ) ; return edges;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.add ( outEdge ) ;edges.addAll ( backwardEdges ) ;^160^^^^^152^162^edges.addAll ( backwardEdges ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;edges.addAll ( backwardEdges ) ;^160^^^^^152^162^edges.addAll ( backwardEdges ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.addAll ( forwardEdges ) ;edges.addAll ( backwardEdges ) ;^160^^^^^152^162^edges.addAll ( backwardEdges ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return createDirectedGraphNode ( nodeValue ) ;^166^^^^^165^167^return createDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createNode [RETURN_TYPE] GraphNode   N value [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return getDirectedGraphNode ( value ) ;^166^^^^^165^167^return createDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createNode [RETURN_TYPE] GraphNode   N value [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return createDirectedGraphNode ( srcValue ) ;^166^^^^^165^167^return createDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createNode [RETURN_TYPE] GraphNode   N value [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^166^^^^^165^167^return createDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createNode [RETURN_TYPE] GraphNode   N value [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode1 = nodes.get ( srcValue ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode1 = n1.get ( nodes ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( dNode1 != null )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^if  ( n1 + " does not exist in graph" )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( dNode1 == false )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode == null )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( node == null )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((n1 + " does not exist in graph"));^172^173^174^^^170^186^if  ( dNode1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^172^173^174^^^170^186^if  ( dNode1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^172^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^172^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^172^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^172^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^172^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^172^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( value + " not found in graph" )  )   ;^173^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^173^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^173^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^173^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^173^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^173^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^173^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^173^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^173^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^173^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^173^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^173^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return 0;^173^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode2 = nodes.get ( value ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode2 = n2.get ( nodes ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^DiGraphNode<N, E> dNode2 = nodes.get ( srcValue ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( dNode2 != null )  {^176^^^^^170^186^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^if  ( n1 + " does not exist in graph" )  {^176^^^^^170^186^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( dNode2 == true )  {^176^^^^^170^186^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode == null )  {^176^^^^^170^186^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( node == null )  {^176^^^^^170^186^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^176^^^^^170^186^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((n1 + " does not exist in graph"));^176^177^178^^^170^186^if  ( dNode2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^176^177^178^^^170^186^if  ( dNode2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^176^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^176^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^176^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^176^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^176^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^176^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( value + " not found in graph" )  )   ;^177^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^177^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^177^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^177^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^177^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^177^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^177^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^177^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^177^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^177^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^177^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^177^^^^^170^186^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<DiGraphEdge<N, E>> edges = Lists .newArrayListWithCapacity ( totalSize )  ;^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^179^^^^^170^186^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( outEdge.getDestination (  )  <= dNode2 )  {^181^^^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^if  ( outEdge .getSource (  )   == dNode2 )  {^181^^^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( this.getDestination (  )  == dNode2 )  {^181^^^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^edges.add(outEdge);^181^182^183^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  { edges.add ( outEdge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^181^182^183^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  { edges.add ( outEdge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  (  ( outEdge.getDestination (  )  )  == dNode2 )  {     return true; }^181^^^^^170^186^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^182^^^^^170^186^edges.add ( outEdge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^result.add ( edge ) ;edges.add ( outEdge ) ;^182^^^^^170^186^edges.add ( outEdge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;edges.add ( outEdge ) ;^182^^^^^170^186^edges.add ( outEdge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.addAll ( backwardEdges ) ;edges.add ( outEdge ) ;^182^^^^^170^186^edges.add ( outEdge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( node ) ;edges.add ( outEdge ) ;^182^^^^^170^186^edges.add ( outEdge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.addAll ( forwardEdges ) ;edges.add ( outEdge ) ;^182^^^^^170^186^edges.add ( outEdge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^for  ( DiGraphEdge<N, E> outEdge : null.getOutEdges (  )  )  {^180^^^^^170^186^for  ( DiGraphEdge<N, E> outEdge : dNode1.getOutEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> outEdge : dNode1 .getInEdges (  )   )  {^180^^^^^170^186^for  ( DiGraphEdge<N, E> outEdge : dNode1.getOutEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^180^181^182^183^^170^186^for  ( DiGraphEdge<N, E> outEdge : dNode1.getOutEdges (  )  )  { if  ( outEdge.getDestination (  )  == dNode2 )  { edges.add ( outEdge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode1 = nodes.get ( value ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode1 = 4.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode1 = n1.get ( nodes ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( dNode1 != null )  {^192^^^^^189^207^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^if  ( n1 + " does not exist in graph" )  {^192^^^^^189^207^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( dNode1 == false )  {^192^^^^^189^207^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode == null )  {^192^^^^^189^207^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( node == null )  {^192^^^^^189^207^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^192^^^^^189^207^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((n1 + " does not exist in graph"));^192^193^194^^^189^207^if  ( dNode1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^192^193^194^^^189^207^if  ( dNode1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^192^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^192^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^192^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^192^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^192^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^192^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( value + " not found in graph" )  )   ;^193^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^193^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^193^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^193^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^193^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^193^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^193^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^193^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^193^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^193^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^193^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^193^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode2 = nodes.get ( value ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode2 = n2.get ( nodes ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> dNode2 = nodes.get ( srcValue ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( dNode2 != null )  {^196^^^^^189^207^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^if  ( n1 + " does not exist in graph" )  {^196^^^^^189^207^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( dNode2 == this )  {^196^^^^^189^207^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode == null )  {^196^^^^^189^207^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( node == null )  {^196^^^^^189^207^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^196^^^^^189^207^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((n1 + " does not exist in graph"));^196^197^198^^^189^207^if  ( dNode2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^196^197^198^^^189^207^if  ( dNode2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^196^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^196^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^196^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^196^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^196^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^196^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( value + " not found in graph" )  )   ;^197^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^197^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^197^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^197^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^197^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^197^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^197^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^197^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^197^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^197^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^197^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return true;^197^^^^^189^207^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( outEdge.getDestination (  )  >= dNode2 )  {^201^^^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^if  ( dNode2.getDestination (  )  == outEdge )  {^201^^^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^return true;^201^202^203^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  { return true; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^201^202^203^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  { return true; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  (  ( outEdge.getDestination (  )  )  == dNode2 )  {     edges.add ( outEdge ) ; }^201^^^^^189^207^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return false;^202^^^^^189^207^return true;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^200^201^202^203^^189^207^for  ( DiGraphEdge<N, E> outEdge : dNode1.getOutEdges (  )  )  { if  ( outEdge.getDestination (  )  == dNode2 )  { return true; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^if  ( outEdge .getSource (  )   == dNode2 )  {^201^^^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return true;^206^^^^^189^207^return false;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return getDirectedPredNodes ( nodes.get ( value )  ) ;^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return getDirectedPredNodes ( nodeValue.get ( nodes )  ) ;^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return getDirectedPredNodes ( nodes.get ( srcValue )  ) ;^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return getDirectedSuccNodes ( nodes.get ( value )  ) ;^216^^^^^215^217^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return getDirectedSuccNodes ( nodeValue.get ( nodes )  ) ;^216^^^^^215^217^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^216^^^^^215^217^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^216^^^^^215^217^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( dNode != null )  {^222^^^^^220^230^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^if  ( dNode + " is null" )  {^222^^^^^220^230^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( dNode == true )  {^222^^^^^220^230^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( node == null )  {^222^^^^^220^230^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^222^^^^^220^230^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^222^^^^^220^230^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((dNode + " is null"));^222^223^224^^^220^230^if  ( dNode == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^222^223^224^^^220^230^if  ( dNode == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^222^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^222^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^222^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^222^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^222^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^222^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( value + " not found in graph" )  )   ;^223^^^^^220^230^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^223^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^223^^^^^220^230^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^223^^^^^220^230^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^223^^^^^220^230^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^223^^^^^220^230^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^223^^^^^220^230^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^223^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^223^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^223^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^223^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^223^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^223^^^^^220^230^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return true;^223^^^^^220^230^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<DiGraphNode<N, E>> nodeList = Lists .newArrayListWithCapacity ( totalNodes )  ;^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^225^^^^^220^230^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^for  ( DiGraphEdge<N, E> edge : null.getInEdges (  )  )  {^226^^^^^220^230^for  ( DiGraphEdge<N, E> edge : dNode.getInEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> edge : dNode .getOutEdges (  )   )  {^226^^^^^220^230^for  ( DiGraphEdge<N, E> edge : dNode.getInEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^226^227^228^^^220^230^for  ( DiGraphEdge<N, E> edge : dNode.getInEdges (  )  )  { nodeList.add ( edge.getSource (  )  ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^nodeList.add ( edge .getDestination (  )   ) ;^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.addAll ( nodes.values (  )  ) ;nodeList.add ( edge.getSource (  )  ) ;^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getDestination (  )  ) ;nodeList.add ( edge.getSource (  )  ) ;^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;nodeList.add ( edge.getSource (  )  ) ;^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^list.addAll ( nodes.values (  )  ) ;nodeList.add ( edge.getSource (  )  ) ;^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^result.add ( i.next (  )  ) ;nodeList.add ( edge.getSource (  )  ) ;^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( node ) ;nodeList.add ( edge.getSource (  )  ) ;^227^^^^^220^230^nodeList.add ( edge.getSource (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( dNode != null )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^if  ( dNode + " is null" )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( dNode == false )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( node == null )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((dNode + " is null"));^235^236^237^^^233^243^if  ( dNode == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^235^236^237^^^233^243^if  ( dNode == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^235^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^235^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^235^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^235^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^235^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^235^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( value + " not found in graph" )  )   ;^236^^^^^233^243^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^236^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^236^^^^^233^243^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^236^^^^^233^243^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^236^^^^^233^243^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^236^^^^^233^243^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^236^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^236^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^236^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^236^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^236^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^236^^^^^233^243^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<DiGraphNode<N, E>> nodeList = Lists .newArrayListWithCapacity ( totalSize )  ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<DiGraphNode<N, E>> nodeList = Lists .newArrayListWithCapacity ( id )  ;^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^238^^^^^233^243^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^239^240^241^^^233^243^for  ( DiGraphEdge<N, E> edge : dNode.getOutEdges (  )  )  { nodeList.add ( edge.getDestination (  )  ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^nodeList.add ( edge .getSource (  )   ) ;^240^^^^^233^243^nodeList.add ( edge.getDestination (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^nodeList.add ( 2.getDestination (  )  ) ;^240^^^^^233^243^nodeList.add ( edge.getDestination (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^240^^^^^233^243^nodeList.add ( edge.getDestination (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.addAll ( nodes.values (  )  ) ;nodeList.add ( edge.getDestination (  )  ) ;^240^^^^^233^243^nodeList.add ( edge.getDestination (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getSource (  )  ) ;nodeList.add ( edge.getDestination (  )  ) ;^240^^^^^233^243^nodeList.add ( edge.getDestination (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^return isConnectedInDirection ( n1, n2 )  && isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return isConnectedInDirection ( value, n2 )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return isConnectedInDirection ( n1, value )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return isConnectedInDirection (  n2 )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection (  n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return isConnectedInDirection ( n2, n1 )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return disconnectInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return disconnectInDirection ( n1, value )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<GraphvizEdge> edgeList = Lists .newArrayListWithCapacity ( totalNodes )  ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^252^^^^^251^259^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( LinkedDirectedGraphNode<N, E> node : nodes.size (  )  )  {^253^^^^^251^259^for  ( LinkedDirectedGraphNode<N, E> node : nodes.values (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^253^254^255^256^^251^259^for  ( LinkedDirectedGraphNode<N, E> node : nodes.values (  )  )  { for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  { edgeList.add (  ( LinkedDirectedGraphEdge<N, E> )  edge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> edge : node.LinkedDirectedGraphNode (  )  )  {^254^^^^^251^259^for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> edge : node .getInEdges (  )   )  {^254^^^^^251^259^for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^254^255^256^^^251^259^for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  { edgeList.add (  ( LinkedDirectedGraphEdge<N, E> )  edge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^255^^^^^251^259^edgeList.add (  ( LinkedDirectedGraphEdge<N, E> )  edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^return  (  ( LinkedDirectedGraphNode<N, E> )  sourceNode ) .getId (  ) ;edgeList.add (  ( LinkedDirectedGraphEdge<N, E> )  edge ) ;^255^^^^^251^259^edgeList.add (  ( LinkedDirectedGraphEdge<N, E> )  edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^return  (  ( LinkedDirectedGraphNode<N, E> )  destNode ) .getId (  ) ;edgeList.add (  ( LinkedDirectedGraphEdge<N, E> )  edge ) ;^255^^^^^251^259^edgeList.add (  ( LinkedDirectedGraphEdge<N, E> )  edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return 3;^258^^^^^251^259^return edgeList;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizEdges [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size() + 9  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<GraphvizNode> nodeList = Lists.newArrayList ( nodes.size (  )  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.values (  )  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<GraphvizNode> nodeList = Lists .newArrayList (  )  ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^263^264^^^^262^269^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^Lists.newArrayListWithCapacity ( nodes.size() - 5  ) ;^264^^^^^262^269^Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^Lists.newArrayList ( nodes.size (  )  ) ;^264^^^^^262^269^Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^Lists.newArrayListWithCapacity ( nodes.values (  )  ) ;^264^^^^^262^269^Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^264^^^^^262^269^Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^Lists.newArrayListWithCapacity ( nodes.size() - 4  ) ;^264^^^^^262^269^Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^Lists.newArrayListWithCapacity ( null.size (  )  ) ;^264^^^^^262^269^Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( LinkedDirectedGraphNode<N, E> node : nodes.size (  )  )  {^265^^^^^262^269^for  ( LinkedDirectedGraphNode<N, E> node : nodes.values (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^265^266^267^^^262^269^for  ( LinkedDirectedGraphNode<N, E> node : nodes.values (  )  )  { nodeList.add ( node ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^266^^^^^262^269^nodeList.add ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.addAll ( nodes.values (  )  ) ;nodeList.add ( node ) ;^266^^^^^262^269^nodeList.add ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.add ( outEdge ) ;nodeList.add ( node ) ;^266^^^^^262^269^nodeList.add ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^result.add ( edge ) ;nodeList.add ( node ) ;^266^^^^^262^269^nodeList.add ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;nodeList.add ( node ) ;^266^^^^^262^269^nodeList.add ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getSource (  )  ) ;nodeList.add ( node ) ;^266^^^^^262^269^nodeList.add ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return 4;^268^^^^^262^269^return nodeList;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getGraphvizNodes [RETURN_TYPE] List   [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return false;^278^^^^^277^279^return true;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isDirected [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity ( nodes.size (  )  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<GraphNode<N, E>> list = Lists .newArrayListWithCapacity ( id )  ;^283^^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^283^284^^^^282^286^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ; list.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^list.addAll ( nodes.size (  )  ) ;^284^^^^^282^286^list.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^284^^^^^282^286^list.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.addAll ( nodes.values (  )  ) ;list.addAll ( nodes.values (  )  ) ;^284^^^^^282^286^list.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getSource (  )  ) ;list.addAll ( nodes.values (  )  ) ;^284^^^^^282^286^list.addAll ( nodes.values (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^284^285^^^^282^286^list.addAll ( nodes.values (  )  ) ; return list;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^DiGraphNode<N, E> node = createDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> node = getDirectedGraphNode ( nodeValue ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^return getDirectedGraphNode ( nodeValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^return createDirectedGraphNode ( value ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^node = getDirectedGraphNode ( destValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return getNeighborNodesIterator ( node ) ;^291^^^^^289^292^return getNeighborNodes ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^291^^^^^289^292^return getNeighborNodes ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<GraphNode<N, E>> result = Lists .newArrayListWithCapacity ( totalSize )  ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^List<GraphNode<N, E>> result = Lists .newArrayListWithCapacity ( id )  ;^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^295^^^^^294^301^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^for  ( Iterator<GraphNode<N, E>> this = (  ( LinkedDirectedGraphNode<N, E> )  node ) .neighborIterator (  ) ;i.hasNext (  ) ; )  {^296^297^^^^294^301^for  ( Iterator<GraphNode<N, E>> i = (  ( LinkedDirectedGraphNode<N, E> )  node ) .neighborIterator (  ) ;i.hasNext (  ) ; )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( Iterator<GraphNode<N, E>> i = (  ( LinkedDirectedGraphNode<N, E> )  node ) .LinkedDirectedGraphNode (  ) ;i.hasNext (  ) ; )  {^296^297^^^^294^301^for  ( Iterator<GraphNode<N, E>> i = (  ( LinkedDirectedGraphNode<N, E> )  node ) .neighborIterator (  ) ;i.hasNext (  ) ; )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^298^^^^^294^301^result.add ( i.next (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^result.add ( edge ) ;result.add ( i.next (  )  ) ;^298^^^^^294^301^result.add ( i.next (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( edge.getSource (  )  ) ;result.add ( i.next (  )  ) ;^298^^^^^294^301^result.add ( i.next (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^result.add ( i .hasNext (  )   ) ;^298^^^^^294^301^result.add ( i.next (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^(  ( LinkedDirectedGraphNode<N, E> )  node ) .LinkedDirectedGraphNode (  ) ;i.hasNext (  ) ; )  {^297^^^^^294^301^(  ( LinkedDirectedGraphNode<N, E> )  node ) .neighborIterator (  ) ;i.hasNext (  ) ; )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^297^298^^^^294^301^(  ( LinkedDirectedGraphNode<N, E> )  node ) .neighborIterator (  ) ;i.hasNext (  ) ; )  { result.add ( i.next (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^(  ( LinkedDirectedGraphNode<N, E> )  node ) .neighborIterator (  ) ;i .next (  )  ; )  {^297^^^^^294^301^(  ( LinkedDirectedGraphNode<N, E> )  node ) .neighborIterator (  ) ;i.hasNext (  ) ; )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return null;^300^^^^^294^301^return result;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = nodes.get ( srcValue ) ;^305^^^^^304^308^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^LinkedDirectedGraphNode<N, E> node = value.get ( nodes ) ;^305^^^^^304^308^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^305^^^^^304^308^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^Preconditions.checkNotNull ( 0 ) ;^306^^^^^304^308^Preconditions.checkNotNull ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^306^^^^^304^308^Preconditions.checkNotNull ( node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return node.LinkedDirectedGraphNode (  ) ;^307^^^^^304^308^return node.neighborIterator (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return node .setAnnotation ( annotation )  ;^307^^^^^304^308^return node.neighborIterator (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^307^^^^^304^308^return node.neighborIterator (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^List<GraphEdge<N, E>> result = Lists .newArrayListWithCapacity ( id )  ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> result = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphNode<N, E>> nodeList = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphvizEdge> edgeList = Lists.newArrayList (  ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^312^^^^^311^319^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( DiGraphNode<N, E> node : nodes.size (  )  )  {^313^^^^^311^319^for  ( DiGraphNode<N, E> node : nodes.values (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^313^314^315^316^^311^319^for  ( DiGraphNode<N, E> node : nodes.values (  )  )  { for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  { result.add ( edge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> edge : node .getInEdges (  )   )  {^314^^^^^311^319^for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^314^315^316^^^311^319^for  ( DiGraphEdge<N, E> edge : node.getOutEdges (  )  )  { result.add ( edge ) ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^315^^^^^311^319^result.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edges.add ( outEdge ) ;result.add ( edge ) ;^315^^^^^311^319^result.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^edgeList.add ( edge ) ;result.add ( edge ) ;^315^^^^^311^319^result.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^result.add ( i.next (  )  ) ;result.add ( edge ) ;^315^^^^^311^319^result.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^nodeList.add ( node ) ;result.add ( edge ) ;^315^^^^^311^319^result.add ( edge ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^DiGraphNode<N, E> node = createDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^DiGraphNode<N, E> node = createDirectedGraphNode ( srcValue ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^DiGraphNode<N, E> node = getDirectedGraphNode ( nodeValue ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^return getDirectedGraphNode ( nodeValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^return createDirectedGraphNode ( value ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^node = getDirectedGraphNode ( destValue ) ;DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^if  ( node != null )  {^324^^^^^322^328^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^if  ( value + " not found in graph" )  {^324^^^^^322^328^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^if  ( node == this )  {^324^^^^^322^328^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode == null )  {^324^^^^^322^328^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode1 == null )  {^324^^^^^322^328^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P9_Replace_Statement]^if  ( dNode2 == null )  {^324^^^^^322^328^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((value + " not found in graph"));^324^325^326^^^322^328^if  ( node == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P16_Remove_Block]^^324^325^326^^^322^328^if  ( node == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^324^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^324^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^324^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode == null )  {     throw new IllegalArgumentException (  ( dNode + " is null" )  ) ; }^324^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^324^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^324^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )   ;^325^^^^^322^328^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( srcValue + " does not exist in graph" )  ) ; }^325^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  ) ; }^325^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( value + " not found in graph" )  ) ; }^325^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^325^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( dNode2 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^325^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P13_Insert_Block]^if  ( node == null )  {     throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  ) ; }^325^^^^^322^328^[Delete]^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^325^^^^^322^328^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^325^^^^^322^328^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^325^^^^^322^328^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;throw new IllegalArgumentException  (" ")  ;^325^^^^^322^328^throw new IllegalArgumentException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^return node.getInEdges (  ||  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return node.getInEdges (  ) .size() + 0  + node.getOutEdges (  ) .size() + 0 ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return 2.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return node.getInEdges (  )  .remove ( null )   + node.getOutEdges (  )^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return node.getInEdges (  ) .size (  )  + node .getInEdges (  )  .size (  ) ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return node.getInEdges (  ) .size() - 9  + node.getOutEdges (  ) .size() - 9 ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return node.getInEdges (  ) .size() + 1  + node.getOutEdges (  ) .size() + 1 ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return node .getOutEdges (  )  .size (  )  + node.getOutEdges (  ) .size (  ) ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return node.getInEdges (  ) .size() - 8  + node.getOutEdges (  ) .size() - 8 ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return srcValue;^361^^^^^360^362^return value;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getValue [RETURN_TYPE] N   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return nodeValue;^361^^^^^360^362^return value;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getValue [RETURN_TYPE] N   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^annotation = annotation;^372^^^^^371^373^annotation = data;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^annotation =  null;^372^^^^^371^373^annotation = data;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return "whitei";^377^^^^^376^378^return "white";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getColor [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return "LDN" + totalSize;^382^^^^^381^383^return "LDN" + id;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getId [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return "LDN"  &  id;^382^^^^^381^383^return "LDN" + id;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getId [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P1_Replace_Type]^return value != null ? value.tochar (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^return value == null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return value != null ? value.toString (  )  : "nulln";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return srcValue != null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^return value ! =  "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^return value ! =  value.toString (  )  ;^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return value != null ? value.Object (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return srcValue ! =  value.Object (  )  ;^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return getId (  ) ;^392^^^^^391^393^return getLabel (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^392^^^^^391^393^return getLabel (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^return in.hasNext (  )  && out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return out.hasNext (  )  || in.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return in.next (  )  || out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return in .next (  )   || out^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return in.hasNext (  )  || 4.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^boolean isOut = !in.next (  ) ;^421^^^^^420^425^boolean isOut = !in.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^421^422^^^^420^425^boolean isOut = !in.hasNext (  ) ; Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^Iterator<DiGraphEdge<N, E>> curIterator =  in ? out : isOut;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? in : out;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^Iterator<DiGraphEdge<N, E>> curIterator  =  in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^Iterator<DiGraphEdge<N, E>> curIterator  =  out ;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^DiGraphEdge<N, E> s = curIterator .hasNext (  )  ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList (  ) ;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> list = Lists.newArrayList (  ) ;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> result = Lists.newArrayList (  ) ;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return s ? isOut.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P12_Insert_Condition]^if  ( outEdge.getDestination (  )  == dNode2 )  { return isOut ? s.getDestination (  )  : s.getSource (  ) ; }^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return isOut ? s .getSource (  )   : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^429^^^^^428^430^throw new UnsupportedOperationException  (" ")  ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^destNode =  null;^473^^^^^472^474^destNode = node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setDestination [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^sourceNode = node;destNode = node;^473^^^^^472^474^destNode = node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setDestination [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^this.destNode = destNode;destNode = node;^473^^^^^472^474^destNode = node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setDestination [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^sourceNode =  null;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^this.sourceNode = sourceNode;sourceNode = node;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^destNode = node;sourceNode = node;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P11_Insert_Donor_Statement]^this.destNode = destNode;sourceNode = node;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return edgeValue;^483^^^^^482^484^return value;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^annotation = annotation;^494^^^^^493^495^annotation = data;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^annotation =  null;^494^^^^^493^495^annotation = data;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return "lac";^499^^^^^498^500^return "black";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getColor [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P1_Replace_Type]^return value != null ? value.tochar (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^return value == null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return value != null ? value.toString (  )  : "ull";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return edgeValue != null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^return value ! =  "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P6_Replace_Expression]^return value ! =  value.toString (  )  ;^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return value != null ? value.Object (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return  (  ( LinkedDirectedGraphNode<N, E> )  sourceNode ) .getInEdges (  ) ;^509^^^^^508^510^return  (  ( LinkedDirectedGraphNode<N, E> )  sourceNode ) .getId (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode1Id [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^509^^^^^508^510^return  (  ( LinkedDirectedGraphNode<N, E> )  sourceNode ) .getId (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode1Id [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return  (  ( LinkedDirectedGraphNode<N, E> )  destNode ) .getInEdges (  ) ;^514^^^^^513^515^return  (  ( LinkedDirectedGraphNode<N, E> )  destNode ) .getId (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode2Id [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^514^^^^^513^515^return  (  ( LinkedDirectedGraphNode<N, E> )  destNode ) .getId (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode2Id [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^return sourceNode.toString (  >  )  + " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P2_Replace_Operator]^return sourceNode.toString (  )   !=  " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^return sourceNode.toString (  )  + " ->" + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return destNode.toString (  )  + " -> " + sourceNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P7_Replace_Invocation]^return sourceNode.getOutEdges (  )  + " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^return sourceNode .Object (  )   + " -> " + destNode^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P14_Delete_Statement]^^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^return null;^529^^^^^528^530^return destNode;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^private List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList (  ) ;^337^^^^^332^342^protected List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^protected List<DiGraphEdge<N, E>> outEdgeList  = null ;^338^339^^^^338^339^protected List<DiGraphEdge<N, E>> outEdgeList = Lists.newArrayList (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^private final N value;^341^^^^^336^346^protected final N value;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^private Annotation annotation;^343^^^^^338^348^protected Annotation annotation;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P1_Replace_Type]^protected  short  id;^345^^^^^340^350^protected int id;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P1_Replace_Type]^private static  short  totalNodes = 0;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P3_Replace_Literal]^private static int totalNodes = totalNodes;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^private static int totalNodes = 4;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^private final Iterator<DiGraphEdge<N, E>> in ;^411^^^^^406^416^private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P8_Replace_Mix]^private final Iterator<DiGraphEdge<N, E>> out ;^412^^^^^407^417^private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[P5_Replace_Variable]^this.value = value;^355^^^^^354^357^this.value = nodeValue;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] <init> [RETURN_TYPE] LinkedDirectedGraph$LinkedDirectedGraphNode(N)   N nodeValue [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P8_Replace_Mix]^this.id  = null ;^356^^^^^354^357^this.id = totalNodes++;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] <init> [RETURN_TYPE] LinkedDirectedGraph$LinkedDirectedGraphNode(N)   N nodeValue [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^return nodeValue;^361^^^^^360^362^return value;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getValue [RETURN_TYPE] N   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[P5_Replace_Variable]^annotation = annotation;^372^^^^^371^373^annotation = data;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P8_Replace_Mix]^annotation =  null;^372^^^^^371^373^annotation = data;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P3_Replace_Literal]^return "whhite";^377^^^^^376^378^return "white";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getColor [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P3_Replace_Literal]^return "LD" + id;^382^^^^^381^383^return "LDN" + id;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getId [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P5_Replace_Variable]^return "LDN" + totalNodes;^382^^^^^381^383^return "LDN" + id;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getId [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P8_Replace_Mix]^return "LDN"  ^  id;^382^^^^^381^383^return "LDN" + id;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getId [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P1_Replace_Type]^return value != null ? value.tochar (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P2_Replace_Operator]^return value == null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P3_Replace_Literal]^return value != null ? value.toString (  )  : "ull";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P5_Replace_Variable]^return nodeValue != null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P6_Replace_Expression]^return value ! =  "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P6_Replace_Expression]^return value ! =  value.toString (  )  ;^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P7_Replace_Invocation]^return value != null ? value.Object (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P8_Replace_Mix]^return value != false ? value .Object (  )   : "false";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P14_Delete_Statement]^^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P14_Delete_Statement]^^392^^^^^391^393^return getLabel (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P2_Replace_Operator]^return in.hasNext (  )  && out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P5_Replace_Variable]^return out.hasNext (  )  || in.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P7_Replace_Invocation]^return in.next (  )  || out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P7_Replace_Invocation]^return in .next (  )   || out^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P8_Replace_Mix]^return 0.hasNext (  )  || out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P14_Delete_Statement]^^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P8_Replace_Mix]^return in.hasNext (  )  || null.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P7_Replace_Invocation]^boolean isOut = !in.next (  ) ;^421^^^^^420^425^boolean isOut = !in.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P14_Delete_Statement]^^421^^^^^420^425^boolean isOut = !in.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P5_Replace_Variable]^Iterator<DiGraphEdge<N, E>> curIterator =  out ? isOut : in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P5_Replace_Variable]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? in : out;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P6_Replace_Expression]^Iterator<DiGraphEdge<N, E>> curIterator  =  in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P6_Replace_Expression]^Iterator<DiGraphEdge<N, E>> curIterator  =  out ;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P11_Insert_Donor_Statement]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P14_Delete_Statement]^^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P5_Replace_Variable]^return s ? isOut.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P7_Replace_Invocation]^return isOut ? s .getSource (  )   : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P7_Replace_Invocation]^return isOut ? s.getDestination (  )  : s .getDestination (  )  ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P14_Delete_Statement]^^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P8_Replace_Mix]^private final Iterator<DiGraphEdge<N, E>> in ;^411^^^^^406^416^private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^[CLASS] NeighborIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P5_Replace_Variable]^private final Iterator<DiGraphEdge<N, E>> out = null.iterator (  ) ;^412^^^^^407^417^private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[CLASS] NeighborIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P8_Replace_Mix]^private final Iterator<DiGraphEdge<N, E>> out  = null ;^412^^^^^407^417^private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[CLASS] NeighborIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[P2_Replace_Operator]^return in.hasNext (  )  && out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  boolean  
[P5_Replace_Variable]^return out.hasNext (  )  || in.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  boolean  
[P7_Replace_Invocation]^return in.next (  )  || out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  boolean  
[P14_Delete_Statement]^^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  boolean  
[P7_Replace_Invocation]^boolean isOut = !in.next (  ) ;^421^^^^^420^425^boolean isOut = !in.hasNext (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P14_Delete_Statement]^^421^422^^^^420^425^boolean isOut = !in.hasNext (  ) ; Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P5_Replace_Variable]^Iterator<DiGraphEdge<N, E>> curIterator =  out ? isOut : in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P5_Replace_Variable]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? in : out;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P6_Replace_Expression]^Iterator<DiGraphEdge<N, E>> curIterator  =  in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P6_Replace_Expression]^Iterator<DiGraphEdge<N, E>> curIterator  =  out ;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P11_Insert_Donor_Statement]^DiGraphEdge<N, E> s = curIterator.next (  ) ;Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P11_Insert_Donor_Statement]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;DiGraphEdge<N, E> s = curIterator.next (  ) ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P7_Replace_Invocation]^DiGraphEdge<N, E> s = curIterator .hasNext (  )  ;^423^^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P14_Delete_Statement]^^423^424^^^^420^425^DiGraphEdge<N, E> s = curIterator.next (  ) ; return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P5_Replace_Variable]^return s ? isOut.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P8_Replace_Mix]^return isOut ? s .getSource (  )   : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P14_Delete_Statement]^^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P7_Replace_Invocation]^return isOut ? s.getDestination (  )  : s .getDestination (  )  ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[P5_Replace_Variable]^this.value = value;^456^^^^^454^459^this.value = edgeValue;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P8_Replace_Mix]^this.sourceNode =  null;^457^^^^^454^459^this.sourceNode = sourceNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^sourceNode = node;this.sourceNode = sourceNode;^457^^^^^454^459^this.sourceNode = sourceNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^this.destNode = destNode;this.sourceNode = sourceNode;^457^^^^^454^459^this.sourceNode = sourceNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P8_Replace_Mix]^this.destNode =  null;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^this.sourceNode = sourceNode;this.destNode = destNode;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^sourceNode = node;this.destNode = destNode;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^destNode = node;this.destNode = destNode;^458^^^^^454^459^this.destNode = destNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P8_Replace_Mix]^destNode =  null;^473^^^^^472^474^destNode = node;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setDestination [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^sourceNode = node;destNode = node;^473^^^^^472^474^destNode = node;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setDestination [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^this.destNode = destNode;destNode = node;^473^^^^^472^474^destNode = node;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setDestination [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P8_Replace_Mix]^sourceNode =  null;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^this.sourceNode = sourceNode;sourceNode = node;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^destNode = node;sourceNode = node;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P11_Insert_Donor_Statement]^this.destNode = destNode;sourceNode = node;^478^^^^^477^479^sourceNode = node;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setSource [RETURN_TYPE] void   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P5_Replace_Variable]^return edgeValue;^483^^^^^482^484^return value;^[CLASS] LinkedDirectedGraphEdge  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[P5_Replace_Variable]^annotation = annotation;^494^^^^^493^495^annotation = data;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P8_Replace_Mix]^annotation =  null;^494^^^^^493^495^annotation = data;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P3_Replace_Literal]^return "blackbla";^499^^^^^498^500^return "black";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getColor [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P1_Replace_Type]^return value != null ? value.tochar (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P2_Replace_Operator]^return value == null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P3_Replace_Literal]^return value != null ? value.toString (  )  : "ull";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P5_Replace_Variable]^return edgeValue != null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P6_Replace_Expression]^return value ! =  "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P6_Replace_Expression]^return value ! =  value.toString (  )  ;^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P8_Replace_Mix]^return value  =  "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P14_Delete_Statement]^^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P14_Delete_Statement]^^509^^^^^508^510^return  (  ( LinkedDirectedGraphNode<N, E> )  sourceNode ) .getId (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] getNode1Id [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P14_Delete_Statement]^^514^^^^^513^515^return  (  ( LinkedDirectedGraphNode<N, E> )  destNode ) .getId (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] getNode2Id [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P2_Replace_Operator]^return sourceNode.toString (  !=  )  + " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P2_Replace_Operator]^return sourceNode.toString (  )   &  " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P3_Replace_Literal]^return sourceNode.toString (  )  + "-> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P5_Replace_Variable]^return destNode.toString (  )  + " -> " + sourceNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P8_Replace_Mix]^return sourceNode .Object (  )   + " -> " + destNode^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[P14_Delete_Statement]^^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
