[P8_Replace_Mix]^private  Set<Node> tryNodesContainingReturnStatements;^36^^^^^31^41^private final Set<Node> tryNodesContainingReturnStatements;^[CLASS] RemoveTryCatch RemoveTryCatchCode   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^39^^^^^38^41^this.compiler = compiler;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  
[P8_Replace_Mix]^this.tryNodesContainingReturnStatements  = null ;^40^^^^^38^41^this.tryNodesContainingReturnStatements = new HashSet<Node> (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[P14_Delete_Statement]^^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[P2_Replace_Operator]^if  ( info != null || info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^if  ( info == null && info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P6_Replace_Expression]^if  ( info != null ) {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P6_Replace_Expression]^if  (  info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^if  ( info != false ) {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P15_Unwrap_Block]^return ;^57^58^59^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  { return; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P16_Remove_Block]^^57^58^59^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  { return; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P13_Insert_Block]^if  (  ( finallyBlock != null )  &&  ( tryNodesContainingReturnStatements.contains ( n )  )  )  {     return ; }^57^^^^^42^72^[Delete]^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^if  ( finallyBlock != null || tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^if  ( finallyBlock == null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( tryBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( tryNodesContainingReturnStatements != null && finallyBlock.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( n != finallyBlockull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P6_Replace_Expression]^if  ( finallyBlock != null ) {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P6_Replace_Expression]^if  (  tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( finallyBlock != null && tryNodesContainingReturnStatements.add ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( finallyBlock != null && tryNodesContainingReturnStatements .add ( tryBlock )   )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^if  ( finallyBlock != this && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P15_Unwrap_Block]^return ;^67^68^69^70^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  { return; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P16_Remove_Block]^^67^68^69^70^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  { return; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.shouldPreserveTry (  )  )  )  {     return ; }^67^^^^^52^82^[Delete]^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( n.hasOneChild (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( catchBlock.addChildToFront (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( catchBlock .replaceChild ( catchBlock , block )   )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(catchBlock);^73^74^75^^^58^88^if  ( catchBlock.hasOneChild (  )  )  { NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P16_Remove_Block]^^73^74^75^^^58^88^if  ( catchBlock.hasOneChild (  )  )  { NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^NodeUtil.redeclareVarsInsideBranch ( tryBlock ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^NodeUtil.isStatementBlock ( catchBlock ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^NodeUtil.isStatementBlock ( tryBlock ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P13_Insert_Block]^if  ( catchBlock.hasOneChild (  )  )  {     redeclareVarsInsideBranch ( catchBlock ) ; }^74^^^^^59^89^[Delete]^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( !NodeUtil.isStatementBlock ( n )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( !NodeUtil.redeclareVarsInsideBranch ( parent )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^block =  n;^89^^^^^83^90^block = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( finallyBlock, tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( n, finallyBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild (  tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^parent .hasOneChild (  )  ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^parent.replaceChild ( tryBlock, tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, block ) ;parent.replaceChild ( n, tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^block ;^84^^^^^69^99^block = new Node ( Token.BLOCK ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( tryBlock, block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( n, tryBlock ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild (  block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( block, n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^parent .hasOneChild (  )  ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^parent.replaceChild ( n, n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^85^86^^^^70^100^parent.replaceChild ( n, block ) ; block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, tryBlock ) ;parent.replaceChild ( n, block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^block.addChildToFront ( n ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^block.addChildAfter ( tryBlock ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^block .addChildAfter ( anc , tryBlock )  ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^block .addChildAfter ( finallyBlock , block )  ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^block.addChildAfter ( finallyBlock, tryBlock ) ;block.addChildToFront ( tryBlock ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^if  ( finallyBlock == null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( tryBlock != null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^if  ( tryBlock != false )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P15_Unwrap_Block]^block.addChildAfter(finallyBlock, tryBlock);^93^94^95^^^78^108^if  ( finallyBlock != null )  { block.addChildAfter ( finallyBlock, tryBlock ) ; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P16_Remove_Block]^^93^94^95^^^78^108^if  ( finallyBlock != null )  { block.addChildAfter ( finallyBlock, tryBlock ) ; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^block.addChildAfter ( parent, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^block.addChildAfter (  tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^block.addChildAfter ( finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^block.addChildAfter ( tryBlock, finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^block.addChildAfter ( finallyBlock, parent ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^block.addChildToFront ( tryBlock ) ;block.addChildAfter ( finallyBlock, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     block.addChildAfter ( finallyBlock, tryBlock ) ; }^94^^^^^79^109^[Delete]^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^if  ( anc.getType (  )  <= Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( tryBlock.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( anc.addChildToFront (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^if  ( tryBlock.addChildToFront (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P15_Unwrap_Block]^tryNodesContainingReturnStatements.add(anc); break;^104^105^106^107^^89^119^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P16_Remove_Block]^^104^105^106^107^^89^119^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements.contains ( anc ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements .contains ( block )  ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^tryNodesContainingReturnStatements.contains ( n ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^105^106^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ; break;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^for  ( Node anc = tryBlock;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^for  ( Node parent = anc;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^if  ( anc.getType (  )  >= Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( anc.addChildToFront (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^if  ( tryBlock.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P15_Unwrap_Block]^tryNodesContainingReturnStatements.add(anc); break;^104^105^106^107^^101^108^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P16_Remove_Block]^^104^105^106^107^^101^108^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements.contains ( anc ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^tryNodesContainingReturnStatements .contains ( block )  ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( anc .getParent (  )   == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements .contains ( tryBlock )  ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^105^106^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ; break;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^block  =  block ;^84^^^^^69^99^block = new Node ( Token.BLOCK ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^block =  n;^89^^^^^74^104^block = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^anc = parent.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^anc = anc.addChildToFront (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^anc = anc .getNext (  )   )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^anc =  n.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^JSDocInfo info = tryBlock.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^JSDocInfo info = n.addChildToFront (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^JSDocInfo info = n .getParent (  )  ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^Node tryBlock = finallyBlock.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^Node tryBlock = n.addChildToFront (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^Node tryBlock = finallyBlock.addChildToFront (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^Node catchBlock = tryBlock.getNext (  ) ;Node tryBlock = n.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^Node catchBlock = parent.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^Node catchBlock = tryBlock.addChildToFront (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^Node catchBlock = tryBlock .getParent (  )  ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^Node catchBlock = n .getParent (  )  ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node catchBlock = tryBlock.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;Node catchBlock = tryBlock.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^Node finallyBlock = catchBlock == null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^Node finallyBlock = tryBlock != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P6_Replace_Expression]^Node finallyBlock  =  null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P6_Replace_Expression]^Node finallyBlock  =  catchBlock.getNext (  )  ;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^Node finallyBlock = catchBlock != null ? catchBlock.addChildToFront (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^Node finallyBlock = catchBlock != null ? catchBlock .getParent (  )   : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^Node finallyBlock = tryBlock != null ? catchBlock.addChildToFront (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^Node catchBlock = tryBlock.getNext (  ) ;Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P3_Replace_Literal]^boolean isInTryBlock = true;^100^^^^^85^115^boolean isInTryBlock = false;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^for  ( Node anc = n;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^switch  ( tryBlock.getType (  )  )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^switch  ( n.addChildToFront (  )  )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^switch  ( parent.getType (  )  )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^JSDocInfo info = parent.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^Node tryBlock = n .replaceChild ( finallyBlock , block )  ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^Node tryBlock = parent.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^61^62^^^^46^76^Node tryBlock = n.getFirstChild (  ) ; Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^Node finallyBlock = n != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^tryNodesContainingReturnStatements.contains ( parent )  )  {^68^^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements.add ( n )  )  {^68^^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^tryNodesContainingReturnStatements.add ( parent )  )  {^68^^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^68^69^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  { return;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( parent.hasOneChild (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^if  ( catchBlock .replaceChild ( parent , parent )   )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^n.addChildToFront (  ) ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^n .replaceChild ( n , finallyBlock )  ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^n.detachChildreparent (  ) ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( !NodeUtil.isStatementBlock ( finallyBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^block.addChildToFront ( parent ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( finallyBlock, tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( n, parent ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild (  tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, block ) ;parent.replaceChild ( n, tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^block .addChildToFront ( anc )  ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^block.addChildAfter ( finallyBlock, n ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^96^97^^^^81^111^compiler.reportCodeChange (  ) ; break;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^anc != null && n.getType (  )  != Token.FUNCTION;^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P7_Replace_Invocation]^anc != null && anc.addChildToFront (  )  != Token.FUNCTION;^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P12_Insert_Condition]^if  ( anc.getType (  )  == Token.TRY )  { anc != null && anc.getType (  )  != Token.FUNCTION; }^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^anc = tryBlock.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^103^104^105^^^88^118^anc = anc.getParent (  )  )  { if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P8_Replace_Mix]^tryNodesContainingReturnStatements.contains ( tryBlock ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P14_Delete_Statement]^^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[P2_Replace_Operator]^if  ( info != null || info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info == null && info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null ) {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != false && info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P15_Unwrap_Block]^return ;^57^58^59^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  { return; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P16_Remove_Block]^^57^58^59^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  { return; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( finallyBlock != null )  &&  ( tryNodesContainingReturnStatements.contains ( n )  )  )  {     return ; }^57^^^^^42^72^[Delete]^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P2_Replace_Operator]^if  ( finallyBlock != null || tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P2_Replace_Operator]^if  ( finallyBlock == null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( parent != null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( finallyBlock != tryBlockull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( finallyBlock != null && 1.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n != finallyBlockull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( finallyBlock != tryNodesContainingReturnStatementsull && n.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P6_Replace_Expression]^if  ( finallyBlock != null ) {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P6_Replace_Expression]^if  (  tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( finallyBlock != null && tryNodesContainingReturnStatements.add ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( finallyBlock != false && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P15_Unwrap_Block]^return ;^67^68^69^70^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  { return; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P16_Remove_Block]^^67^68^69^70^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  { return; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.shouldPreserveTry (  )  )  )  {     return ; }^67^^^^^52^82^[Delete]^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n.hasOneChild (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( catchBlock.addChildToFront (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( catchBlock .replaceChild ( n , tryBlock )   )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(catchBlock);^73^74^75^^^58^88^if  ( catchBlock.hasOneChild (  )  )  { NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P16_Remove_Block]^^73^74^75^^^58^88^if  ( catchBlock.hasOneChild (  )  )  { NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^NodeUtil.redeclareVarsInsideBranch ( tryBlock ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^NodeUtil.isStatementBlock ( catchBlock ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^NodeUtil.redeclareVarsInsideBranch ( n ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P13_Insert_Block]^if  ( catchBlock.hasOneChild (  )  )  {     redeclareVarsInsideBranch ( catchBlock ) ; }^74^^^^^59^89^[Delete]^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( !NodeUtil.isStatementBlock ( finallyBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( !NodeUtil.redeclareVarsInsideBranch ( parent )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( !NodeUtil.isStatementBlock ( n )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block = n;^89^^^^^83^90^block = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^block =  tryBlock;^89^^^^^83^90^block = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( tryBlock, tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( n, parent ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild (  tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^parent.replaceChild ( n, finallyBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^88^89^^^^83^90^parent.replaceChild ( n, tryBlock ) ; block = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, block ) ;parent.replaceChild ( n, tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^block  = null ;^84^^^^^69^99^block = new Node ( Token.BLOCK ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( tryBlock, block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( n, parent ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild (  block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( block, n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^parent.replaceChild ( n, tryBlock ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^85^86^^^^70^100^parent.replaceChild ( n, block ) ; block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, tryBlock ) ;parent.replaceChild ( n, block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block.addChildToFront ( n ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^block.addChildAfter ( tryBlock ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^block .addChildAfter ( block , block )  ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^block.addChildAfter ( n ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^block.addChildAfter ( finallyBlock, tryBlock ) ;block.addChildToFront ( tryBlock ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P2_Replace_Operator]^if  ( finallyBlock == null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( parent != null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( finallyBlock != true )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P15_Unwrap_Block]^block.addChildAfter(finallyBlock, tryBlock);^93^94^95^^^78^108^if  ( finallyBlock != null )  { block.addChildAfter ( finallyBlock, tryBlock ) ; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P16_Remove_Block]^^93^94^95^^^78^108^if  ( finallyBlock != null )  { block.addChildAfter ( finallyBlock, tryBlock ) ; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block.addChildAfter ( tryBlock, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block.addChildAfter ( finallyBlock, parent ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block.addChildAfter (  tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block.addChildAfter ( finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block.addChildAfter ( tryBlock, finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^block.addChildAfter ( parent, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^block.addChildToFront ( tryBlock ) ;block.addChildAfter ( finallyBlock, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     block.addChildAfter ( finallyBlock, tryBlock ) ; }^94^^^^^79^109^[Delete]^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P2_Replace_Operator]^if  ( anc.getType (  )  <= Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( tryBlock.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( anc.getType (  )  == Token.null )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( anc.addChildToFront (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( anc .getParent (  )   == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( tryBlock.addChildToFront (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P15_Unwrap_Block]^tryNodesContainingReturnStatements.add(anc); break;^104^105^106^107^^89^119^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P16_Remove_Block]^^104^105^106^107^^89^119^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^tryNodesContainingReturnStatements.add ( n ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^for  ( Node anc = tryBlock;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^for  ( Node tryBlock = parent;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^for  ( Node parent = anc;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^for  ( Node parent = parent;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P2_Replace_Operator]^if  ( anc.getType (  )  >= Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( anc.addChildToFront (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( anc .getParent (  )   == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P15_Unwrap_Block]^tryNodesContainingReturnStatements.add(anc); break;^104^105^106^107^^101^108^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P16_Remove_Block]^^104^105^106^107^^101^108^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^tryNodesContainingReturnStatements.add ( n ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( tryBlock.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements .contains ( block )  ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^tryNodesContainingReturnStatements .contains ( n )  ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^105^106^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ; break;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^block  =  block ;^84^^^^^69^99^block = new Node ( Token.BLOCK ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block = finallyBlock;^89^^^^^74^104^block = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^block =  tryBlock;^89^^^^^74^104^block = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^anc = n.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^anc = anc.addChildToFront (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^anc =  parent.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^JSDocInfo info = finallyBlock.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^JSDocInfo info = n.addChildToFront (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^JSDocInfo info = parent.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^Node tryBlock = finallyBlock.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^Node tryBlock = n.addChildToFront (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^Node tryBlock = parent.addChildToFront (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Node catchBlock = tryBlock.getNext (  ) ;Node tryBlock = n.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^Node catchBlock = n.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^Node catchBlock = tryBlock.addChildToFront (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^Node catchBlock = tryBlock .getParent (  )  ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node catchBlock = tryBlock.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;Node catchBlock = tryBlock.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P2_Replace_Operator]^Node finallyBlock = catchBlock == null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^Node finallyBlock = tryBlock != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P6_Replace_Expression]^Node finallyBlock  =  null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P6_Replace_Expression]^Node finallyBlock  =  catchBlock.getNext (  )  ;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^Node finallyBlock = catchBlock != null ? catchBlock.addChildToFront (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Node catchBlock = tryBlock.getNext (  ) ;Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P3_Replace_Literal]^boolean isInTryBlock = true;^100^^^^^85^115^boolean isInTryBlock = false;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^for  ( Node anc = n;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^switch  ( tryBlock.getType (  )  )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^switch  ( n.addChildToFront (  )  )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^JSDocInfo info = tryBlock.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^Node tryBlock = tryBlock.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^Node tryBlock = n .replaceChild ( block , block )  ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^61^62^^^^46^76^Node tryBlock = n.getFirstChild (  ) ; Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^Node catchBlock = parent.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^Node catchBlock = finallyBlock.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^Node finallyBlock = parent != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^Node finallyBlock = catchBlock != null ? catchBlock .getParent (  )   : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^Node finallyBlock = parent != null ? catchBlock .getParent (  )   : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements.add ( n )  )  {^68^^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^tryNodesContainingReturnStatements.contains ( finallyBlock )  )  {^68^^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^68^69^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  { return;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( catchBlock .replaceChild ( parent , n )   )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( tryBlock.hasOneChild (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^n.detachChildreparent (  ) ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^n.addChildToFront (  ) ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^n .replaceChild ( block , tryBlock )  ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^n.detachChildretryBlock (  ) ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( !NodeUtil.isStatementBlock ( tryBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( !NodeUtil .redeclareVarsInsideBranch ( n )   )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( !NodeUtil.redeclareVarsInsideBranch ( finallyBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^parent .hasOneChild (  )  ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^block.addChildToFront ( parent ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^block .addChildAfter ( catchBlock , n )  ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( parent, tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild (  tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^parent.replaceChild ( n, parent ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, block ) ;parent.replaceChild ( n, tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^96^97^^^^81^111^compiler.reportCodeChange (  ) ; break;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^anc != null && n.getType (  )  != Token.FUNCTION;^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^anc != null && anc.addChildToFront (  )  != Token.FUNCTION;^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^anc != null && parent.addChildToFront (  )  != Token.FUNCTION;^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P12_Insert_Condition]^if  ( anc.getType (  )  == Token.TRY )  { anc != null && anc.getType (  )  != Token.FUNCTION; }^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^anc = parent.addChildToFront (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^103^104^105^^^88^118^anc = anc.getParent (  )  )  { if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P8_Replace_Mix]^if  ( parent.addChildToFront (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P7_Replace_Invocation]^tryNodesContainingReturnStatements .contains ( tryBlock )  ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[P14_Delete_Statement]^^105^106^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ; break;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
