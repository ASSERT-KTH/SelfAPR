[P3_Replace_Literal]^static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning ( "SC_USESC_USED_GLOBAL_THIS", "dangerous use of the global 'this' object" ) ;^59^60^61^^^59^61^static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning ( "JSC_USED_GLOBAL_THIS", "dangerous use of the global 'this' object" ) ;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning ( "JSC_USED_GLOBAL_THIS", "rous use of the angerous use of the global 'this' object" ) ;^59^60^61^^^59^61^static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning ( "JSC_USED_GLOBAL_THIS", "dangerous use of the global 'this' object" ) ;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType GLOBAL_THIS  = null ;^59^60^61^^^59^61^static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning ( "JSC_USED_GLOBAL_THIS", "dangerous use of the global 'this' object" ) ;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^63^^^^^58^68^private final AbstractCompiler compiler;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P8_Replace_Mix]^private  CheckLevel level;^64^^^^^59^69^private final CheckLevel level;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P8_Replace_Mix]^private Node assignLhsChild = false;^71^^^^^66^76^private Node assignLhsChild = null;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P12_Insert_Condition]^if  ( assignLhsChild == null )  { private Node assignLhsChild = null; }^71^^^^^66^76^private Node assignLhsChild = null;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P12_Insert_Condition]^if  ( n == assignLhsChild )  { private Node assignLhsChild = null; }^71^^^^^66^76^private Node assignLhsChild = null;^[CLASS] CheckGlobalThis   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^74^^^^^73^76^this.compiler = compiler;^[CLASS] CheckGlobalThis  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  
[P8_Replace_Mix]^this.level =  null;^75^^^^^73^76^this.level = level;^[CLASS] CheckGlobalThis  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs.getType (  )  == Token.FUNCTION )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( jsDoc != null && jsDoc.isConstructor() || jsDoc.hasThisType() )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( jsDoc != null )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( jsDoc.isConstructor( || jsDoc.hasThisType()) )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( n .getParent (  )   == Token.FUNCTION )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.4 )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P9_Replace_Statement]^if  ( lhs.getType (  )  == Token.GETPROP )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P9_Replace_Statement]^if  ( gramps.getType (  )  == Token.VAR )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( jsDoc != null ||  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( jsDoc == null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  && jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  ) {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  (  jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( jsDoc != null )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( jsDoc.isConstructor( || jsDoc.hasThisType()) )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( jsDoc != null &&  ( jsDoc .hasThisType (  )   || jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( jsDoc != this &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^return false;^88^89^90^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^88^89^90^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  (  ( leftName != null )  &&  ( leftName.contains ( " )  )  )  {     return false; }^88^^^^^73^103^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^return true;^89^^^^^74^104^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^JSDocInfo jsDoc = getFunctionJsDocInfo ( rhs ) ;^87^^^^^72^102^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^87^^^^^72^102^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^JSDocInfo jsDoc = getFunctionJsDocInfo ( parent ) ;^87^^^^^72^102^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P14_Delete_Statement]^^87^^^^^72^102^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^jsDoc = gramps.getJSDocInfo (  ) ;JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^87^^^^^72^102^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^jsDoc = parent.getJSDocInfo (  ) ;JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^87^^^^^72^102^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( jsDoc != false &&  ( jsDoc.isConstructor (  )  ) {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.FUNCTION )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc .isConstructor (  )   )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( parent != null && parent.getType (  )  != Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs != null && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( parent != rhsull && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( n != parentull && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( parent != null ) {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( parent.getType (  )  == ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( n == lhs )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( assignLhsChild == null )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( lhs.getType() == GETPROP )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null && ") )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( parent != null && parent .getParent (  )   == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( parent != false ) {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P9_Replace_Statement]^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( n > lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( n >= lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs == lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( n == rhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( assignLhsChild == null )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( lhs.getType() == GETPROP )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null && ") )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( lhs.getType (  )  <= Token.GETPROP )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs.getType (  )  == Token.GETPROP )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null && ") )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs .getParent (  )   == Token.GETPROP )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P9_Replace_Statement]^if  ( gramps.getType (  )  == Token.VAR )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^if (lhs.getLastChild().getString().equals("prototype")) {    return false;}; java.lang.String leftName = lhs.getQualifiedName(); if ((leftName != null) && (leftName.contains(".prototype."))) {    return false;};^107^108^109^110^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  { if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^107^108^109^110^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  { if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "to" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs.getLastChild (  ) .getString (  )  .getString (  )   )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs.getLastChild (  ) .equals (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs.getLastChild (  )  .equals ( leftName )  .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^return false;^108^109^110^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^108^109^110^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  (  ( leftName != null )  &&  ( leftName.contains ( " )  )  )  {     return false; }^108^^^^^97^116^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^return true;^109^^^^^97^116^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( leftName != null || leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( leftName == null && leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( "" )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null ) {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  (  leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( leftName != this ) {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^return false;^112^113^114^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^112^113^114^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  (  ( jsDoc != null )  &&  (  ( jsDoc.isConstructor (  )  )  ||  ( jsDoc.hasThisType (  )  )  )  )  {     return false; }^112^^^^^97^116^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {     return false; }^112^^^^^97^116^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^return true;^113^^^^^97^116^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P1_Replace_Type]^char leftName = lhs.getQualifiedName (  ) ;^111^^^^^97^116^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^String leftName = parent.getQualifiedName (  ) ;^111^^^^^97^116^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "rrototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs .getFirstChild (  )  .getString (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {     return false; }^108^^^^^97^116^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( parent.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( rhs .getFirstChild (  )  .getString (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^String leftName = rhs.getQualifiedName (  ) ;^111^^^^^97^116^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^String leftName = lhs .getParent (  )  ;^111^^^^^97^116^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P14_Delete_Statement]^^111^112^113^114^^97^116^String leftName = lhs.getQualifiedName (  ) ; if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( "ototypeprototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "o" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( "totypprototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( "t" )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( assignLhsChild != null )  {^101^^^^^86^116^if  ( assignLhsChild == null )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs == null )  {^101^^^^^86^116^if  ( assignLhsChild == null )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( assignLhsChild == this )  {^101^^^^^86^116^if  ( assignLhsChild == null )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^assignLhsChild = lhs;^101^102^103^^^86^116^if  ( assignLhsChild == null )  { assignLhsChild = lhs; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^101^102^103^^^86^116^if  ( assignLhsChild == null )  { assignLhsChild = lhs; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  ( n ==  ( assignLhsChild )  )  {     assignLhsChild = null; }^101^^^^^86^116^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^assignLhsChild =  rhs;^102^^^^^87^117^assignLhsChild = lhs;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^assignLhsChild = null;assignLhsChild = lhs;^102^^^^^87^117^assignLhsChild = lhs;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P12_Insert_Condition]^if  ( assignLhsChild == null )  { assignLhsChild = lhs; }^102^^^^^87^117^assignLhsChild = lhs;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( lhs.getType (  )  != Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null && ") )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs .getParent (  )   == Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P9_Replace_Statement]^if  ( gramps.getType (  )  == Token.VAR )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^if (lhs.getLastChild().getString().equals("prototype")) {    return false;}; java.lang.String leftName = lhs.getQualifiedName(); if ((leftName != null) && (leftName.contains(".prototype."))) {    return false;};^107^108^109^110^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  { if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^107^108^109^110^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  { if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "ot" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs.getLastChild (  ) .equals (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs.getLastChild (  )  .equals ( leftName )  .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( parent.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^return false;^108^109^110^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^108^109^110^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  (  ( leftName != null )  &&  ( leftName.contains ( " )  )  )  {     return false; }^108^^^^^93^123^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^return true;^109^^^^^94^124^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( leftName != null || leftName.contains ( ".prototype." )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( leftName == null && leftName.contains ( ".prototype." )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( "p" )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  ( leftName != null ) {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P6_Replace_Expression]^if  (  leftName.contains ( ".prototype." )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( leftName != this ) {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P15_Unwrap_Block]^return false;^112^113^114^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P16_Remove_Block]^^112^113^114^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  (  ( jsDoc != null )  &&  (  ( jsDoc.isConstructor (  )  )  ||  ( jsDoc.hasThisType (  )  )  )  )  {     return false; }^112^^^^^97^127^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {     return false; }^112^^^^^97^127^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^return true;^113^^^^^98^128^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P1_Replace_Type]^char leftName = lhs.getQualifiedName (  ) ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^String leftName = rhs.getQualifiedName (  ) ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "rotrototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs.getLastChild (  ) .getString (  )  .getString (  )   )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( rhs.getLastChild (  ) .equals (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P13_Insert_Block]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {     return false; }^108^^^^^93^123^[Delete]^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^String leftName = parent.getQualifiedName (  ) ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P14_Delete_Statement]^^111^112^113^114^^96^126^String leftName = lhs.getQualifiedName (  ) ; if  ( leftName != null && leftName.contains ( ".prototype." )  )  { return false; }^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".prototype..prototype" )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototyp" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^if  ( lhs .getFirstChild (  )  .getString (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".prototype.p" )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( leftName != true ) {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^assignLhsChild =  null;^102^^^^^87^117^assignLhsChild = lhs;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^Node lhs = rhs.getFirstChild (  ) ;^94^^^^^79^109^Node lhs = parent.getFirstChild (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node lhs = parent.getFirstChild (  ) ;^94^^^^^79^109^Node lhs = parent.getFirstChild (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node lhs = parent.getFirstChild (  ) ;^94^^^^^79^109^Node lhs = parent.getFirstChild (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^Node rhs = parent.getNext (  ) ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^Node rhs = lhs .getParent (  )  ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^Node lhs = parent.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;Node rhs = lhs.getNext (  ) ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node rhs = lhs.getNext (  ) ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P14_Delete_Statement]^^94^95^^^^79^109^Node lhs = parent.getFirstChild (  ) ; Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P11_Insert_Donor_Statement]^jsDoc = parent.getJSDocInfo (  ) ;Node lhs = parent.getFirstChild (  ) ;^94^^^^^79^109^Node lhs = parent.getFirstChild (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^Node rhs = rhs.getNext (  ) ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P14_Delete_Statement]^^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( rhs.getType (  )  == Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( rhs .getFirstChild (  )  .getString (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".proto" )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( n <= lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( n != lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "rototy" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".prototype.." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( leftName != false && leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "otrototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( rhs.getLastChild (  ) .equals (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "ot" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( leftName != true && leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.GETPROP )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototypeotot" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".prototype.rot" )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( assignLhsChild == true )  {^101^^^^^86^116^if  ( assignLhsChild == null )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( rhs == this )  {^101^^^^^86^116^if  ( assignLhsChild == null )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prorototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".prototype.pro" )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^String leftName = lhs .getParent (  )  ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "ototyrototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( rhs.getLastChild (  ) .getString (  )  .getString (  )   )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".prototype.ype" )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototypeoto" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( "." )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^if  ( leftName != false && leftName.contains ( ".prototype." )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^Node lhs = rhs .getLastChild (  )  ;^94^^^^^79^109^Node lhs = parent.getFirstChild (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^String leftName = parent .getParent (  )  ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P7_Replace_Invocation]^Node lhs = parent .getLastChild (  )  ;^94^^^^^79^109^Node lhs = parent.getFirstChild (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototypeprotot" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P8_Replace_Mix]^String leftName = rhs .getParent (  )  ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^if  ( leftName != null && leftName.contains ( ".prototype.pr" )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P3_Replace_Literal]^return false;^119^^^^^104^134^return true;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[P2_Replace_Operator]^if  ( assignLhsChild != null || n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P2_Replace_Operator]^if  ( assignLhsChild == null && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P2_Replace_Operator]^if  ( assignLhsChild != null && n.getType (  )  != Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( assignLhsChild != rhsull && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( parent != null && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( n != assignLhsChildull && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P6_Replace_Expression]^if  ( assignLhsChild != null ) {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P6_Replace_Expression]^if  ( n.getType (  )  == THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P8_Replace_Mix]^if  (  rhs.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P9_Replace_Statement]^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, level, com.google.javascript.jscomp.CheckGlobalThis.GLOBAL_THIS));^123^124^125^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  { compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ; }^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P16_Remove_Block]^^123^124^125^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  { compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ; }^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, level )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( level, n, t, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, GLOBAL_THIS, level, n )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, GLOBAL_THIS, level )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, rhs, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P14_Delete_Statement]^^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P13_Insert_Block]^if  (  (  ( assignLhsChild )  != null )  &&  (  ( n.getType (  )  )  ==  ( THIS )  )  )  {     compiler.report ( make ( t, n, level, GLOBAL_THIS )  ) ; }^124^^^^^122^129^[Delete]^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, level, n, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P2_Replace_Operator]^if  ( n <= assignLhsChild )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( rhs == assignLhsChild )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( n == rhs )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( assignLhsChild == n )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P15_Unwrap_Block]^assignLhsChild = null;^126^127^128^^^122^129^if  ( n == assignLhsChild )  { assignLhsChild = null; }^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P16_Remove_Block]^^126^127^128^^^122^129^if  ( n == assignLhsChild )  { assignLhsChild = null; }^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P13_Insert_Block]^if  (  ( assignLhsChild )  == null )  {     assignLhsChild = lhs; }^126^^^^^122^129^[Delete]^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P8_Replace_Mix]^assignLhsChild = false;^127^^^^^122^129^assignLhsChild = null;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^assignLhsChild = lhs;assignLhsChild = null;^127^^^^^122^129^assignLhsChild = null;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P12_Insert_Condition]^if  ( assignLhsChild == null )  { assignLhsChild = null; }^127^^^^^122^129^assignLhsChild = null;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P8_Replace_Mix]^assignLhsChild = true;^127^^^^^122^129^assignLhsChild = null;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[P5_Replace_Variable]^JSDocInfo jsDoc = rhs.getJSDocInfo (  ) ;^142^^^^^141^157^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P7_Replace_Invocation]^JSDocInfo jsDoc = n .getLastChild (  )  ;^142^^^^^141^157^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^142^^^^^141^157^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P14_Delete_Statement]^^142^^^^^141^157^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^jsDoc = gramps.getJSDocInfo (  ) ;JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^142^^^^^141^157^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^jsDoc = parent.getJSDocInfo (  ) ;JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^142^^^^^141^157^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^Node parent = rhs.getParent (  ) ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node parent = n.getParent (  ) ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node parent = n.getParent (  ) ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;Node parent = n.getParent (  ) ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P7_Replace_Invocation]^Node parent = n .getNext (  )  ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P14_Delete_Statement]^^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( jsDoc != null )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( parentType == NAME || parentType == ASSIGN )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( parentType == NAME )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( parentType == ASSIGN )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( jsDoc == null && parentType == NAME )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( gramps.getType() == VAR )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^if  ( jsDoc == false )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( parentType == Token.NAME && parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( parentType != Token.NAME || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( parentType <= Token.NAME || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( parentType >= Token.NAME || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( rhsType == Token.NAME || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( parent == Token.NAME || parentTypeType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( parentType == Token.NAME ) {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  (  parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( parentType == NAME )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( parentType == ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( jsDoc == null && parentType == NAME )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( jsDoc == null )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( gramps.getType() == VAR )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P13_Insert_Block]^if  ( jsDoc == null )  {     int parentType = parent.getType (  ) ;     if  (  ( parentType ==  ( NAME )  )  ||  ( parentType ==  ( ASSIGN )  )  )  {         jsDoc = parent.getJSDocInfo (  ) ;         if  (  ( jsDoc == null )  &&  ( parentType ==  ( NAME )  )  )  {             Node gramps = parent.getParent (  ) ;             if  (  ( gramps.getType (  )  )  ==  ( VAR )  )  {                 jsDoc = gramps.getJSDocInfo (  ) ;             }         }     } }^146^^^^^141^157^[Delete]^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P13_Insert_Block]^if  (  ( jsDoc == null )  &&  ( parentType ==  ( NAME )  )  )  {     Node gramps = parent.getParent (  ) ;     if  (  ( gramps.getType (  )  )  ==  ( VAR )  )  {         jsDoc = gramps.getJSDocInfo (  ) ;     } }^146^^^^^141^157^[Delete]^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( jsDoc == null || parentType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( jsDoc != null && parentType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( jsDoc == null && rhsType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( jsDoc == null && parent == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( jsDoc == null ) {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  (  parentType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( parentType == NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P6_Replace_Expression]^if  ( gramps.getType() == VAR )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^if  ( jsDoc == this ) {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node gramps = parent.getParent(); if ((gramps.getType()) == (com.google.javascript.rhino.Token.VAR)) {    jsDoc = gramps.getJSDocInfo();};^148^149^150^151^152^141^157^if  ( jsDoc == null && parentType == Token.NAME )  { Node gramps = parent.getParent (  ) ; if  ( gramps.getType (  )  == Token.VAR )  { jsDoc = gramps.getJSDocInfo (  ) ; }^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P16_Remove_Block]^^148^149^150^151^152^141^157^if  ( jsDoc == null && parentType == Token.NAME )  { Node gramps = parent.getParent (  ) ; if  ( gramps.getType (  )  == Token.VAR )  { jsDoc = gramps.getJSDocInfo (  ) ; }^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P13_Insert_Block]^if  (  ( parentType ==  ( NAME )  )  ||  ( parentType ==  ( ASSIGN )  )  )  {     jsDoc = parent.getJSDocInfo (  ) ;     if  (  ( jsDoc == null )  &&  ( parentType ==  ( NAME )  )  )  {         Node gramps = parent.getParent (  ) ;         if  (  ( gramps.getType (  )  )  ==  ( VAR )  )  {             jsDoc = gramps.getJSDocInfo (  ) ;         }     } }^148^^^^^141^157^[Delete]^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( gramps.getType (  )  != Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( rhs.getType (  )  == Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P9_Replace_Statement]^if  ( lhs.getType (  )  == Token.GETPROP )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P15_Unwrap_Block]^jsDoc = gramps.getJSDocInfo();^150^151^152^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  { jsDoc = gramps.getJSDocInfo (  ) ; }^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P16_Remove_Block]^^150^151^152^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  { jsDoc = gramps.getJSDocInfo (  ) ; }^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P7_Replace_Invocation]^jsDoc = gramps .getLastChild (  )  ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^jsDoc =  rhs.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^jsDoc = parent.getJSDocInfo (  ) ;jsDoc = gramps.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^jsDoc = parent .getLastChild (  )  ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P14_Delete_Statement]^^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;jsDoc = gramps.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;jsDoc = gramps.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^jsDoc = parent.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^Node gramps = rhs.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node lhs = parent.getFirstChild (  ) ;Node gramps = parent.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node gramps = parent.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;Node gramps = parent.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;Node gramps = parent.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P14_Delete_Statement]^^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^jsDoc = parent.getJSDocInfo (  ) ;Node gramps = parent.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( gramps.getType (  )  >= Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.null )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^jsDoc = rhs.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P7_Replace_Invocation]^jsDoc = parent .getLastChild (  )  ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^jsDoc = gramps.getJSDocInfo (  ) ;jsDoc = parent.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^Node gramps = rhs .getNext (  )  ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P14_Delete_Statement]^^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node lhs = parent.getFirstChild (  ) ;jsDoc = parent.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;jsDoc = parent.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;jsDoc = parent.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;jsDoc = parent.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P7_Replace_Invocation]^if  ( gramps .getParent (  )   == Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^if  ( jsDoc == true ) {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^Node gramps = n.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^if  ( rhs .getParent (  )   == Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^jsDoc = n.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^jsDoc =  null.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P1_Replace_Type]^short  parentType = parent.getType (  ) ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^int rhsType = parent.getType (  ) ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P7_Replace_Invocation]^int parentType = parent .getParent (  )  ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^int nType = parent .getParent (  )  ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;int parentType = parent.getType (  ) ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;int parentType = parent.getType (  ) ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^int nType = parent.getType (  ) ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P14_Delete_Statement]^^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^jsDoc = rhs .getLastChild (  )  ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( parentType == Token.null || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P5_Replace_Variable]^if  ( jsDoc == null && parentTypeType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^jsDoc =  null.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P2_Replace_Operator]^if  ( gramps.getType (  )  < Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^jsDoc = rhs .getLastChild (  )  ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[P8_Replace_Mix]^int rhsType = parent .getParent (  )  ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
