[P1_Replace_Type]^static final char GET_CSS_NAME_FUNCTION = "goog.getCssName";^60^^^^^55^65^static final String GET_CSS_NAME_FUNCTION = "goog.getCssName";^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final String GET_CSS_NAME_FUNCTION = "oog.";^60^^^^^55^65^static final String GET_CSS_NAME_FUNCTION = "goog.getCssName";^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^static final String GET_CSS_NAME_FUNCTION  = null ;^60^^^^^55^65^static final String GET_CSS_NAME_FUNCTION = "goog.getCssName";^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "GETCSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^62^63^64^^^62^64^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.led with \"{0}\" arguments, expect" ) ;^62^63^64^^^62^64^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P7_Replace_Invocation]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.warning ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^62^63^64^^^62^64^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  = null ;^62^63^64^^^62^64^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_NUM_ARGS", "goog.getCssName called with \"{0}\" arguments, expected 1 or 2." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal "  <  "expected.  Was \"{0}\"." ) ;^66^67^68^69^^66^69^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "led oog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^66^67^68^69^^66^69^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "ctxpected.  Was \"{0}\"." ) ;^66^67^68^69^^66^69^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR  = null ;^66^67^68^69^^66^69^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  >>  Did you mean " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  <=  Did you mean " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "TCSSNAME_UNEXPECTED_SC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal goog.getCssName c" + "passed as first of two arguments.  Did you mean " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "uments.  " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class "  <  "\"{1}\"." ) ;^77^78^79^80^^77^80^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "C_G", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^77^78^79^80^^77^80^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "ith unrecooog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^77^78^79^80^^77^80^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"" ) ;^77^78^79^80^^77^80^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^77^78^79^80^^77^80^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^83^^^^^78^88^private final AbstractCompiler compiler;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^private  Map<String, Integer> cssNames;^85^^^^^80^90^private final Map<String, Integer> cssNames;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^91^^^^^89^93^this.compiler = compiler;^[CLASS] ReplaceCssNames Traversal  [METHOD] <init> [RETURN_TYPE] Map)   AbstractCompiler compiler Integer> cssNames [VARIABLES] AbstractCompiler  compiler  String  GET_CSS_NAME_FUNCTION  boolean  CssRenamingMap  symbolMap  Map  cssNames  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  
[P11_Insert_Donor_Statement]^this.cssNames = cssNames;this.compiler = compiler;^91^^^^^89^93^this.compiler = compiler;^[CLASS] ReplaceCssNames Traversal  [METHOD] <init> [RETURN_TYPE] Map)   AbstractCompiler compiler Integer> cssNames [VARIABLES] AbstractCompiler  compiler  String  GET_CSS_NAME_FUNCTION  boolean  CssRenamingMap  symbolMap  Map  cssNames  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  
[P8_Replace_Mix]^this.cssNames =  null;^92^^^^^89^93^this.cssNames = cssNames;^[CLASS] ReplaceCssNames Traversal  [METHOD] <init> [RETURN_TYPE] Map)   AbstractCompiler compiler Integer> cssNames [VARIABLES] AbstractCompiler  compiler  String  GET_CSS_NAME_FUNCTION  boolean  CssRenamingMap  symbolMap  Map  cssNames  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.cssNames = cssNames;^92^^^^^89^93^this.cssNames = cssNames;^[CLASS] ReplaceCssNames Traversal  [METHOD] <init> [RETURN_TYPE] Map)   AbstractCompiler compiler Integer> cssNames [VARIABLES] AbstractCompiler  compiler  String  GET_CSS_NAME_FUNCTION  boolean  CssRenamingMap  symbolMap  Map  cssNames  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  
[P8_Replace_Mix]^symbolMap  =  symbolMap ;^100^^^^^96^103^symbolMap = getCssRenamingMap (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P14_Delete_Statement]^^100^^^^^96^103^symbolMap = getCssRenamingMap (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P11_Insert_Donor_Statement]^return compiler.getCssRenamingMap (  ) ;symbolMap = getCssRenamingMap (  ) ;^100^^^^^96^103^symbolMap = getCssRenamingMap (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new Traversal (  )  ) ;^102^^^^^96^103^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Traversal (  )  ) ;^102^^^^^96^103^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Traversal (  )  ) ;^102^^^^^96^103^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Traversal (  )  ) ;^102^^^^^96^103^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P14_Delete_Statement]^^102^^^^^96^103^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[P7_Replace_Invocation]^return compiler.reportCodeChange (  ) ;^107^^^^^106^108^return compiler.getCssRenamingMap (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] getCssRenamingMap [RETURN_TYPE] CssRenamingMap   [VARIABLES] AbstractCompiler  compiler  String  GET_CSS_NAME_FUNCTION  boolean  CssRenamingMap  symbolMap  Map  cssNames  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  
[P14_Delete_Statement]^^107^^^^^106^108^return compiler.getCssRenamingMap (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] getCssRenamingMap [RETURN_TYPE] CssRenamingMap   [VARIABLES] AbstractCompiler  compiler  String  GET_CSS_NAME_FUNCTION  boolean  CssRenamingMap  symbolMap  Map  cssNames  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.CALL || GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^if  ( second.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.CALL ) {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  (  GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  ( n.getType (  )  == CALL )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  ( first.getType() == STRING )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  ( second.getType() == STRING )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  ( "-" + second.getString (  ) )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.valueOf ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .split (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.removeChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n .removeChild ( first )  .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^if  ( first.getType (  )  > Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^if  ( second.getType (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( first.removeChild (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( first .getString (  )   == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, first, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , n , UNEXPECTED_STRING_LITERAL_ERROR , GET_CSS_NAME_FUNCTION )   )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.removeChild (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.removeChild (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( first.removeChild (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Token.name ( second.getType (  )  )  )  ) ;Token.name ( first.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( first .getString (  )   )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode ( t, second ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode (  first ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode ( t ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode ( first, t ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^processStringNode ( t, replacement ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^processStringNode ( t, second ) ;processStringNode ( t, first ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^n.removeChild ( second ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^n.replaceChild ( first ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^n .replaceChild ( second , parent )  ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^123^124^^^^108^138^n.removeChild ( first ) ; parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, first ) ;n.removeChild ( first ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( second, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n, second ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild (  first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( first, n ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^parent .removeChild ( replacement )  ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^124^125^^^^109^139^parent.replaceChild ( n, first ) ; compiler.reportCodeChange (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, replacement ) ;parent.replaceChild ( n, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^n.removeChild ( first ) ;parent.replaceChild ( n, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report (  ) ;^125^^^^^110^140^compiler.reportCodeChange (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^125^^^^^110^140^compiler.reportCodeChange (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^if  ( first.getType (  )  != Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^if  ( second.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  ( second.getType() == STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^if  ( "-" + second.getString (  ) )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( first.removeChild (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^} else if  ( second.getType (  )  != Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^} else if  ( "-" + second.getString (  ) )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P6_Replace_Expression]^} else {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^} else if  ( second.removeChild (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^} else if  ( second .getString (  )   == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, second, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( second.removeChild (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Token.name ( replacement.removeChild (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Token.name ( first.getType (  )  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Node.newString ( "-" + second.getString (  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ^  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P3_Replace_Literal]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P4_Replace_Constructor]^Node replacement = new Node ( Token.ADD,  Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, replacement, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + replacement.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token. first, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + first.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node.replaceChild ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.removeChild (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  !=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + parent.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode ( t, replacement ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode (  second ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode ( t ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode ( second, t ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^processStringNode ( t, first ) ;processStringNode ( t, second ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^n.removeChild ( second ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^n.replaceChild ( first ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, first ) ;n.removeChild ( first ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  >  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P3_Replace_Literal]^Node.newString ( "" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node.replaceChild ( "-" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node.newString ( "-" + second.removeChild (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node.newString ( "-" + second .setString (  )   )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node.newString ( "-" + replacement.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^first.getString (  ) , second.getString (  )  )  ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Token.name ( second.getType (  )  )  )  ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^147^148^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ; parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( second, replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n, second ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild (  replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^parent.replaceChild ( replacement, n ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, first ) ;parent.replaceChild ( n, replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report (  ) ;^149^^^^^134^164^compiler.reportCodeChange (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^149^^^^^134^164^compiler.reportCodeChange (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  |  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node .getString (  )   ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second .setString (  )   )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^} else if  ( replacement.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  ^  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node.newString ( "-" + parent.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node .getString (  )   ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^parent .removeChild ( replacement )  ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^148^149^^^^133^163^parent.replaceChild ( n, replacement ) ; compiler.reportCodeChange (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( second.removeChild (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( second.removeChild (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( second .getString (  )   )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Token.name ( first.getType (  )  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Node.newString ( "-" + second.getString (  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , replacement.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) .getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( first, n, UNEXPECTED_STRING_LITERAL_ERROR, t.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , n.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , first.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, first, UNEXPECTED_STRING_LITERAL_ERROR.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , replacement , INVALID_NUM_ARGUMENTS_ERROR )   )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.removeChild (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first .setString (  )  , second^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P13_Insert_Block]^if  ( replacement == null )  {     compiler.report ( make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;     return ; }^139^^^^^124^154^[Delete]^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, first, UNEXPECTED_STRING_LITERAL_ERROR, n.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , second , UNKNOWN_SYMBOL_WARNING )   )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, replacement, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^first.removeChild (  ) , second.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^first .setString (  )  , second^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Node.newString ( "-" + second.getString (  )  )  ) ;first.getString (  ) , second.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^first.getString (  ) , replacement.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^} else if  ( second.getType (  )  <= Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second .getString (  )   )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Token.name ( parent .getString (  )   )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  &  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^processStringNode ( t, parent ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^144^145^^^^129^159^processStringNode ( t, second ) ; n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  <=  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node.newString ( "-" + parent.removeChild (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, first, Node.replaceChild ( "-" + replacement.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P1_Replace_Type]^short  count = n.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^int count = second.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^int count = n.removeChild (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node first = second.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node first = n.getFirstChild (  ) .split (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node first = n.removeChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node first = n.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node second = replacement.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node second = first.removeChild (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Node first = n.getFirstChild (  ) .getNext (  ) ;Node second = first.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^int count = n .getFirstChild (  )  ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^int count = second.removeChild (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^116^117^^^^101^131^int count = n.getChildCount (  ) ; Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Node first = replacement.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node first = n .removeChild ( parent )  .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.removeChild (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, first, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( first.removeChild (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^Token.name ( second.getType (  )  )  )  ) ;Token.name ( first.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( first .getString (  )   )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Node second = first .getQualifiedName (  )  ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node second = second.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( second, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , t.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNEXPECTED_STRING_LITERAL_ERROR, n, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , parent.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^first.removeChild (  ) , replacement.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^} else if  ( replacement .getString (  )   == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^n .replaceChild ( n , first )  ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  &&  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, second, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second .getString (  )   )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, count, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( n )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( count, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( t )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, second, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, count, String.valueOf ( INVALID_NUM_ARGUMENTS_ERROR )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , parent , UNKNOWN_SYMBOL_WARNING , GET_CSS_NAME_FUNCTION )   ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^159^^^^^144^174^t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^159^^^^^144^174^t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^if  ( first.getType (  )  >= Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^if  ( first.getType (  )  == Token.null )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( first, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first .getString (  )   )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.removeChild (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , replacement , UNEXPECTED_STRING_LITERAL_ERROR , GET_CSS_NAME_FUNCTION )   )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^n .replaceChild ( first , first )  ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^if  ( first.getType (  )  < Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^if  ( first .getString (  )   == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , second , UNEXPECTED_STRING_LITERAL_ERROR , GET_CSS_NAME_FUNCTION )   )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^Token.name ( second .getString (  )   )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  <<  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, replacement, Node.replaceChild ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ==  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^n .replaceChild ( first , n )  ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^n.replaceChild ( second ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"   instanceof   second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node.replaceChild ( "-" + replacement.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >>  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  <  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^parent .removeChild ( second )  ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Token.name ( replacement.removeChild (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, replacement.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^first.getString (  ) , parent.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^} else if  ( second.getType (  )  >= Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"   instanceof   second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + replacement .setString (  )   )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^n .replaceChild ( second , second )  ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  |  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node.newString ( "-" + replacement.removeChild (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P1_Replace_Type]^long  count = n.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^int count = replacement.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node first = second .removeChild ( second )  .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^GET_CSS_NAME_FUNCTION.equals ( second.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.valueOf ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION .valueOf ( count )   )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .split (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.equals ( n.removeChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  )  .getNext (  )   )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.equals ( n .removeChild ( second )  .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^int count = replacement.removeChild (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P14_Delete_Statement]^^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^n.replaceChild ( second ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^parent .removeChild ( second )  ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( first, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , parent , UNEXPECTED_STRING_LITERAL_ERROR , GET_CSS_NAME_FUNCTION )   )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first .getString (  )   )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( first .getString (  )   )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^Node second = second .getQualifiedName (  )  ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P8_Replace_Mix]^if  ( replacement.removeChild (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , replacement , STRING_LITERAL_EXPECTED_ERROR )   )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNEXPECTED_STRING_LITERAL_ERROR, n, t, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  &  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , replacement , INVALID_NUM_ARGUMENTS_ERROR , GET_CSS_NAME_FUNCTION )   )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[P2_Replace_Operator]^if  ( symbolMap != null && cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( symbolMap == null || cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( symbolMap != null || cssNames == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^if  ( n != symbolMapull || cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( symbolMap != null ) {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  (  cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( i < parts.length )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( count == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( count.intValue (  )  + 1 )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( replacement == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( symbolMap != this || cssNames != this )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( cssNames == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( count == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( count.intValue (  )  + 1 )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( cssNames != false )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( symbolMap != null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( replacement == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P15_Unwrap_Block]^java.lang.Integer count = cssNames.get(parts[i]); if (count == null) {    count = java.lang.Integer.valueOf(0);}; cssNames.put(parts[i], ((count.intValue()) + 1));^179^180^181^182^183^175^201^if  ( cssNames != null )  { Integer count = cssNames.get ( parts[i] ) ; if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P16_Remove_Block]^^179^180^181^182^183^175^201^if  ( cssNames != null )  { Integer count = cssNames.get ( parts[i] ) ; if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( count != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( count == this )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( symbolMap != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( replacement == null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P15_Unwrap_Block]^count = java.lang.Integer.valueOf(0);^181^182^183^^^175^201^if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P16_Remove_Block]^^181^182^183^^^175^201^if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( i ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0L ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P13_Insert_Block]^if  ( count == null )  {     count = valueOf ( 0 ) ; }^182^^^^^175^201^[Delete]^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( -9 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf (  ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^Integer count = parts.get ( cssNames[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^Integer count = cssNames.put ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P11_Insert_Donor_Statement]^String replacement = symbolMap.get ( parts[i] ) ;Integer count = cssNames.get ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   &&  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^cssNames.put ( parts[i], count.intValue (  )   ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^cssNames.put ( parts[i].intValue (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^cssNames.put ( parts[i], count.valueOf (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( count == true )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 2 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( symbolMap == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P6_Replace_Expression]^if  ( replacement == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( symbolMap != true )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( count == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P13_Insert_Block]^if  ( replacement == null )  {     compiler.report ( make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;     return ; }^186^^^^^175^201^[Delete]^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( replacement != null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^if  ( GET_CSS_NAME_FUNCTION == null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^if  ( n == replacementull )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( replacement == true )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( count == null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING, parts[i], n.getString())); return ;^188^189^190^191^192^175^201^if  ( replacement == null )  {  compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P16_Remove_Block]^^188^189^190^191^192^175^201^if  ( replacement == null )  {  compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P13_Insert_Block]^if  (  ( symbolMap )  != null )  {     String replacement = symbolMap.get ( parts[i] ) ;     if  ( replacement == null )  {         compiler.report ( make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;         return ;     }     parts[i] = replacement; }^188^^^^^175^201^[Delete]^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( parts, n, UNKNOWN_SYMBOL_WARNING, t[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parts, UNKNOWN_SYMBOL_WARNING, n[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, parts, UNKNOWN_SYMBOL_WARNING[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , n , STRING_LITERAL_EXPECTED_ERROR )   ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.removeChild (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n .setString (  )   )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNKNOWN_SYMBOL_WARNING, n, t, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , n , UNEXPECTED_STRING_LITERAL_ERROR )   ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.removeChild (  )  )  ) ;^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n .setString (  )   )  ) ;^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^191^192^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^parts[i] = GET_CSS_NAME_FUNCTION;^194^^^^^175^201^parts[i] = replacement;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^parts[i]  =  parts[i] ;^194^^^^^175^201^parts[i] = replacement;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P1_Replace_Type]^char replacement = symbolMap.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^String replacement = parts.get ( symbolMap[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P11_Insert_Donor_Statement]^Integer count = cssNames.get ( parts[i] ) ;String replacement = symbolMap.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNKNOWN_SYMBOL_WARNING, n, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, parts[i], n.removeChild (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , n , UNKNOWN_SYMBOL_WARNING )   ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( symbolMap == null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( symbolMap != true )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( count == null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P15_Unwrap_Block]^n.setString(com.google.common.base.Joiner.on("-").join(parts));^197^198^199^^^175^201^if  ( symbolMap != null )  { n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P16_Remove_Block]^^197^198^199^^^175^201^if  ( symbolMap != null )  { n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ; }^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^n.setString ( Joiner.on ( "" ) .join ( parts )  ) ;^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^n .getString (  )   ) ;^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^n.setString ( Joiner.on ( "-" )  .split ( replacement )   ) ;^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P13_Insert_Block]^if  (  ( symbolMap )  != null )  {     n.setString ( on ( "-" ) .join ( parts )  ) ; }^198^^^^^175^201^[Delete]^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^n.setString ( Joiner.on ( "-" )  .split ( GET_CSS_NAME_FUNCTION )   ) ;^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^for  ||  ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^for  ( int i = 3; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^for  ( parts.lengthnt i = 0; i < i; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( cssNames != this )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( count == false )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( 5 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 % 3 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( -5 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 * 0 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^Integer count = cssNames .get ( 0 )  ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( 4 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^cssNames.put ( parts[i], count.intValue (  )  + i ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^cssNames.put ( parts[i], count .valueOf ( i )   + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 + 3 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( symbolMap != false )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( replacement == false )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( replacement == this )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( 9 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 - 4 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^parts[i] ;^194^^^^^175^201^parts[i] = replacement;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   ||  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 << 4 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^parts[i]  = null ;^194^^^^^175^201^parts[i] = replacement;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^String[] parts = n.removeChild (  ) .split ( "-" ) ;^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^String[] parts = n.getString (  ) .split ( "" ) ;^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^String[] parts = n .setString (  )  .split ( "-" ) ;^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P14_Delete_Statement]^^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   <=  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P5_Replace_Variable]^cssNames.put ( count[i], parts.intValue (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( cssNames != true )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( 7 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 / 4 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^cssNames .get ( 4 )  ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( -4 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( symbolMap != this )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^for   instanceof   ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P7_Replace_Invocation]^count = Integer .equals ( 1 )  ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^Integer count = null.put ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )    instanceof   1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 3 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P8_Replace_Mix]^if  ( GET_CSS_NAME_FUNCTION == false )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   !=  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P3_Replace_Literal]^cssNames.put ( parts[i], count.intValue (  )  +  ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   <  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.CALL || GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^if  ( second.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.CALL ) {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  (  GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  ( n.getType (  )  == CALL )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  ( first.getType() == STRING )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  ( second.getType() == STRING )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  ( "-" + second.getString (  ) )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.valueOf ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .split (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.removeChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n .removeChild ( n )  .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n .removeChild ( first )  .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^if  ( first.getType (  )  != Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^if  ( second.getType (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( first.removeChild (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, null, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.removeChild (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, first, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first .getString (  )   )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Token.name ( first.removeChild (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Token.name ( first .getString (  )   )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Token.name ( second .getString (  )   )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Token.name ( second.getType (  )  )  )  ) ;Token.name ( first.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Token.name ( second.removeChild (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode ( t, second ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode (  first ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode ( t ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode ( first, t ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^processStringNode ( t, replacement ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^processStringNode ( t, second ) ;processStringNode ( t, first ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^n.removeChild ( second ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^n.replaceChild ( first ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^n .replaceChild ( n , parent )  ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, first ) ;n.removeChild ( first ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( second, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n, second ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild (  first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( first, n ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, replacement ) ;parent.replaceChild ( n, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^n.removeChild ( first ) ;parent.replaceChild ( n, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report (  ) ;^125^^^^^110^140^compiler.reportCodeChange (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^125^^^^^110^140^compiler.reportCodeChange (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^if  ( first.getType (  )  != Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^if  ( second.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^if  ( first.getType (  )  == Token.null )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  ( second.getType() == STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^if  ( "-" + second.getString (  ) )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( first.removeChild (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^if  ( first .getString (  )   == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^} else if  ( second.getType (  )  >= Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^} else if  ( "-" + second.getString (  ) )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P6_Replace_Expression]^} else {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^} else if  ( second.removeChild (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^} else if  ( second .getString (  )   == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second .getString (  )   )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( parent.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Token.name ( second.removeChild (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Token.name ( parent.removeChild (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Token.name ( first.getType (  )  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Node.newString ( "-" + second.getString (  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Token.name ( second .getString (  )   )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ^  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P4_Replace_Constructor]^Node replacement = new Node ( Token.ADD,  Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, replacement, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + parent.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token. first, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + first.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node.replaceChild ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node .getString (  )   ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.removeChild (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second .setString (  )   )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + replacement.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  |  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P3_Replace_Literal]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, first, Node.replaceChild ( "-" + parent.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode ( t, replacement ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode (  second ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode ( t ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^processStringNode ( second, t ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^144^145^^^^129^159^processStringNode ( t, second ) ; n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^processStringNode ( t, first ) ;processStringNode ( t, second ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^n.removeChild ( second ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^n.replaceChild ( first ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, first ) ;n.removeChild ( first ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  <=  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P3_Replace_Literal]^Node.newString ( "" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node.newString ( "-" + replacement.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node.replaceChild ( "-" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node.newString ( "-" + second.removeChild (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^first.getString (  ) , second.getString (  )  )  ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Token.name ( second.getType (  )  )  )  ) ;Node.newString ( "-" + second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node.newString ( "-" + second .setString (  )   )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( second, replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n, second ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild (  replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^parent.replaceChild ( replacement, n ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, first ) ;parent.replaceChild ( n, replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report (  ) ;^149^^^^^134^164^compiler.reportCodeChange (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^149^^^^^134^164^compiler.reportCodeChange (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + replacement.removeChild (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, second, Node.replaceChild ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^} else if  ( replacement.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^processStringNode ( t, parent ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  &  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node.newString ( "-" + parent.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^147^148^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ; parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^parent .removeChild ( replacement )  ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( parent.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.removeChild (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, second, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second .getString (  )   )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Token.name ( second.removeChild (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Token.name ( second .getString (  )   )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Token.name ( first.getType (  )  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Node.newString ( "-" + second.getString (  )  )  ) ;Token.name ( second.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Token.name ( replacement .getString (  )   )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, replacement, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, replacement.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) .getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNEXPECTED_STRING_LITERAL_ERROR, n, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, first, UNEXPECTED_STRING_LITERAL_ERROR.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, second, first.getString (  ) , UNEXPECTED_STRING_LITERAL_ERROR.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.removeChild (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P13_Insert_Block]^if  ( replacement == null )  {     compiler.report ( make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;     return ; }^139^^^^^124^154^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , replacement.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNEXPECTED_STRING_LITERAL_ERROR, n, t, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, first, UNEXPECTED_STRING_LITERAL_ERROR, n.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , first.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first .setString (  )  , second^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^first.removeChild (  ) , second.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^first .setString (  )  , second^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Node.newString ( "-" + second.getString (  )  )  ) ;first.getString (  ) , second.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^first.getString (  ) , replacement.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^} else if  ( second.getType (  )  != Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^} else if  ( second.getType (  )  == Token.null )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, second, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.removeChild (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Token.name ( replacement.removeChild (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  &  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, replacement, Node.replaceChild ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + parent.removeChild (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^n.replaceChild ( second ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  !=  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node .getString (  )   ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node.replaceChild ( "-" + replacement.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ||  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, replacement, Node.newString ( "-" + second.removeChild (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P1_Replace_Type]^short  count = n.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^int count = second.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^int count = n.removeChild (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^int count = n .getFirstChild (  )  ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^int count = replacement.removeChild (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node first = second.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node first = n.getFirstChild (  ) .split (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node first = n.removeChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node first = n .removeChild ( replacement )  .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node first = n.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node second = replacement.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node second = first.removeChild (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node second = first .getQualifiedName (  )  ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Node first = n.getFirstChild (  ) .getNext (  ) ;Node second = first.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^int count = second.removeChild (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^116^117^^^^101^131^int count = n.getChildCount (  ) ; Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^122^123^^^^107^137^processStringNode ( t, first ) ; n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^123^124^^^^108^138^n.removeChild ( first ) ; parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( first, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, first, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.removeChild (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, this, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first .getString (  )   )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Token.name ( first.removeChild (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Token.name ( first .getString (  )   )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^Token.name ( second.getType (  )  )  )  ) ;Token.name ( first.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Node second = second.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node second = second.removeChild (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , n.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first .setString (  )  , parent^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^first.removeChild (  ) , replacement.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^n .replaceChild ( first , parent )  ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  ==  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node.newString ( "-" + parent .setString (  )   )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^148^149^^^^133^163^parent.replaceChild ( n, replacement ) ; compiler.reportCodeChange (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, 3, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.removeChild (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Token.name ( replacement.removeChild (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, replacement, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( count, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( t )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, second, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, count, String.valueOf ( INVALID_NUM_ARGUMENTS_ERROR )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^159^^^^^144^174^t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^159^^^^^144^174^t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^if  ( second.removeChild (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.removeChild (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^if  ( first.getType (  )  > Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + second.removeChild (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^n .replaceChild ( first , n )  ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  >>  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node.newString ( "-" + replacement .setString (  )   )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >>  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  ^  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^parent .removeChild ( first )  ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( first, n, UNEXPECTED_STRING_LITERAL_ERROR, t.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^} else if  ( second.getType (  )  == Token.this )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler .reportCodeChange (  )   )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ADD, first, Node.replaceChild ( "-" + replacement.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  !=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^Node.newString ( "-"  >  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P1_Replace_Type]^long  count = n.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^int count = replacement.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^GET_CSS_NAME_FUNCTION.equals ( second.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.valueOf ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION .valueOf ( count )   )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .split (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  )  .getNext (  )   )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^GET_CSS_NAME_FUNCTION.equals ( n.removeChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^GET_CSS_NAME_FUNCTION.equals ( replacement.getFirstChild (  ) .split (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^GET_CSS_NAME_FUNCTION.equals ( replacement.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P14_Delete_Statement]^^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^Node first = n.getFirstChild (  )  .getQualifiedName (  )  ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node first = replacement.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^if  ( replacement.getType (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, null, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^} else if  ( replacement.removeChild (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^n .replaceChild ( n , second )  ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P8_Replace_Mix]^Node.newString ( "-" + replacement.removeChild (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( t , n , this , null )   )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, count, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( n )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[P2_Replace_Operator]^if  ( symbolMap != null && cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^if  ( symbolMap == null || cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^if  ( symbolMap != null || cssNames == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^if  ( symbolMap != null || 1 != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( symbolMap != null ) {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  (  cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( i < parts.length )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( count == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( count.intValue (  )  + 1 )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( replacement == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  (  cssNames != true )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^if  ( cssNames == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( count == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( count.intValue (  )  + 1 )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( cssNames != true )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( symbolMap != null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( replacement == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P15_Unwrap_Block]^java.lang.Integer count = cssNames.get(parts[i]); if (count == null) {    count = java.lang.Integer.valueOf(0);}; cssNames.put(parts[i], ((count.intValue()) + 1));^179^180^181^182^183^175^201^if  ( cssNames != null )  { Integer count = cssNames.get ( parts[i] ) ; if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P16_Remove_Block]^^179^180^181^182^183^175^201^if  ( cssNames != null )  { Integer count = cssNames.get ( parts[i] ) ; if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^if  ( count != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( count == true )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( symbolMap != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( replacement == null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P15_Unwrap_Block]^count = java.lang.Integer.valueOf(0);^181^182^183^^^175^201^if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P16_Remove_Block]^^181^182^183^^^175^201^if  ( count == null )  { count = Integer.valueOf ( 0 ) ; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( 9 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 * 1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P13_Insert_Block]^if  ( count == null )  {     count = valueOf ( 0 ) ; }^182^^^^^175^201^[Delete]^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( 2 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( -6 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^Integer count = 1.get ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^Integer count = parts.get ( cssNames[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^Integer count = cssNames.put ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P11_Insert_Donor_Statement]^String replacement = symbolMap.get ( parts[i] ) ;Integer count = cssNames.get ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^Integer count = 3.get ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( i ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   <  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^cssNames.put ( parts[i], count.intValue (  )   ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^cssNames.put ( parts[i].intValue (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^cssNames.put ( count[i], parts.intValue (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^cssNames.put ( parts[i], count.valueOf (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^cssNames.put ( parts[i], count .valueOf ( i )   + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( count == this )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 3 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^if  ( symbolMap == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P6_Replace_Expression]^if  ( replacement == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( symbolMap != true )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( count == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P13_Insert_Block]^if  ( replacement == null )  {     compiler.report ( make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;     return ; }^186^^^^^175^201^[Delete]^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^if  ( replacement != null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( replacement == false )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( count == null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING, parts[i], n.getString())); return ;^188^189^190^191^192^175^201^if  ( replacement == null )  {  compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P16_Remove_Block]^^188^189^190^191^192^175^201^if  ( replacement == null )  {  compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P13_Insert_Block]^if  (  ( symbolMap )  != null )  {     String replacement = symbolMap.get ( parts[i] ) ;     if  ( replacement == null )  {         compiler.report ( make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;         return ;     }     parts[i] = replacement; }^188^^^^^175^201^[Delete]^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( parts, n, UNKNOWN_SYMBOL_WARNING, t[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNKNOWN_SYMBOL_WARNING, n, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.removeChild (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n .setString (  )   )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.removeChild (  )  )  ) ;^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n .setString (  )   )  ) ;^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^191^^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^parts[i]  =  parts[i] ;^194^^^^^175^201^parts[i] = replacement;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P1_Replace_Type]^char replacement = symbolMap.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^String replacement = parts.get ( symbolMap[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P11_Insert_Donor_Statement]^Integer count = cssNames.get ( parts[i] ) ;String replacement = symbolMap.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parts, UNKNOWN_SYMBOL_WARNING, n[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, parts, UNKNOWN_SYMBOL_WARNING[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNKNOWN_SYMBOL_WARNING, n, t, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^191^192^^^^175^201^t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ; return;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( replacement == this )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^if  ( symbolMap == null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^if  ( n != symbolMapull )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( symbolMap != true )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( count == null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P9_Replace_Statement]^if  ( cssNames != null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P15_Unwrap_Block]^n.setString(com.google.common.base.Joiner.on("-").join(parts));^197^198^199^^^175^201^if  ( symbolMap != null )  { n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P16_Remove_Block]^^197^198^199^^^175^201^if  ( symbolMap != null )  { n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ; }^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^n .getString (  )   ) ;^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P13_Insert_Block]^if  (  ( symbolMap )  != null )  {     n.setString ( on ( "-" ) .join ( parts )  ) ; }^198^^^^^175^201^[Delete]^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^n.setString ( Joiner.on ( "" ) .join ( parts )  ) ;^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^for  <=  ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^for  ( int i = -3; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^for  ( int i = -9; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^for  ( parts.lengthnt i = 0; i < i; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( count == false )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 - 2 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^Integer count = 0.get ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   >>  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^cssNames.put ( parts[i], count.intValue (  )  + i ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^count = Integer .equals ( 3 )  ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( symbolMap != false )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^parts[i] ;^194^^^^^175^201^parts[i] = replacement;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^String replacement = this.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, 2, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, null, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 4 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^Integer count = cssNames .get ( 1 )  ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( -1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   <=  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 - 0 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^String[] parts = n.getString (  ) .split ( "" ) ;^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^String[] parts = n.getString (  )  .join ( parts )  ;^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^String[] parts = n.removeChild (  ) .split ( "-" ) ;^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P7_Replace_Invocation]^String[] parts = n .setString (  )  .split ( "-" ) ;^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P14_Delete_Statement]^^177^^^^^175^201^String[] parts = n.getString (  ) .split ( "-" ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^cssNames.put ( parts[i], count.intValue (  )  +  ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^n.setString ( Joiner.on ( "-" )  .split ( replacement )   ) ;^198^^^^^175^201^n.setString ( Joiner.on ( "-" ) .join ( parts )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf (  ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^count = Integer.valueOf ( 0 + 4 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^Integer count = 4.get ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   ==  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^if  ( n != symbolMapull )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^if  ( n == replacementull )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^parts[i]  = null ;^194^^^^^175^201^parts[i] = replacement;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( replacement == true )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( symbolMap != false )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^for  !=  ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^for  ( int i = -6; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( -5 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   |  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P3_Replace_Literal]^count = Integer.valueOf ( 6 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^if  ( symbolMap != this )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, this, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^String replacement = 1.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P2_Replace_Operator]^cssNames.put ( parts[i], count.intValue (  )   >  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P8_Replace_Mix]^String replacement = symbolMap .get ( this )  ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, 1, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
