[P6_Replace_Expression]^private static final Pattern TEST_FUNCTIONS_NAME_PATTERN  = setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^32^33^^^^32^33^private static final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.compile ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes   [VARIABLES] 
[P6_Replace_Expression]^private static final Pattern TEST_FUNCTIONS_NAME_PATTERN  = ;^32^33^^^^32^33^private static final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.compile ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes   [VARIABLES] 
[P7_Replace_Invocation]^private static final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.matcher ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^32^33^^^^32^33^private static final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.compile ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes   [VARIABLES] 
[P8_Replace_Mix]^private  final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.compile ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^32^33^^^^32^33^private static final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.compile ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes   [VARIABLES] 
[P1_Replace_Type]^private final char exportSymbolFunction;^36^^^^^31^41^private final String exportSymbolFunction;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes   [VARIABLES] 
[P14_Delete_Statement]^^46^^^^^43^49^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  boolean  
[P8_Replace_Mix]^this.compiler =  null;^47^^^^^43^49^this.compiler = compiler;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  boolean  
[P8_Replace_Mix]^this.exportSymbolFunction =  null;^48^^^^^43^49^this.exportSymbolFunction = exportSymbolFunction;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  boolean  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( parent != null && parent.getType (  )  != Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( n != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( parent != parentull && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( n != parentull && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( parent != null ) {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( (parent != null && parent.getType() == SCRIPT) )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( parent.getType (  )  == SCRIPT )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( n.getType (  )  == FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( isTestFunction(n, functionName) && t.inGlobalScope() )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( parent != null && parent.newString (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( parent != null && parent .newString ( functionName )   == Token.SCRIPT && n^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^if  ( parent != this && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^java.lang.String functionName = com.google.javascript.jscomp.NodeUtil.getFunctionName(n, parent); if ((isTestFunction(n, functionName)) && (t.inGlobalScope())) {    exportTestFunction(functionName, n, parent);};^55^56^57^58^59^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ; if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^55^56^57^58^59^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ; if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( isTestFunction ( n, functionName )  || t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( isTestFunction ( n, exportSymbolFunction )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( isTestFunction (  functionName )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( isTestFunction ( n )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( isTestFunction ( functionName, n )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( isTestFunction ( n, t )  && functionName.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( isTestFunction ( t, functionName )  && n.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( isTestFunction ( n, functionName )  ) {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  (  t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( ExportTestFunctions ( n, functionName )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^exportTestFunction(functionName, n, parent);^58^59^60^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^58^59^60^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction ( functionName, parent, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction (  n, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction ( functionName,  parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction ( functionName, n ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction ( parent, n, functionName ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction ( functionName, parent, n ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^String functionName = NodeUtil.getFunctionName ( n, parent ) ;exportTestFunction ( functionName, n, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P1_Replace_Type]^char functionName = NodeUtil.getFunctionName ( n, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( parent, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( n, n ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName (  parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( n ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( parent, n ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ;String functionName = NodeUtil.getFunctionName ( n, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^exportTestFunction ( functionName, n, parent ) ;String functionName = NodeUtil.getFunctionName ( n, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( isTestFunction ( parent, functionName )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( isTestFunction ( n, functionName )  && t .traverse ( compiler , parent , 1 )   )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction ( exportSymbolFunction, n, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^exportTestFunction ( n, functionName, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^String functionName = NodeUtil .newQualifiedNameNode ( functionName , parent , exportSymbolFunction )  ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^n.newString (  )  == Token.FUNCTION )  {^56^^^^^54^62^n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^56^57^^^^54^62^n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^String functionName = NodeUtil .newQualifiedNameNode ( exportSymbolFunction , parent , exportSymbolFunction )  ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^String functionName = NodeUtil .newQualifiedNameNode ( functionName , n , exportSymbolFunction )  ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new ExportTestFunctionsNodes (  )  ) ;^66^^^^^65^67^NodeTraversal.traverse ( compiler, root, new ExportTestFunctionsNodes (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ExportTestFunctionsNodes (  )  ) ;^66^^^^^65^67^NodeTraversal.traverse ( compiler, root, new ExportTestFunctionsNodes (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new ExportTestFunctionsNodes (  )  ) ;^66^^^^^65^67^NodeTraversal.traverse ( compiler, root, new ExportTestFunctionsNodes (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new ExportTestFunctionsNodes (  )  ) ;^66^^^^^65^67^NodeTraversal.traverse ( compiler, root, new ExportTestFunctionsNodes (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  Node  externs  root  
[P7_Replace_Invocation]^NodeTraversal .inGlobalScope (  )  ;^66^^^^^65^67^NodeTraversal.traverse ( compiler, root, new ExportTestFunctionsNodes (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  Node  externs  root  
[P14_Delete_Statement]^^66^^^^^65^67^NodeTraversal.traverse ( compiler, root, new ExportTestFunctionsNodes (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  boolean  Node  externs  root  
[P4_Replace_Constructor]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction,  testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P4_Replace_Constructor]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, scriptNode, testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, functionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token. NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode (  node, testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, testFunctionName, node )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( testFunctionName, node, exportSymbolFunction )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P7_Replace_Invocation]^Node call = new Node ( Token.CALL, NodeUtil.getFunctionName ( exportSymbolFunction, node, testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P8_Replace_Mix]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( functionName, node, testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( node, exportSymbolFunction, testFunctionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P8_Replace_Mix]^Node call = new Node ( Token.CALL, NodeUtil.getFunctionName ( exportSymbolFunction, node, functionName )  ) ;^73^74^^^^70^83^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P7_Replace_Invocation]^call.addChildAfter ( Node.newString ( testFunctionName )  ) ;^75^^^^^70^83^call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P7_Replace_Invocation]^call .addChildAfter ( node , call )  ;^75^^^^^70^83^call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P7_Replace_Invocation]^call.addChildToBack ( Node .getType (  )   ) ;^75^^^^^70^83^call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P8_Replace_Mix]^call.addChildToBack ( Node.newString ( functionName )  ) ;^75^^^^^70^83^call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P14_Delete_Statement]^^75^^^^^70^83^call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P11_Insert_Donor_Statement]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^75^^^^^70^83^call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( functionName, node, testFunctionName )  ) ;^76^77^^^^70^83^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, scriptNode, testFunctionName )  ) ;^76^77^^^^70^83^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode (  node, testFunctionName )  ) ;^76^77^^^^70^83^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName,  testFunctionName )  ) ;^76^77^^^^70^83^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( node, testFunctionName, testFunctionName )  ) ;^76^77^^^^70^83^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P7_Replace_Invocation]^call.addChildToBack ( NodeUtil .getFunctionName ( node , scriptNode )   ) ;^76^77^^^^70^83^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node expression = new Node ( Token.EXPR_RESULT, scriptNode ) ;^79^^^^^70^83^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node expression = new Node ( Token.EXPR_RESULT ) ;^79^^^^^70^83^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^Node expression = new Node ( Token. call ) ;^79^^^^^70^83^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^scriptNode.addChildAfter ( scriptNode, node ) ;^81^^^^^70^83^scriptNode.addChildAfter ( expression, node ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^scriptNode.addChildAfter ( expression, scriptNode ) ;^81^^^^^70^83^scriptNode.addChildAfter ( expression, node ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^scriptNode.addChildAfter (  node ) ;^81^^^^^70^83^scriptNode.addChildAfter ( expression, node ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^scriptNode.addChildAfter ( expression ) ;^81^^^^^70^83^scriptNode.addChildAfter ( expression, node ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P5_Replace_Variable]^scriptNode.addChildAfter ( node, expression ) ;^81^^^^^70^83^scriptNode.addChildAfter ( expression, node ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P14_Delete_Statement]^^81^82^^^^70^83^scriptNode.addChildAfter ( expression, node ) ; compiler.reportCodeChange (  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P14_Delete_Statement]^^82^^^^^70^83^compiler.reportCodeChange (  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] exportTestFunction [RETURN_TYPE] void   String testFunctionName Node node Node scriptNode [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  call  expression  node  scriptNode  
[P2_Replace_Operator]^return ! ( functionName == null && !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^95^96^^^^94^97^return ! ( functionName == null || !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] isTestFunction [RETURN_TYPE] boolean   Node n String functionName [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  n  
[P2_Replace_Operator]^return ! ( functionName != null || !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^95^96^^^^94^97^return ! ( functionName == null || !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] isTestFunction [RETURN_TYPE] boolean   Node n String functionName [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  n  
[P8_Replace_Mix]^return ! ( functionName != false ;;^95^96^^^^94^97^return ! ( functionName == null || !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] isTestFunction [RETURN_TYPE] boolean   Node n String functionName [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  n  
[P5_Replace_Variable]^|| !TEST_FUNCTIONS_NAME_PATTERN.matcher ( testFunctionName ) .matches (  )  ) ;^96^^^^^94^97^|| !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] isTestFunction [RETURN_TYPE] boolean   Node n String functionName [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  n  
[P14_Delete_Statement]^^96^^^^^94^97^|| !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^[CLASS] ExportTestFunctions ExportTestFunctionsNodes  [METHOD] isTestFunction [RETURN_TYPE] boolean   Node n String functionName [VARIABLES] Pattern  TEST_FUNCTIONS_NAME_PATTERN  AbstractCompiler  compiler  String  exportSymbolFunction  functionName  testFunctionName  boolean  Node  n  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P2_Replace_Operator]^if  ( parent != null && parent.getType (  )  != Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( n != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( parent != parentull && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( parent != null && parent.getType (  )  == Token.3 && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( n != parentull && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  ( parent != null ) {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  ( (parent != null && parent.getType() == SCRIPT) )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  ( parent.getType (  )  == SCRIPT )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  ( n.getType (  )  == FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  ( isTestFunction(n, functionName) && t.inGlobalScope() )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P8_Replace_Mix]^if  ( parent != true && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P15_Unwrap_Block]^java.lang.String functionName = com.google.javascript.jscomp.NodeUtil.getFunctionName(n, parent); if ((isTestFunction(n, functionName)) && (t.inGlobalScope())) {    exportTestFunction(functionName, n, parent);};^55^56^57^58^59^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ; if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P16_Remove_Block]^^55^56^57^58^59^54^62^if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ; if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P2_Replace_Operator]^if  ( isTestFunction ( n, functionName )  || t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( isTestFunction (  functionName )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( isTestFunction ( n )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( isTestFunction ( t, functionName )  && n.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( isTestFunction ( n, t )  && functionName.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  ( isTestFunction ( n, functionName )  ) {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P6_Replace_Expression]^if  (  t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P8_Replace_Mix]^if  ( isTestFunction ( parent, functionName )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P15_Unwrap_Block]^exportTestFunction(functionName, n, parent);^58^59^60^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P16_Remove_Block]^^58^59^60^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^exportTestFunction (  n, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^exportTestFunction ( functionName,  parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^exportTestFunction ( functionName, n ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^exportTestFunction ( n, functionName, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^exportTestFunction ( functionName, parent, n ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^exportTestFunction ( parent, n, functionName ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P14_Delete_Statement]^^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P11_Insert_Donor_Statement]^String functionName = NodeUtil.getFunctionName ( n, parent ) ;exportTestFunction ( functionName, n, parent ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P1_Replace_Type]^char functionName = NodeUtil.getFunctionName ( n, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( parent, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( n, n ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName (  parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( n ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^String functionName = NodeUtil.getFunctionName ( parent, n ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P14_Delete_Statement]^^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P11_Insert_Donor_Statement]^n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ;String functionName = NodeUtil.getFunctionName ( n, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P11_Insert_Donor_Statement]^exportTestFunction ( functionName, n, parent ) ;String functionName = NodeUtil.getFunctionName ( n, parent ) ;^57^^^^^54^62^String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^if  ( isTestFunction ( functionName, n )  && t.inGlobalScope (  )  )  {^58^^^^^54^62^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P5_Replace_Variable]^exportTestFunction ( functionName, n, n ) ;^59^^^^^54^62^exportTestFunction ( functionName, n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
[P14_Delete_Statement]^^56^57^^^^54^62^n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] ExportTestFunctionsNodes  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  String  functionName  
