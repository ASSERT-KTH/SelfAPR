[P3_Replace_Literal]^static final DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "C_CANNOT_PARSE_G", "Internal compiler error. Cannot parse generated code: {0}" ) ;^34^35^36^^^34^36^static final DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}" ) ;^[CLASS] SanityCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}r. Cann" ) ;^34^35^36^^^34^36^static final DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}" ) ;^[CLASS] SanityCheck   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}" ) ;^34^35^36^^^34^36^static final DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}" ) ;^[CLASS] SanityCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSCSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^38^39^40^41^^38^44^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^[CLASS] SanityCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "rnal compiler error. Generated ba" + "----------------------------------------\n" +^38^39^40^41^^38^44^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^[CLASS] SanityCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "------------" +^38^39^40^41^^38^44^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^[CLASS] SanityCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "---------" +^38^39^40^41^^38^44^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^[CLASS] SanityCheck   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^38^39^40^41^^38^44^static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^[CLASS] SanityCheck   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^46^^^^^41^51^private final AbstractCompiler compiler;^[CLASS] SanityCheck   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^49^^^^^48^50^this.compiler = compiler;^[CLASS] SanityCheck  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  boolean  
[P5_Replace_Variable]^sanityCheckNormalization ( reparsedRoot, root ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckNormalization ( externs, reparsedRoot ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckNormalization (  root ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckNormalization ( externs ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckNormalization ( root, externs ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P7_Replace_Invocation]^sanityCheckSymbolTable ( externs, root ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P14_Delete_Statement]^^53^54^^^^52^63^sanityCheckNormalization ( externs, root ) ; Node reparsedRoot = sanityCheckCodeGeneration ( root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^Node reparsedRoot = sanityCheckCodeGeneration ( externs ) ;^54^^^^^52^63^Node reparsedRoot = sanityCheckCodeGeneration ( root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^Node reparsedRoot = sanityCheckCodeGeneration ( reparsedRoot ) ;^54^^^^^52^63^Node reparsedRoot = sanityCheckCodeGeneration ( root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P14_Delete_Statement]^^54^^^^^52^63^Node reparsedRoot = sanityCheckCodeGeneration ( root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P2_Replace_Operator]^if  ( reparsedRoot == null )  {^55^^^^^52^63^if  ( reparsedRoot != null )  {^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^if  ( root != null )  {^55^^^^^52^63^if  ( reparsedRoot != null )  {^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P8_Replace_Mix]^if  ( reparsedRoot != this )  {^55^^^^^52^63^if  ( reparsedRoot != null )  {^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P4_Replace_Constructor]^new Node ( Token.BLOCK,  new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P4_Replace_Constructor]^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^new Node ( Token.BLOCK, root, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, root )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^new Node ( Token. clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^new Node ( Token.BLOCK, reparsedRoot, new Node ( Token.BLOCK, clonedExterns )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^new Node ( Token.BLOCK, root )  ) , root.getParent (  )  ) ;^60^61^^^^52^63^new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^new Node ( Token.BLOCK )  ) , root.getParent (  )  ) ;^60^61^^^^52^63^new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^new Node ( Token. reparsedRoot )  ) , root.getParent (  )  ) ;^60^61^^^^52^63^new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^Node clonedExterns = root.cloneTree (  ) ;^56^^^^^52^63^Node clonedExterns = externs.cloneTree (  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P7_Replace_Invocation]^Node clonedExterns = externs .getParent (  )  ;^56^^^^^52^63^Node clonedExterns = externs.cloneTree (  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P8_Replace_Mix]^Node clonedExterns = root .getParent (  )  ;^56^^^^^52^63^Node clonedExterns = externs.cloneTree (  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P14_Delete_Statement]^^56^^^^^52^63^Node clonedExterns = externs.cloneTree (  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P4_Replace_Constructor]^sanityCheckSymbolTable ( new Node ( Token.BLOCK,  new Node ( Token.BLOCK, reparsedRoot )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P4_Replace_Constructor]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, root, new Node ( Token.BLOCK, reparsedRoot )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, root )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckSymbolTable ( new Node ( Token. clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P8_Replace_Mix]^root .cloneTree (  )   ) ;^61^^^^^52^63^root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P14_Delete_Statement]^^61^^^^^52^63^root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, externs )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P5_Replace_Variable]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, reparsedRoot, new Node ( Token.BLOCK, clonedExterns )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[P7_Replace_Invocation]^SymbolTable table = compiler.report (  ) ;^69^^^^^68^72^SymbolTable table = compiler.acquireSymbolTable (  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P14_Delete_Statement]^^69^^^^^68^72^SymbolTable table = compiler.acquireSymbolTable (  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P5_Replace_Variable]^table.verify ( reparsedRoot, reparsedRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P5_Replace_Variable]^table.verify (  originalRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P5_Replace_Variable]^table.verify ( reparsedRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P5_Replace_Variable]^table.verify ( originalRoot, reparsedRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P14_Delete_Statement]^^70^71^72^^^68^72^table.verify ( reparsedRoot, originalRoot ) ; table.release (  ) ; }^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P7_Replace_Invocation]^table .verify ( originalRoot , reparsedRoot )  ;^71^^^^^68^72^table.release (  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P14_Delete_Statement]^^71^^^^^68^72^table.release (  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[P7_Replace_Invocation]^if  ( compiler.report (  )  )  {^82^^^^^81^104^if  ( compiler.hasHaltingErrors (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P9_Replace_Statement]^if  ( compiler.isNormalized (  )  )  {^82^^^^^81^104^if  ( compiler.hasHaltingErrors (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P15_Unwrap_Block]^return null;^82^83^^85^86^81^104^if  ( compiler.hasHaltingErrors (  )  )  {  return null; }^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P16_Remove_Block]^^82^83^^85^86^81^104^if  ( compiler.hasHaltingErrors (  )  )  {  return null; }^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P8_Replace_Mix]^return true;^85^^^^^81^104^return null;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( compiler.hasHaltingErrors (  )  )  {     return null; }^82^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P1_Replace_Type]^char source = compiler.toSource ( root ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^String source = compiler.toSource ( root2 ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^String source = root.toSource ( compiler ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^String source = compiler.parseSyntheticCode ( root ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P11_Insert_Donor_Statement]^String source2 = compiler.toSource ( root2 ) ;String source = compiler.toSource ( root ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P8_Replace_Mix]^String source = compiler .report (  )  ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^Node root2 = compiler.parseSyntheticCode ( source2 ) ;^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^Node root2 = source.parseSyntheticCode ( compiler ) ;^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^Node root2 = compiler.addChangeHandler ( source ) ;^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^Node root2 = compiler .hasHaltingErrors (  )  ;^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^if  ( compiler.report (  )  )  {^90^^^^^81^104^if  ( compiler.hasHaltingErrors (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P9_Replace_Statement]^if  ( compiler.isNormalized (  )  )  {^90^^^^^81^104^if  ( compiler.hasHaltingErrors (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.SanityCheck.CANNOT_PARSE_GENERATED_CODE, com.google.common.base.StringUtil.truncateAtMaxLength(source, 100, true))); return null;^90^91^92^93^94^81^104^if  ( compiler.hasHaltingErrors (  )  )  { compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ; return null; }^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P16_Remove_Block]^^90^91^92^93^94^81^104^if  ( compiler.hasHaltingErrors (  )  )  { compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ; return null; }^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( ! ( source.equals ( source2 )  )  )  {     compiler.report ( make ( GENERATED_BAD_CODE, truncateAtMaxLength ( source, 100, true ) , truncateAtMaxLength ( source2, 100, true )  )  ) ; }^90^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P8_Replace_Mix]^return this;^93^^^^^81^104^return null;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 105, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, false )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength (  100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make (  StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^compiler .toSource ( root2 )   ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( ! ( source.equals ( source2 )  )  )  {     compiler.report ( make ( GENERATED_BAD_CODE, truncateAtMaxLength ( source, 100, true ) , truncateAtMaxLength ( source2, 100, true )  )  ) ; }^91^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( compiler.hasHaltingErrors (  )  )  {     compiler.report ( make ( CANNOT_PARSE_GENERATED_CODE, truncateAtMaxLength ( source, 100, true )  )  ) ;     return null; }^91^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( source, StringUtil.truncateAtMaxLength ( CANNOT_PARSE_GENERATED_CODE, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source, 101, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source, 100, false )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P11_Insert_Donor_Statement]^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P11_Insert_Donor_Statement]^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P8_Replace_Mix]^return true;^93^^^^^81^104^return null;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^if  ( compiler .parseSyntheticCode ( source )   )  {^90^^^^^81^104^if  ( compiler.hasHaltingErrors (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( compiler.hasHaltingErrors (  )  )  {     return null; }^90^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 95, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^compiler .toSource ( root )   ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 104, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source, 109, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^92^93^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ; return null;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P1_Replace_Type]^char source2 = compiler.toSource ( root2 ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^String source2 = compiler.toSource ( root ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^String source2 = root2.toSource ( compiler ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^String source2 = compiler.parseSyntheticCode ( root2 ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^String source2 = compiler .report (  )  ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P11_Insert_Donor_Statement]^String source = compiler.toSource ( root ) ;String source2 = compiler.toSource ( root2 ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P8_Replace_Mix]^String source2 = compiler.parseSyntheticCode ( root ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^if  ( !source.equals ( source )  )  {^97^^^^^81^104^if  ( !source.equals ( source2 )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^if  ( !source.equals ( source22 )  )  {^97^^^^^81^104^if  ( !source.equals ( source2 )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P8_Replace_Mix]^if  ( source.equals ( source2 )  )  {^97^^^^^81^104^if  ( !source.equals ( source2 )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.SanityCheck.GENERATED_BAD_CODE, com.google.common.base.StringUtil.truncateAtMaxLength(source, 100, true), com.google.common.base.StringUtil.truncateAtMaxLength(source2, 100, true)));^97^98^99^100^101^81^104^if  ( !source.equals ( source2 )  )  { compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ; }^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P16_Remove_Block]^^97^98^99^100^101^81^104^if  ( !source.equals ( source2 )  )  { compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ; }^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( compiler.hasHaltingErrors (  )  )  {     compiler.report ( make ( CANNOT_PARSE_GENERATED_CODE, truncateAtMaxLength ( source, 100, true )  )  ) ;     return null; }^97^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 102, true ) , StringUtil.truncateAtMaxLength ( source2, 102, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, false ) , StringUtil.truncateAtMaxLength ( source2, 100, false )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 93, true ) , StringUtil.truncateAtMaxLength ( source2, 93, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength (  100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength (  100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make (  StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source2, 100, true ) , StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( source, StringUtil.truncateAtMaxLength ( GENERATED_BAD_CODE, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( ! ( source.equals ( source2 )  )  )  {     compiler.report ( make ( GENERATED_BAD_CODE, truncateAtMaxLength ( source, 100, true ) , truncateAtMaxLength ( source2, 100, true )  )  ) ; }^98^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P13_Insert_Block]^if  ( compiler.hasHaltingErrors (  )  )  {     compiler.report ( make ( CANNOT_PARSE_GENERATED_CODE, truncateAtMaxLength ( source, 100, true )  )  ) ;     return null; }^98^^^^^81^104^[Delete]^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 109, true ) , StringUtil.truncateAtMaxLength ( source2, 109, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( source2, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( GENERATED_BAD_CODE, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source, 105, true ) , StringUtil.truncateAtMaxLength ( source2, 105, true )  )  ) ;^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source, 100, false ) , StringUtil.truncateAtMaxLength ( source2, 100, false )  )  ) ;^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^StringUtil.truncateAtMaxLength ( source2, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source2, 103, true )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source2, 100, false )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P14_Delete_Statement]^^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P11_Insert_Donor_Statement]^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P11_Insert_Donor_Statement]^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, this, true ) , StringUtil.truncateAtMaxLength ( source2, this, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 95, true ) , StringUtil.truncateAtMaxLength ( source2, 95, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^compiler .toSource ( root )   )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 92, true ) , StringUtil.truncateAtMaxLength ( source2, 92, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 106, true ) , StringUtil.truncateAtMaxLength ( source2, 106, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source2, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source, , true ) , StringUtil.truncateAtMaxLength ( source2, , true )  )  ) ;^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P3_Replace_Literal]^StringUtil.truncateAtMaxLength ( source2, 109, true )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P5_Replace_Variable]^return root;^103^^^^^81^104^return root2;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[P7_Replace_Invocation]^compiler.removeChangeHandler ( handler ) ;^114^^^^^110^135^compiler.addChangeHandler ( handler ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P8_Replace_Mix]^compiler.addChangeHandler ( this ) ;^114^^^^^110^135^compiler.addChangeHandler ( handler ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P14_Delete_Statement]^^114^^^^^110^135^compiler.addChangeHandler ( handler ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P11_Insert_Donor_Statement]^compiler.removeChangeHandler ( handler ) ;compiler.addChangeHandler ( handler ) ;^114^^^^^110^135^compiler.addChangeHandler ( handler ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P3_Replace_Literal]^new NodeTypeNormalizer ( false ) .process ( null, root ) ;^119^^^^^110^135^new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P4_Replace_Constructor]^new Normalize ( compiler, true )  .process ( null, root ) ;^119^^^^^110^135^new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^new NodeTypeNormalizer ( true ) .process ( null, externs ) ;^119^^^^^110^135^new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P14_Delete_Statement]^^119^^^^^110^135^new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P3_Replace_Literal]^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, NodeTypeNormalizer should assert first., NodeTypeNo" ) ;^120^121^^^^110^135^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, NodeTypeNormalizer should assert first." ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P14_Delete_Statement]^^120^121^^^^110^135^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, NodeTypeNormalizer should assert first." ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, Normalize should assert first." ) ;Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, NodeTypeNormalizer should assert first." ) ;^120^121^^^^110^135^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, NodeTypeNormalizer should assert first." ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P7_Replace_Invocation]^if  ( compiler.report (  )  )  {^123^^^^^110^135^if  ( compiler.isNormalized (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P9_Replace_Statement]^if  ( compiler.hasHaltingErrors (  )  )  {^123^^^^^110^135^if  ( compiler.isNormalized (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P3_Replace_Literal]^( new Normalize ( compiler, false )  ) .process ( externs, root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^CompilerPass pass = new Normalize.VerifyConstants ( compiler ) ;^129^130^^^^110^135^CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^CompilerPass pass = new Normalize.VerifyConstants (  checkUserDeclarations ) ;^129^130^^^^110^135^CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^CompilerPass pass = new Normalize.VerifyConstants ( checkUserDeclarations, compiler ) ;^129^130^^^^110^135^CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P3_Replace_Literal]^boolean checkUserDeclarations = false;^128^^^^^110^135^boolean checkUserDeclarations = true;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P4_Replace_Constructor]^( new Normalize ( compiler, true )  ) .process (  root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P4_Replace_Constructor]^( new Normalize ( compiler, true )  ) .process ( externs ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^( new Normalize (  true )  ) .process ( externs, root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^( new Normalize ( compiler, true )  ) .process ( root, externs ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^( new Normalize ( root, true )  ) .process ( externs, compiler ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P14_Delete_Statement]^^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P3_Replace_Literal]^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "his sh" ) ;^125^126^^^^110^135^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, Normalize should assert first." ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P14_Delete_Statement]^^125^126^^^^110^135^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, Normalize should assert first." ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, NodeTypeNormalizer should assert first." ) ;Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, Normalize should assert first." ) ;^125^126^^^^110^135^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, Normalize should assert first." ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^pass.process (  root ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^pass.process ( externs ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P5_Replace_Variable]^pass.process ( root, externs ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P7_Replace_Invocation]^pass .process ( externs , externs )  ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P14_Delete_Statement]^^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P8_Replace_Mix]^if  ( compiler .addChangeHandler ( handler )   )  {^123^^^^^110^135^if  ( compiler.isNormalized (  )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P8_Replace_Mix]^( new Normalize ( compiler, true )  ) .process ( externs, externs ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P3_Replace_Literal]^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "never fire" ) ;^125^126^^^^110^135^Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, Normalize should assert first." ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P7_Replace_Invocation]^compiler.addChangeHandler ( handler ) ;^134^^^^^110^135^compiler.removeChangeHandler ( handler ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P14_Delete_Statement]^^134^^^^^110^135^compiler.removeChangeHandler ( handler ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[P11_Insert_Donor_Statement]^compiler.addChangeHandler ( handler ) ;compiler.removeChangeHandler ( handler ) ;^134^^^^^110^135^compiler.removeChangeHandler ( handler ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
