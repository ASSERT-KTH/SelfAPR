[P8_Replace_Mix]^private  Map<String, Var> vars = new LinkedHashMap<String, Var> (  ) ;^54^^^^^49^59^private final Map<String, Var> vars = new LinkedHashMap<String, Var> (  ) ;^[CLASS] Scope Var   [VARIABLES] 
[P8_Replace_Mix]^private  Scope parent;^55^^^^^50^60^private final Scope parent;^[CLASS] Scope Var   [VARIABLES] 
[P8_Replace_Mix]^private  Node rootNode;^56^^^^^51^61^private final Node rootNode;^[CLASS] Scope Var   [VARIABLES] 
[P1_Replace_Type]^char name;^67^^^^^62^72^String name;^[CLASS] Scope Var   [VARIABLES] 
[P8_Replace_Mix]^private JSDocInfo info ;^80^^^^^75^85^private JSDocInfo info = null;^[CLASS] Scope Var   [VARIABLES] 
[P8_Replace_Mix]^private  boolean typeInferred;^87^^^^^82^92^private final boolean typeInferred;^[CLASS] Scope Var   [VARIABLES] 
[P1_Replace_Type]^long  index;^99^^^^^94^104^int index;^[CLASS] Scope Var   [VARIABLES] 
[P8_Replace_Mix]^short  index;^99^^^^^94^104^int index;^[CLASS] Scope Var   [VARIABLES] 
[P5_Replace_Variable]^this.typeInferred = typeInferred;^110^^^^^109^111^this.typeInferred = inferred;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Scope$Var(boolean)   boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^Preconditions.checkNotNull ( scope ) ;^267^^^^^266^279^Preconditions.checkNotNull ( parent ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P7_Replace_Invocation]^Preconditions.checkState ( parent ) ;^267^^^^^266^279^Preconditions.checkNotNull ( parent ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P14_Delete_Statement]^^267^268^^^^266^279^Preconditions.checkNotNull ( parent ) ; Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;Preconditions.checkNotNull ( parent ) ;^267^^^^^266^279^Preconditions.checkNotNull ( parent ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( var.scope == this ) ;Preconditions.checkNotNull ( parent ) ;^267^^^^^266^279^Preconditions.checkNotNull ( parent ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( isTypeInferred (  )  ) ;Preconditions.checkNotNull ( parent ) ;^267^^^^^266^279^Preconditions.checkNotNull ( parent ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( name )  == null ) ;Preconditions.checkNotNull ( parent ) ;^267^^^^^266^279^Preconditions.checkNotNull ( parent ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P2_Replace_Operator]^Preconditions.checkArgument ( rootNode == parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^Preconditions.checkArgument ( nameNode != parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^Preconditions.checkArgument ( rootNode != scope.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^Preconditions.checkArgument ( rootNode != nameNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^Preconditions.checkArgument ( parent.rootNode != rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^Preconditions.checkArgument ( rootNode != parent.rootNode.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P14_Delete_Statement]^^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( parent ) ;Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( var.scope == this ) ;Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( isTypeInferred (  )  ) ;Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( name )  == null ) ;Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^this.parent = scope;^270^^^^^266^279^this.parent = parent;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.parent = null;this.parent = parent;^270^^^^^266^279^this.parent = parent;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.parent = parent;^270^^^^^266^279^this.parent = parent;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^this.rootNode = nameNode;^271^^^^^266^279^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^this.rootNode =  null;^271^^^^^266^279^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^var.nameNode = nameNode;this.rootNode = rootNode;^271^^^^^266^279^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.isBottom = true;this.rootNode = rootNode;^271^^^^^266^279^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.rootNode = rootNode;^271^^^^^266^279^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^JSType nodeType = nameNode.getJSType (  ) ;^272^^^^^266^279^JSType nodeType = rootNode.getJSType (  ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P7_Replace_Invocation]^JSType nodeType = rootNode .getType (  )  ;^272^^^^^266^279^JSType nodeType = rootNode.getJSType (  ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P14_Delete_Statement]^^272^^^^^266^279^JSType nodeType = rootNode.getJSType (  ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P2_Replace_Operator]^if  ( nodeType != null || nodeType instanceof FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P2_Replace_Operator]^if  ( nodeType == null && nodeType instanceof FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P2_Replace_Operator]^if  ( nodeType != null && nodeType  |  FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^if  ( type != null && nodeType instanceof FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P6_Replace_Expression]^if  ( nodeType != null ) {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P6_Replace_Expression]^if  (  nodeType instanceof FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P15_Unwrap_Block]^thisType = ((com.google.javascript.rhino.jstype.FunctionType) (nodeType)).getTypeOfThis();^273^274^275^276^277^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  { thisType =  (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ; } else { thisType = parent.thisType; }^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P16_Remove_Block]^^273^274^275^276^277^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  { thisType =  (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ; } else { thisType = parent.thisType; }^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^thisType = scope.thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^thisType = thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^thisType = parent.thisType.thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^thisType = parent;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.thisType = thisType;thisType = parent.thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;thisType = parent.thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^thisType =   (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ;^274^^^^^266^279^thisType =  (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^thisType =  (  ( FunctionType )  nodeType )  .getNativeObjectType (  )  ;^274^^^^^266^279^thisType =  (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P14_Delete_Statement]^^274^^^^^266^279^thisType =  (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P3_Replace_Literal]^this.isBottom = true;^278^^^^^266^279^this.isBottom = false;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.isBottom = true;this.isBottom = false;^278^^^^^266^279^this.isBottom = false;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^this.parent = false;^287^^^^^286^291^this.parent = null;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.parent = parent;this.parent = null;^287^^^^^286^291^this.parent = null;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.parent = null;^287^^^^^286^291^this.parent = null;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^this.rootNode = nameNode;^288^^^^^286^291^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^var.nameNode = nameNode;this.rootNode = rootNode;^288^^^^^286^291^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.isBottom = true;this.rootNode = rootNode;^288^^^^^286^291^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.rootNode = rootNode;^288^^^^^286^291^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^thisType =  null.getTypeRegistry (  ) .getNativeObjectType ( GLOBAL_THIS ) ;^289^^^^^286^291^thisType = compiler.getTypeRegistry (  ) .getNativeObjectType ( GLOBAL_THIS ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P14_Delete_Statement]^^289^^^^^286^291^thisType = compiler.getTypeRegistry (  ) .getNativeObjectType ( GLOBAL_THIS ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P14_Delete_Statement]^^289^290^^^^286^291^thisType = compiler.getTypeRegistry (  ) .getNativeObjectType ( GLOBAL_THIS ) ; this.isBottom = false;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P3_Replace_Literal]^this.isBottom = true;^290^^^^^286^291^this.isBottom = false;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.isBottom = true;this.isBottom = false;^290^^^^^286^291^this.isBottom = false;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^this.parent = true;^299^^^^^298^303^this.parent = null;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.parent = parent;this.parent = null;^299^^^^^298^303^this.parent = null;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.parent = null;^299^^^^^298^303^this.parent = null;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^this.rootNode = nameNode;^300^^^^^298^303^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^var.nameNode = nameNode;this.rootNode = rootNode;^300^^^^^298^303^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.isBottom = true;this.rootNode = rootNode;^300^^^^^298^303^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.rootNode = rootNode;^300^^^^^298^303^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^this.thisType =  null;^301^^^^^298^303^this.thisType = thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^var.type = type;this.thisType = thisType;^301^^^^^298^303^this.thisType = thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^thisType = parent.thisType;this.thisType = thisType;^301^^^^^298^303^this.thisType = thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.thisType = thisType;^301^^^^^298^303^this.thisType = thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P3_Replace_Literal]^this.isBottom = false;^302^^^^^298^303^this.isBottom = true;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.rootNode = rootNode;this.isBottom = true;^302^^^^^298^303^this.isBottom = true;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.isBottom = false;this.isBottom = true;^302^^^^^298^303^this.isBottom = true;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P11_Insert_Donor_Statement]^this.type = type;this.isBottom = true;^302^^^^^298^303^this.isBottom = true;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P2_Replace_Operator]^return nameNode != null ? null : nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P5_Replace_Variable]^return rootNode == null ? null : nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P6_Replace_Expression]^return nameNode ( nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P7_Replace_Invocation]^return nameNode == null ? null : nameNode.getType (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P8_Replace_Mix]^returnrootNode .getType (  )  ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P14_Delete_Statement]^^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[P1_Replace_Type]^short  num = index;^133^^^^^132^143^int num = index;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Scope s = parent.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Scope s = scope.getVarCount (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Scope s = s.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Scope s = scope .getType (  )  ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^result = result.getParent (  ) ;Scope s = scope.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^num += s.getVarCount (  ) ;Scope s = scope.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^s = s.getParent (  ) ;Scope s = scope.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( s != null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( scope == null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^if  ( s == this )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P9_Replace_Statement]^if  ( var != null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Var is not local");^135^136^137^^^132^143^if  ( s == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P16_Remove_Block]^^135^136^137^^^132^143^if  ( s == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P13_Insert_Block]^if  ( s == null )  {     throw new IllegalArgumentException ( "Var is not local" ) ; }^136^^^^^132^143^[Delete]^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^while  ( s.getParent (  )  == null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^while  ( scope.getParent (  )  != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^while  ( s.getVar (  )  != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^while  ( s .getType (  )   != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^while  ( scope .getType (  )   != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^num += scope.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^num += s.getVar (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^result = result.getParent (  ) ;num += s.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^s = s.getParent (  ) ;num += s.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^s = s.getVar (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^s = s .getType (  )  ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^s =  scope.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^result = result.getParent (  ) ;s = s.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^num += s.getVarCount (  ) ;s = s.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^num += s .getParent (  )  ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^num += scope.getVar (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^139^140^^^^132^143^num += s.getVarCount (  ) ; s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Scope s = scope.getParent (  ) ;num += s.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Scope s = scope.getParent (  ) ;s = s.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Node parent = getParentNode (  ) ;s = s.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^138^139^^^^132^143^while  ( s.getParent (  )  != null )  { num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return index;^142^^^^^132^143^return num;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return s.isGlobal (  ) ;^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return scope.isLocal (  ) ;^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return s.isLocal (  ) ;^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Scope Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return scope.isGlobal (  ) ;^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Scope Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Scope Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^return input == null && input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Scope Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^return input != null || input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Scope Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return input == null || input.getName (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Scope Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return true ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Scope Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Scope Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return NodeUtil .getInfoForNameNode ( rootNode )  ;^171^^^^^170^172^return NodeUtil.isConstantName ( nameNode ) ;^[CLASS] Scope Var  [METHOD] isConst [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return NodeUtil .getInfoForNameNode ( nameNode )  ;^171^^^^^170^172^return NodeUtil.isConstantName ( nameNode ) ;^[CLASS] Scope Var  [METHOD] isConst [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return NodeUtil.isConstantName ( rootNode ) ;^171^^^^^170^172^return NodeUtil.isConstantName ( nameNode ) ;^[CLASS] Scope Var  [METHOD] isConst [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^171^^^^^170^172^return NodeUtil.isConstantName ( nameNode ) ;^[CLASS] Scope Var  [METHOD] isConst [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return typeInferred;^179^^^^^178^180^return isDefine;^[CLASS] Scope Var  [METHOD] isDefine [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Node parent = isTypeInferred (  ) ;^183^^^^^182^186^Node parent = getParentNode (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^183^^^^^182^186^Node parent = getParentNode (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^s = s.getParent (  ) ;Node parent = getParentNode (  ) ;^183^^^^^182^186^Node parent = getParentNode (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^return parent.getType (  )  != Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return rootNode.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return parent.getType (  )  == Token.FUNCTION ? parent : rootNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.FUNCTION ? parent : parent.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P6_Replace_Expression]^return parent.getType ( nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getJSType (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return rootNode .getJSType (  )   == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^parent : rootNode.getFirstChild (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^parent : nameNode.getJSType (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^parent : rootNode.getJSType (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^return nameNode.hashCode (  ) ;parent : nameNode.getFirstChild (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return nodeType;^193^^^^^192^194^return type;^[CLASS] Scope Var  [METHOD] getType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return rootNode;^200^^^^^199^201^return nameNode;^[CLASS] Scope Var  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Preconditions.checkArgument ( isTypeInferred (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Preconditions.checkState ( getParentNode (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( parent ) ;Preconditions.checkState ( isTypeInferred (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( var.name )  == var ) ;Preconditions.checkState ( isTypeInferred (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;Preconditions.checkState ( isTypeInferred (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;Preconditions.checkState ( isTypeInferred (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( var.scope == this ) ;Preconditions.checkState ( isTypeInferred (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( name )  == null ) ;Preconditions.checkState ( isTypeInferred (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^215^216^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ; this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^this.type = nodeType;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.type = type;this.type = type;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.thisType = thisType;this.type = type;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.parent = null;this.type = type;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.rootNode = rootNode;this.type = type;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^thisType = parent.thisType;this.type = type;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.parent = parent;this.type = type;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.isBottom = true;this.type = type;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return isDefine;^224^^^^^223^225^return typeInferred;^[CLASS] Scope Var  [METHOD] isTypeInferred [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( input != null ) return "<non-file>";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^if  ( input == null ) return "<non-file><";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^if  ( input == false ) return "<non-file>";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P15_Unwrap_Block]^return "<non-file>";^228^229^230^231^232^227^232^if  ( input == null ) return "<non-file>"; else return input.getName (  ) ; }^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P16_Remove_Block]^^228^229^230^231^232^227^232^if  ( input == null ) return "<non-file>"; else return input.getName (  ) ; }^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return input.isExtern (  ) ;^231^^^^^227^232^return input.getName (  ) ;^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^231^^^^^227^232^return input.getName (  ) ;^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return "non-file";^229^^^^^227^232^return "<non-file>";^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return "<non-file>file";^229^^^^^227^232^return "<non-file>";^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( info != null || info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( info == null && info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P6_Replace_Expression]^if  ( info != null ) {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P6_Replace_Expression]^if  (  info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^if  ( info != null && info.isDefine (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^if  ( info != true ) {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P15_Unwrap_Block]^return true;^235^236^237^238^239^234^240^if  ( info != null && info.isNoShadow (  )  )  { return true; } else { return false; }^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P16_Remove_Block]^^235^236^237^238^239^234^240^if  ( info != null && info.isNoShadow (  )  )  { return true; } else { return false; }^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return true;^238^^^^^234^240^return false;^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return false;^236^^^^^234^240^return true;^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( ! ( other  &&  Var )  )  {^243^^^^^242^249^if  ( ! ( other instanceof Var )  )  {^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^if  (  ( other instanceof Var )  )  {^243^^^^^242^249^if  ( ! ( other instanceof Var )  )  {^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P15_Unwrap_Block]^return false;^243^244^245^^^242^249^if  ( ! ( other instanceof Var )  )  { return false; }^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P16_Remove_Block]^^243^244^245^^^242^249^if  ( ! ( other instanceof Var )  )  { return false; }^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return true;^244^^^^^242^249^return false;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^return otherVar.nameNode != nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return rootNode == nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return otherVar.nameNode == rootNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return nameNode.nameNode == otherVar;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return otherVar == nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return nameNode == otherVar.nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return otherVar.nameNode  !=  nameNode;;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return rootNode.hashCode (  ) ;^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Scope Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return nameNode.getType (  ) ;^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Scope Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Scope Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return "S" + name;^257^^^^^256^258^return "Scope.Var " + name;^[CLASS] Scope Var  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return "Scope.Var "  |  name;^257^^^^^256^258^return "Scope.Var " + name;^[CLASS] Scope Var  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return typeInferred;^307^^^^^306^308^return isBottom;^[CLASS] Scope Var  [METHOD] isBottom [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return parent;^315^^^^^314^316^return rootNode;^[CLASS] Scope Var  [METHOD] getRootNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return scope;^319^^^^^318^320^return parent;^[CLASS] Scope Var  [METHOD] getParent [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Scope scope = this;Scope result = this;^323^^^^^322^328^Scope result = this;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^while  ( result.getParent (  )  == null )  {^324^^^^^322^328^while  ( result.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^while  ( scope.getParent (  )  != null )  {^324^^^^^322^328^while  ( result.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^while  ( result.getVar (  )  != null )  {^324^^^^^322^328^while  ( result.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^result = scope.getParent (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^result = result.getVar (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^num += s.getVarCount (  ) ;result = result.getParent (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^s = s.getParent (  ) ;result = result.getParent (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Scope s = scope.getParent (  ) ;result = result.getParent (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^return input.getName (  ) ;result = result.getParent (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^result = result .getType (  )  ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^324^325^^^^322^328^while  ( result.getParent (  )  != null )  { result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^result = scope.getVar (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope;^327^^^^^322^328^return result;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope;^332^^^^^331^333^return parent;^[CLASS] Scope Var  [METHOD] getParentScope [RETURN_TYPE] StaticScope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return nullType;^339^^^^^338^340^return thisType;^[CLASS] Scope Var  [METHOD] getTypeOfThis [RETURN_TYPE] ObjectType   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return declare ( name, nameNode, type, input, false ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( name, rootNode, type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare (  nameNode, type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( name,  type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( name, nameNode,  input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( name, nameNode, type,  true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( type, nameNode, name, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( name, type, nameNode, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( name, nameNode, input, type, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( name, nameNode, nodeType, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return declare ( input, nameNode, type, name, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^Preconditions.checkState ( name != null || name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^Preconditions.checkState ( name == null && name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^Preconditions.checkState ( name != null && name.length (  )  == 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^Preconditions.checkState ( name != null && name.length (  )  > 9 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^Preconditions.checkState ( name != null && name.length() + 3  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( var.name )  == var ) ;Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( var.scope == this ) ;Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( isTypeInferred (  )  ) ;Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( name )  == null ) ;Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^Preconditions.checkState ( name != null && name.length() + 1  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^Preconditions.checkState ( vars.get ( name )  != null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Preconditions.checkState ( name.get ( vars )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( result )  ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Preconditions.checkState ( vars.remove ( name )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( parent ) ;Preconditions.checkState ( vars.get ( name )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( var.name )  == var ) ;Preconditions.checkState ( vars.get ( name )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;Preconditions.checkState ( vars.get ( name )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;Preconditions.checkState ( vars.get ( name )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( var.scope == this ) ;Preconditions.checkState ( vars.get ( name )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( isTypeInferred (  )  ) ;Preconditions.checkState ( vars.get ( name )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Var var = new Var ( typeInferred ) ;^371^^^^^364^388^Var var = new Var ( inferred ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Var var = vars.get ( name ) ;Var var = new Var ( inferred ) ;^371^^^^^364^388^Var var = new Var ( inferred ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.name =  name;^372^^^^^364^388^var.name = name;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.type = type;var.name = name;^372^^^^^364^388^var.name = name;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.input = input;var.name = name;^372^^^^^364^388^var.name = name;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.nameNode = nameNode;var.name = name;^372^^^^^364^388^var.name = name;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.scope = this;var.name = name;^372^^^^^364^388^var.name = name;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^var.nameNode = rootNode;^373^^^^^364^388^var.nameNode = nameNode;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.nameNode =  nameNode;^373^^^^^364^388^var.nameNode = nameNode;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.name = name;var.nameNode = nameNode;^373^^^^^364^388^var.nameNode = nameNode;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.rootNode = rootNode;var.nameNode = nameNode;^373^^^^^364^388^var.nameNode = nameNode;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.type =  type;^374^^^^^364^388^var.type = type;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.thisType = thisType;var.type = type;^374^^^^^364^388^var.type = type;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.input = input;var.type = type;^374^^^^^364^388^var.type = type;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.name = name;var.type = type;^374^^^^^364^388^var.type = type;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.scope = this;var.type = type;^374^^^^^364^388^var.type = type;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^this.type = type;var.type = type;^374^^^^^364^388^var.type = type;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.scope =  this;^375^^^^^364^388^var.scope = this;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.type = type;var.scope = this;^375^^^^^364^388^var.scope = this;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.name = name;var.scope = this;^375^^^^^364^388^var.scope = this;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^var.index = vars.size() + 8 ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^var.index = this.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^var.index = varss.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^var.index = var.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^var.index = vars.values (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.index =  nulls.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^var.index = vars.size() - 5 ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^var.index = vars .containsKey ( this )  ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^376^377^^^^364^388^var.index = vars.size (  ) ; var.input = input;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^return vars.size (  ) ;var.index = vars.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Var var = vars.get ( name ) ;var.index = vars.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.input =  input;^377^^^^^364^388^var.input = input;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.type = type;var.input = input;^377^^^^^364^388^var.input = input;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.name = name;var.input = input;^377^^^^^364^388^var.input = input;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.info = info;var.input = input;^377^^^^^364^388^var.input = input;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^JSDocInfo info = NodeUtil.getInfoForNameNode ( rootNode ) ;^381^^^^^364^388^JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^JSDocInfo info = NodeUtil.isConstantName ( nameNode ) ;^381^^^^^364^388^JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^JSDocInfo info = NodeUtil .isConstantName ( rootNode )  ;^381^^^^^364^388^JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^381^^^^^364^388^JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^return NodeUtil.isConstantName ( nameNode ) ;JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^381^^^^^364^388^JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^var.isDefine = info != null || info.isDefine (  ) ;^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^var.isDefine = info == null && info.isDefine (  ) ;^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.isDefine = info != true && info.isDefine (  ) ;^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^var .isNoShadow (  )  = info != null && info^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P12_Insert_Condition]^if  ( info != null && info.isNoShadow (  )  )  { var.isDefine = info != null && info.isDefine (  ) ; }^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^var.info =  info;^384^^^^^364^388^var.info = info;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.input = input;var.info = info;^384^^^^^364^388^var.info = info;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^vars.put (  var ) ;^386^^^^^364^388^vars.put ( name, var ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^vars.put ( name ) ;^386^^^^^364^388^vars.put ( name, var ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^vars.put ( var, name ) ;^386^^^^^364^388^vars.put ( name, var ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^386^387^^^^364^388^vars.put ( name, var ) ; return var;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^Preconditions.checkState ( var.scope != this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Preconditions.checkState ( s == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Preconditions.checkState ( var.scope.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Preconditions.checkState ( var == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( var.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( result )  ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^Preconditions.checkState ( scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^395^396^^^^394^398^Preconditions.checkState ( var.scope == this ) ; Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( parent ) ;Preconditions.checkState ( var.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( var.name )  == var ) ;Preconditions.checkState ( var.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;Preconditions.checkState ( var.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;Preconditions.checkState ( var.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( isTypeInferred (  )  ) ;Preconditions.checkState ( var.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( name )  == null ) ;Preconditions.checkState ( var.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^Preconditions.checkState ( vars.get ( var.name )  != var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Preconditions.checkState ( varss.get ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Preconditions.checkState ( var.name.get ( vars )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Preconditions.checkState ( vars.remove ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^Preconditions.checkState ( vars.get ( name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^396^397^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ; vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;Preconditions.checkState ( vars.get ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( var.scope == this ) ;Preconditions.checkState ( vars.get ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( isTypeInferred (  )  ) ;Preconditions.checkState ( vars.get ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( vars.get ( name )  == null ) ;Preconditions.checkState ( vars.get ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Preconditions.checkState ( var.get ( vars.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^vars.remove ( name ) ;^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^vars.remove ( var.name.name ) ;^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^vars.remove ( var ) ;^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^vars.get ( var.name ) ;^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return getSlot ( name ) ;^401^^^^^400^402^return getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^401^^^^^400^402^return getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return name.get ( vars ) ;^405^^^^^404^406^return vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return vars.remove ( name ) ;^405^^^^^404^406^return vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^405^^^^^404^406^return vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^Var var = name.get ( vars ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^Var var = vars.remove ( name ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Var var = new Var ( inferred ) ;Var var = vars.get ( name ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^Var var = this.remove ( name ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^return getVar ( name ) ;Var var = vars.get ( name ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^return vars.get ( name ) ;Var var = vars.get ( name ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^var.index = vars.size (  ) ;Var var = vars.get ( name ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^return parent.getVar ( name ) ;Var var = vars.get ( name ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( var == null )  {^413^^^^^411^420^if  ( var != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P6_Replace_Expression]^if  ( parent != null )  {^413^^^^^411^420^if  ( var != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^if  ( var != this )  {^413^^^^^411^420^if  ( var != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P13_Insert_Block]^if  (  ( parent )  != null )  {     return parent.getVar ( name ) ; }else {     return null; }^413^^^^^411^420^[Delete]^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^} else if  ( parent == null )  {^415^^^^^411^420^} else if  ( parent != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^} else if  ( scope != null )  {^415^^^^^411^420^} else if  ( parent != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P6_Replace_Expression]^} else {^415^^^^^411^420^} else if  ( parent != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P15_Unwrap_Block]^return parent.getVar(name);^415^416^417^418^419^411^420^} else if  ( parent != null )  { return parent.getVar ( name ) ; } else { return null; }^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P16_Remove_Block]^^415^416^417^418^419^411^420^} else if  ( parent != null )  { return parent.getVar ( name ) ; } else { return null; }^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P13_Insert_Block]^if  ( var != null )  {     return var; }else     if  (  ( parent )  != null )  {         return parent.getVar ( name ) ;     }else {         return null;     }^415^^^^^411^420^[Delete]^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return true;^418^^^^^411^420^return null;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope.getVar ( name ) ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return name.getVar ( parent ) ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return parent.getSlot ( name ) ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return parent .getParent (  )  ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^return scope .getParent (  )  ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P11_Insert_Donor_Statement]^Scope result = this;Scope scope = this;^426^^^^^425^434^Scope scope = this;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^if  ( scope.vars.containsKey ( name )  ) return false;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( name.vars.containsKey ( scope )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( name.containsKey ( scope.vars )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( scope.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^if  ( scope.vars.put ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^if  ( scope.vars.put ( name )  ) return false;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P15_Unwrap_Block]^return true;^427^428^^430^431^425^434^if  ( scope.vars.containsKey ( name )  ) return true; if  ( scope.parent != null && recurse )  { return scope.parent.isDeclared ( name, recurse ) ; }^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P16_Remove_Block]^^427^428^^430^431^425^434^if  ( scope.vars.containsKey ( name )  ) return true; if  ( scope.parent != null && recurse )  { return scope.parent.isDeclared ( name, recurse ) ; }^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return false;^428^^^^^425^434^return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( s.vars.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( null.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( scope.vars.vars.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^if  ( scope.vars .size (  )   ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( scope.parent != null || recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^if  ( scope.parent == null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( s.parent != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( scope.parent != null && typeInferred )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( scope != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^if  ( scope.parent.parent != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P6_Replace_Expression]^if  ( scope.parent != null ) {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P6_Replace_Expression]^if  (  recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P15_Unwrap_Block]^return scope.parent.isDeclared(name, recurse);^430^431^432^^^425^434^if  ( scope.parent != null && recurse )  { return scope.parent.isDeclared ( name, recurse ) ; }^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P16_Remove_Block]^^430^431^432^^^425^434^if  ( scope.parent != null && recurse )  { return scope.parent.isDeclared ( name, recurse ) ; }^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return s.parent.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope.parent.isDeclared ( name, typeInferred ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return s.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope.parent.isDeclared (  recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope.parent.isDeclared ( name ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope.parent.parent.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope.parent.isDeclared ( recurse, name ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return name.parent.isDeclared ( scope, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return recurse.isDeclared ( name, scope.parent ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return name.isDeclared ( scope.parent, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return true;^433^^^^^425^434^return false;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return vars.size (  ) .iterator (  ) ;^440^^^^^439^441^return vars.values (  ) .iterator (  ) ;^[CLASS] Scope Var  [METHOD] getVars [RETURN_TYPE] Iterator   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^440^^^^^439^441^return vars.values (  ) .iterator (  ) ;^[CLASS] Scope Var  [METHOD] getVars [RETURN_TYPE] Iterator   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return null.values (  ) .iterator (  ) ;^440^^^^^439^441^return vars.values (  ) .iterator (  ) ;^[CLASS] Scope Var  [METHOD] getVars [RETURN_TYPE] Iterator   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return vars.size() + 7 ;^447^^^^^446^448^return vars.size (  ) ;^[CLASS] Scope Var  [METHOD] getVarCount [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return vars.values (  ) ;^447^^^^^446^448^return vars.size (  ) ;^[CLASS] Scope Var  [METHOD] getVarCount [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P3_Replace_Literal]^return vars.size() + 5 ;^447^^^^^446^448^return vars.size (  ) ;^[CLASS] Scope Var  [METHOD] getVarCount [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return this.size (  ) ;^447^^^^^446^448^return vars.size (  ) ;^[CLASS] Scope Var  [METHOD] getVarCount [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^447^^^^^446^448^return vars.size (  ) ;^[CLASS] Scope Var  [METHOD] getVarCount [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P2_Replace_Operator]^return parent != null;^454^^^^^453^455^return parent == null;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^return scope == null;^454^^^^^453^455^return parent == null;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^returnresult != null;;^454^^^^^453^455^return parent == null;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P7_Replace_Invocation]^return !isLocal (  ) ;^461^^^^^460^462^return !isGlobal (  ) ;^[CLASS] Scope Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P14_Delete_Statement]^^461^^^^^460^462^return !isGlobal (  ) ;^[CLASS] Scope Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P1_Replace_Type]^char name;^67^^^^^62^72^String name;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^private JSDocInfo info ;^80^^^^^75^85^private JSDocInfo info = null;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P8_Replace_Mix]^private  boolean typeInferred;^87^^^^^82^92^private final boolean typeInferred;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P1_Replace_Type]^short  index;^99^^^^^94^104^int index;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[P5_Replace_Variable]^this.typeInferred = typeInferred;^110^^^^^109^111^this.typeInferred = inferred;^[CLASS] Var  [METHOD] <init> [RETURN_TYPE] Scope$Var(boolean)   boolean inferred [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  
[P2_Replace_Operator]^return nameNode != null ? null : nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  
[P6_Replace_Expression]^return nameNode ( nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  
[P7_Replace_Invocation]^return nameNode == null ? null : nameNode.getType (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  
[P14_Delete_Statement]^^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  
[P1_Replace_Type]^short  num = index;^133^^^^^132^143^int num = index;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^Scope s = scope.getVarCount (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^Scope s = scope .getType (  )  ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^Scope s = s.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^num += s.getVarCount (  ) ;Scope s = scope.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^s = s.getParent (  ) ;Scope s = scope.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^if  ( s != null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^if  ( scope == null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^if  ( s == false )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Var is not local");^135^136^137^^^132^143^if  ( s == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P16_Remove_Block]^^135^136^137^^^132^143^if  ( s == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P13_Insert_Block]^if  ( s == null )  {     throw new IllegalArgumentException ( "Var is not local" ) ; }^136^^^^^132^143^[Delete]^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^return ;^136^^^^^132^143^throw new IllegalArgumentException  (" ")  ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^while  ( s.getParent (  )  == null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^while  ( scope.getParent (  )  != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^while  ( s .getType (  )   != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^num += scope.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^s = s.getParent (  ) ;num += s.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^s = scope.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^s = s .getType (  )  ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^num += s.getVarCount (  ) ;s = s.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^num += s .getParent (  )  ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^Scope s = scope.getParent (  ) ;num += s.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^Scope s = scope.getParent (  ) ;s = s.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^Node parent = getParentNode (  ) ;s = s.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^138^139^^^^132^143^while  ( s.getParent (  )  != null )  { num += s.getVarCount (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return index;^142^^^^^132^143^return num;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return s.isGlobal (  ) ;^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^return scope.isLocal (  ) ;^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^return scope.isGlobal (  ) ;^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return s.isLocal (  ) ;^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^return input == null && input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^return input != null || input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^return input == null || input.getName (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^171^^^^^170^172^return NodeUtil.isConstantName ( nameNode ) ;^[CLASS] Var  [METHOD] isConst [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return typeInferred;^179^^^^^178^180^return isDefine;^[CLASS] Var  [METHOD] isDefine [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^Node parent = isTypeInferred (  ) ;^183^^^^^182^186^Node parent = getParentNode (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^183^^^^^182^186^Node parent = getParentNode (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^s = s.getParent (  ) ;Node parent = getParentNode (  ) ;^183^^^^^182^186^Node parent = getParentNode (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^return parent.getType (  )  <= Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.FUNCTION ? parent : parent.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P6_Replace_Expression]^return parent.getType ( nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getParent (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^return nameNode.getParent (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^return parent .getParent (  )   == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^parent : nameNode.getParent (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^parent : parent.getFirstChild (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P11_Insert_Donor_Statement]^return nameNode.hashCode (  ) ;parent : nameNode.getFirstChild (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return parent;^200^^^^^199^201^return nameNode;^[CLASS] Var  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^Preconditions.checkState ( getParentNode (  )  ) ;^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^215^^^^^214^217^Preconditions.checkState ( isTypeInferred (  )  ) ;^[CLASS] Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^this.type =  null;^216^^^^^214^217^this.type = type;^[CLASS] Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return isDefine;^224^^^^^223^225^return typeInferred;^[CLASS] Var  [METHOD] isTypeInferred [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^if  ( input != null ) return "<non-file>";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P3_Replace_Literal]^if  ( input == null ) return "nnon-file>";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^if  ( input == true ) return "<non-file>";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P15_Unwrap_Block]^return "<non-file>";^228^229^230^231^232^227^232^if  ( input == null ) return "<non-file>"; else return input.getName (  ) ; }^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P16_Remove_Block]^^228^229^230^231^232^227^232^if  ( input == null ) return "<non-file>"; else return input.getName (  ) ; }^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^return input.isExtern (  ) ;^231^^^^^227^232^return input.getName (  ) ;^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^231^^^^^227^232^return input.getName (  ) ;^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P3_Replace_Literal]^return "non-finon-file>";^229^^^^^227^232^return "<non-file>";^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P3_Replace_Literal]^return "";^229^^^^^227^232^return "<non-file>";^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^if  ( info != null || info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^if  ( info == null && info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P6_Replace_Expression]^if  ( info != null ) {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P6_Replace_Expression]^if  (  info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^if  ( info != null && info .isNoShadow (  )   )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P15_Unwrap_Block]^return true;^235^236^237^238^239^234^240^if  ( info != null && info.isNoShadow (  )  )  { return true; } else { return false; }^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P16_Remove_Block]^^235^236^237^238^239^234^240^if  ( info != null && info.isNoShadow (  )  )  { return true; } else { return false; }^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P3_Replace_Literal]^return true;^238^^^^^234^240^return false;^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P3_Replace_Literal]^return false;^236^^^^^234^240^return true;^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^if  ( ! ( other  >=  Var )  )  {^243^^^^^242^249^if  ( ! ( other instanceof Var )  )  {^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P15_Unwrap_Block]^return false;^243^244^245^^^242^249^if  ( ! ( other instanceof Var )  )  { return false; }^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P16_Remove_Block]^^243^244^245^^^242^249^if  ( ! ( other instanceof Var )  )  { return false; }^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P3_Replace_Literal]^return true;^244^^^^^242^249^return false;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P2_Replace_Operator]^return otherVar.nameNode != nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return parent == nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return otherVar.nameNode == parent;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return nameNode.nameNode == otherVar;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return nameNode == otherVar.nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^returnparent  !=  nameNode;;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[P5_Replace_Variable]^return parent.hashCode (  ) ;^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P7_Replace_Invocation]^return nameNode.getType (  ) ;^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P14_Delete_Statement]^^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[P8_Replace_Mix]^return "Scope.Var "   instanceof   name;^257^^^^^256^258^return "Scope.Var " + name;^[CLASS] Var  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
