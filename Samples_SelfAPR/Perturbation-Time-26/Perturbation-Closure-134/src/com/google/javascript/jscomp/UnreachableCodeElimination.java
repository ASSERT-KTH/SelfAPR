[P8_Replace_Mix]^private static final Logger logger  = null ;^47^48^^^^47^48^private static final Logger logger = Logger.getLogger ( UnreachableCodeElimination.class.getName (  )  ) ;^[CLASS] UnreachableCodeElimination   [VARIABLES] 
[P8_Replace_Mix]^private  boolean removeNoOpStatements;^51^^^^^46^56^private final boolean removeNoOpStatements;^[CLASS] UnreachableCodeElimination   [VARIABLES] 
[P8_Replace_Mix]^Deque<ControlFlowGraph<Node>> cfgStack ;^53^54^^^^53^54^Deque<ControlFlowGraph<Node>> cfgStack = new LinkedList<ControlFlowGraph<Node>> (  ) ;^[CLASS] UnreachableCodeElimination   [VARIABLES] 
[P8_Replace_Mix]^ControlFlowGraph<Node> curCfg  = null ;^56^^^^^51^61^ControlFlowGraph<Node> curCfg = null;^[CLASS] UnreachableCodeElimination   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^60^^^^^58^62^this.compiler = compiler;^[CLASS] UnreachableCodeElimination  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  
[P8_Replace_Mix]^this.removeNoOpStatements =  null;^61^^^^^58^62^this.removeNoOpStatements = removeNoOpStatements;^[CLASS] UnreachableCodeElimination  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean removeNoOpStatements [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  
[P11_Insert_Donor_Statement]^Node body = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^66^^^^^65^76^Scope scope = t.getScope (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^66^^^^^65^76^Scope scope = t.getScope (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P3_Replace_Literal]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^69^^^^^65^76^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^cfa.process ( null.getRootNode (  )  ) ;^70^^^^^65^76^cfa.process ( null, scope.getRootNode (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^70^71^^^^65^76^cfa.process ( null, scope.getRootNode (  )  ) ; cfgStack.push ( curCfg ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^cfgStack.pop ( curCfg ) ;^71^^^^^65^76^cfgStack.push ( curCfg ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^cfgStack .pop (  )  ;^71^^^^^65^76^cfgStack.push ( curCfg ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^71^^^^^65^76^cfgStack.push ( curCfg ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^curCfg = cfa.process (  ) ;^72^^^^^65^76^curCfg = cfa.getCfg (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^curCfg =  null.getCfg (  ) ;^72^^^^^65^76^curCfg = cfa.getCfg (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^curCfg = cfgStack.pop (  ) ;curCfg = cfa.getCfg (  ) ;^72^^^^^65^76^curCfg = cfa.getCfg (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^72^^^^^65^76^curCfg = cfa.getCfg (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^74^75^^^^65^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( curCfg ) .compute ( curCfg.getEntry (  ) .getValue (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^75^^^^^65^76^.compute ( curCfg.getEntry (  ) .getValue (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^.compute ( null.getEntry (  ) .getValue (  )  ) ;^75^^^^^65^76^.compute ( curCfg.getEntry (  ) .getValue (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^curCfg ;^80^^^^^79^81^curCfg = cfgStack.pop (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  NodeTraversal  t  ControlFlowGraph  curCfg  
[P11_Insert_Donor_Statement]^curCfg = cfa.getCfg (  ) ;curCfg = cfgStack.pop (  ) ;^80^^^^^79^81^curCfg = cfgStack.pop (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  NodeTraversal  t  ControlFlowGraph  curCfg  
[P14_Delete_Statement]^^80^^^^^79^81^curCfg = cfgStack.pop (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  NodeTraversal  t  ControlFlowGraph  curCfg  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[P7_Replace_Invocation]^NodeTraversal .getScope (  )  ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, externs, this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[P14_Delete_Statement]^^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[P2_Replace_Operator]^if  ( parent != null )  {^90^^^^^89^118^if  ( parent == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( n == null )  {^90^^^^^89^118^if  ( parent == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^if  ( finallyBlock == false )  {^90^^^^^89^118^if  ( parent == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P9_Replace_Statement]^if  ( gNode == null )  {^90^^^^^89^118^if  ( parent == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P15_Unwrap_Block]^return ;^90^91^92^^^89^118^if  ( parent == null )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P16_Remove_Block]^^90^91^92^^^89^118^if  ( parent == null )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P13_Insert_Block]^if  ( gNode == null )  {     return ; }^90^^^^^89^118^[Delete]^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.FUNCTION && n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.FUNCTION ) {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( n.getType (  )  == FUNCTION )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( n.getType (  )  == SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P15_Unwrap_Block]^return ;^93^94^95^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P16_Remove_Block]^^93^94^95^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  ==  ( EMPTY )  )  ||  (  (  ( n.getType (  )  )  ==  ( BLOCK )  )  &&  ( ! ( n.hasChildren (  )  )  )  )  )  {     return ; }^93^^^^^89^118^[Delete]^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( finallyBlock.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( n .getNext (  )   == Token.FUNCTION || n^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^if  ( finallyBlock.removeChild (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( !(catchOrFinallyBlock.hasChildren()) && (finallyBlock == null) || !(finallyBlock.hasChildren()) )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( (finallyBlock == null || !(finallyBlock.hasChildren())) )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( finallyBlock == null )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( !catchOrFinallyBlock.hasChildren (  )  || ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null && !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock != null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( n == null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == parentull || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null ) {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  (  !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( (finallyBlock == null || !(finallyBlock.hasChildren())) )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( finallyBlock == null )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( !catchOrFinallyBlock.removeChild (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( !catchOrFinallyBlock .replaceChild ( body , catchOrFinallyBlock )   && ( finallyBlock == null || !finallyBlock^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^if  ( !catchOrFinallyBlock .replaceChild ( finallyBlock , parent )   && ( finallyBlock == this || !finallyBlock^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^n = parent;^107^^^^^102^108^n = body;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^104^^^^^102^108^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^n.replaceChild ( body ) ;^104^^^^^102^108^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^n.replaceChild ( parent ) ;^104^^^^^102^108^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^104^105^^^^102^108^n.removeChild ( body ) ; parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( body ) ;^104^^^^^102^108^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, body ) ;n.removeChild ( body ) ;^104^^^^^102^108^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( parent, body ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( n, n ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild (  body ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( body, n ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^105^106^^^^102^108^parent.replaceChild ( n, body ) ; compiler.reportCodeChange (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^n.removeChild ( body ) ;parent.replaceChild ( n, body ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^106^^^^^102^108^compiler.reportCodeChange (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^n = n;^107^^^^^89^118^n = body;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^n =  parent;^107^^^^^89^118^n = body;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^Node body = parent.getFirstChild (  ) ;^98^^^^^89^118^Node body = n.getFirstChild (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^Node body = n.removeChild (  ) ;^98^^^^^89^118^Node body = n.getFirstChild (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node body = n.getFirstChild (  ) ;^98^^^^^89^118^Node body = n.getFirstChild (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^Node catchOrFinallyBlock = parent.getNext (  ) ;^99^^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^Node catchOrFinallyBlock = body.removeChild (  ) ;^99^^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^Node catchOrFinallyBlock = body .getType (  )  ;^99^^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;Node catchOrFinallyBlock = body.getNext (  ) ;^99^^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P12_Insert_Condition]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  { Node catchOrFinallyBlock = body.getNext (  ) ; Node finallyBlock = catchOrFinallyBlock.getNext (  ) ; }^99^100^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ; Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^Node finallyBlock = parent.getNext (  ) ;^100^^^^^89^118^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^Node finallyBlock = catchOrFinallyBlock.removeChild (  ) ;^100^^^^^89^118^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^Node catchOrFinallyBlock = body.getNext (  ) ;Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^100^^^^^89^118^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^98^99^^^^89^118^Node body = n.getFirstChild (  ) ; Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^Node catchOrFinallyBlock = n.getNext (  ) ;^99^^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^99^100^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ; Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^100^^^^^89^118^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^( n == null || !finallyBlock.hasChildren (  )  )  )  {^103^^^^^89^118^( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^( finallyBlock == null || !finallyBlock.removeChild (  )  )  )  {^103^^^^^89^118^( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^103^104^^^^89^118^( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  { n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^n.replaceChild ( body ) ;^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^n.replaceChild ( parent ) ;^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^104^105^^^^89^118^n.removeChild ( body ) ; parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( body ) ;^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, body ) ;n.removeChild ( body ) ;^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( parent, body ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( n, parent ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild (  body ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( body, n ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^parent .removeChild ( catchOrFinallyBlock )  ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^parent.replaceChild ( n, n ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^105^106^^^^89^118^parent.replaceChild ( n, body ) ; compiler.reportCodeChange (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P11_Insert_Donor_Statement]^n.removeChild ( body ) ;parent.replaceChild ( n, body ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^106^^^^^89^118^compiler.reportCodeChange (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( n == finallyBlockull || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( !catchOrFinallyBlock .replaceChild ( body , body )   && ( finallyBlock == null || !finallyBlock^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^n .removeChild ( catchOrFinallyBlock )  ;^104^^^^^102^108^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^parent.replaceChild ( finallyBlock, body ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^parent .removeChild ( parent )  ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^parent.replaceChild ( n, parent ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^Node catchOrFinallyBlock = parent.removeChild (  ) ;^99^^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( n .getNext (  )   == Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^Node finallyBlock = n.getNext (  ) ;^100^^^^^89^118^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^( parent == null || !finallyBlock.hasChildren (  )  )  )  {^103^^^^^89^118^( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^n .removeChild ( finallyBlock )  ;^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^GraphNode<Node, Branch> gNode = curCfg.getNode ( parent ) ;^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^GraphNode<Node, Branch> gNode = n.getNode ( curCfg ) ;^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^GraphNode<Node, Branch> gNode = curCfg.getNode ( finallyBlock ) ;^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^GraphNode<Node, Branch> gNode = 4.getNode ( n ) ;^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( gNode != null )  {^111^^^^^89^118^if  ( gNode == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^if  ( gNode == true )  {^111^^^^^89^118^if  ( gNode == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P9_Replace_Statement]^if  ( parent == null )  {^111^^^^^89^118^if  ( gNode == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P15_Unwrap_Block]^return ;^111^112^113^^^89^118^if  ( gNode == null )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P16_Remove_Block]^^111^112^113^^^89^118^if  ( gNode == null )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P13_Insert_Block]^if  ( parent == null )  {     return ; }^111^^^^^89^118^[Delete]^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE && ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( gNode.getAnnotation (  )  < GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements || !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( finallyBlock )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( n && !NodeUtil.mayHaveSideEffects ( removeNoOpStatements )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^if  ( removeNoOpStatements.getAnnotation (  )  != GraphReachability.REACHABLE || ( gNode && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE ) {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  (  ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( gNode.getAnnotation (  )  != REACHABLE )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P6_Replace_Expression]^if  ( (removeNoOpStatements && mayHaveSideEffects(n))) )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.redeclareVarsInsideBranch ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P15_Unwrap_Block]^removeDeadExprStatementSafely(n, parent);^114^115^116^117^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  { removeDeadExprStatementSafely ( n, parent ) ; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P16_Remove_Block]^^114^115^116^117^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  { removeDeadExprStatementSafely ( n, parent ) ; }^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( finallyBlock, parent ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( n, finallyBlock ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely (  parent ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( n ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( parent, n ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^process ( n, parent ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( parent )  )  )  {^115^^^^^89^118^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^( removeNoOpStatements && !NodeUtil.redeclareVarsInsideBranch ( n )  )  )  {^115^^^^^89^118^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^( removeNoOpStatements && !NodeUtil .redeclareVarsInsideBranch ( finallyBlock )   )  )  {^115^^^^^89^118^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P8_Replace_Mix]^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( finallyBlock )  )  )  {^115^^^^^89^118^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^115^116^^^^89^118^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  { removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( finallyBlock, parent ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( n, finallyBlock ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely (  parent ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( n ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P5_Replace_Variable]^removeDeadExprStatementSafely ( parent, n ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P7_Replace_Invocation]^process ( n, parent ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P14_Delete_Statement]^^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.EMPTY && ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK || !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  > Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.null && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.EMPTY ) {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P6_Replace_Expression]^if  (  ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P6_Replace_Expression]^if  ( n.getType (  )  == EMPTY )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P6_Replace_Expression]^if  ( (n.getType() == BLOCK && !(n.hasChildren())) )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P6_Replace_Expression]^if  ( n.getType (  )  == BLOCK )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^if  ( n .getNext (  )   == Token.EMPTY || ( n^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.removeChild (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n .replaceChild ( n , parent )   )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.EMPTY ) {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P15_Unwrap_Block]^return ;^121^122^^124^125^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P16_Remove_Block]^^121^122^^124^125^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  { return; }^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  ||  (  ( n.getType (  )  )  ==  ( SCRIPT )  )  )  {     return ; }^121^^^^^120^143^[Delete]^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^( parent.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^122^^^^^120^143^( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^( n.removeChild (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^122^^^^^120^143^( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P14_Delete_Statement]^^122^123^124^^^120^143^( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {  return;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^( n.getType (  )  == Token.BLOCK && !n.removeChild (  )  )  )  {^122^^^^^120^143^( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^( n.getType (  )  == Token.BLOCK && !n .replaceChild ( n , parent )   )  )  {^122^^^^^120^143^( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^129^^^^^120^143^switch  ( n.getType (  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^129^^^^^120^143^switch  ( n.getType (  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^switch  ( n .getNext (  )   )  {^129^^^^^120^143^switch  ( n.getType (  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P8_Replace_Mix]^switch  ( parent.removeChild (  )  )  {^129^^^^^120^143^switch  ( n.getType (  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.redeclareVarsInsideBranch ( parent ) ;^137^^^^^120^143^NodeUtil.redeclareVarsInsideBranch ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^NodeUtil.mayHaveSideEffects ( n ) ;^137^^^^^120^143^NodeUtil.redeclareVarsInsideBranch ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^NodeUtil .mayHaveSideEffects ( parent )  ;^137^^^^^120^143^NodeUtil.redeclareVarsInsideBranch ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P14_Delete_Statement]^^137^^^^^120^143^NodeUtil.redeclareVarsInsideBranch ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P14_Delete_Statement]^^138^^^^^120^143^compiler.reportCodeChange (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P15_Unwrap_Block]^com.google.javascript.jscomp.UnreachableCodeElimination.logger.fine(("Removing " + (n.toString())));^139^140^141^^^120^143^if  ( logger.isLoggable ( Level.FINE )  )  { logger.fine ( "Removing " + n.toString (  )  ) ; }^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P16_Remove_Block]^^139^140^141^^^120^143^if  ( logger.isLoggable ( Level.FINE )  )  { logger.fine ( "Removing " + n.toString (  )  ) ; }^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P2_Replace_Operator]^logger.fine ( "Removing "  &&  n.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P3_Replace_Literal]^logger.fine ( "R" + n.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^logger.fine ( "Removing " + parent.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^logger.fine ( "Removing " + n.removeChild (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P14_Delete_Statement]^^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P8_Replace_Mix]^logger.fine ( "Removing " + parent.removeChild (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P2_Replace_Operator]^logger.fine ( "Removing "  ||  n.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P3_Replace_Literal]^logger.fine ( "Removing Remov" + n.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P7_Replace_Invocation]^logger.fine ( "Removing " + n .getFirstChild (  )   ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild (  n ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild ( n, parent ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P14_Delete_Statement]^^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[P11_Insert_Donor_Statement]^n.removeChild ( body ) ;NodeUtil.removeChild ( parent, n ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
