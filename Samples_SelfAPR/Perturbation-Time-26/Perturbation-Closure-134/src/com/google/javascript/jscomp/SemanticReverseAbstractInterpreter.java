[P8_Replace_Mix]^private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> EQ ;^47^48^^^^47^55^private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> EQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [VARIABLES] 
[P8_Replace_Mix]^private static  Function<Pair<JSType, JSType>, Pair<JSType, JSType>> NE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^60^61^^^^60^68^private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> NE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [VARIABLES] 
[P8_Replace_Mix]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHEQ  = null ;^74^75^^^^74^82^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHEQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [VARIABLES] 
[P8_Replace_Mix]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHNE  = null ;^88^89^^^^88^96^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHNE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [VARIABLES] 
[P8_Replace_Mix]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> INEQ  = null ;^102^103^^^^102^109^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> INEQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [VARIABLES] 
[P8_Replace_Mix]^private  ObjectType target;^451^^^^^446^456^private final ObjectType target;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [VARIABLES] 
[P5_Replace_Variable]^super (  typeRegistry ) ;^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[P5_Replace_Variable]^super ( convention ) ;^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[P5_Replace_Variable]^super ( typeRegistry, convention ) ;^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[P14_Delete_Statement]^^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[P8_Replace_Mix]^this.target =  null;^454^^^^^453^455^this.target = target;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] ObjectType)   ObjectType target [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  
[P8_Replace_Mix]^this.target =  null;^510^^^^^509^511^this.target = target;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] ObjectType)   ObjectType target [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^if  (  p.second == true )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P15_Unwrap_Block]^return null;^50^51^52^^^49^54^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P16_Remove_Block]^^50^51^52^^^49^54^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return true;^51^^^^^49^54^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return p.first .getTypesUnderInequality (  )  ;^53^^^^^49^54^return p.first.getTypesUnderEquality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P14_Delete_Statement]^^53^^^^^49^54^return p.first.getTypesUnderEquality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^if  (  p.second == true )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P15_Unwrap_Block]^return null;^63^64^65^^^62^67^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P16_Remove_Block]^^63^64^65^^^62^67^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return true;^64^^^^^62^67^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return false;^64^^^^^62^67^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P7_Replace_Invocation]^return p.first .getTypesUnderEquality (  )  ;^66^^^^^62^67^return p.first.getTypesUnderInequality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P14_Delete_Statement]^^66^^^^^62^67^return p.first.getTypesUnderInequality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^if  ( p.first == this ) {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P15_Unwrap_Block]^return null;^77^78^79^^^76^81^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P16_Remove_Block]^^77^78^79^^^76^81^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return false;^78^^^^^76^81^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return true;^78^^^^^76^81^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return p.first .getTypesUnderShallowInequality (  )  ;^80^^^^^76^81^return p.first.getTypesUnderShallowEquality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P14_Delete_Statement]^^80^^^^^76^81^return p.first.getTypesUnderShallowEquality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^if  ( p.first == false ) {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P15_Unwrap_Block]^return null;^91^92^93^^^90^95^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P16_Remove_Block]^^91^92^93^^^90^95^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return false;^92^^^^^90^95^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P8_Replace_Mix]^return true;^92^^^^^90^95^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P7_Replace_Invocation]^return p.first .getTypesUnderShallowEquality (  )  ;^94^^^^^90^95^return p.first.getTypesUnderShallowInequality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P14_Delete_Statement]^^94^^^^^90^95^return p.first.getTypesUnderShallowInequality ( p.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P7_Replace_Invocation]^return new Pair<JSType, JSType> ( getNativeType ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^105^106^107^^^104^108^return new Pair<JSType, JSType> ( getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P7_Replace_Invocation]^getNativeType ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^106^107^^^^104^108^getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P14_Delete_Statement]^^106^107^^^^104^108^getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P11_Insert_Donor_Statement]^getRestrictedWithoutUndefined ( p.second )  ) ;getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^106^107^^^^104^108^getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P7_Replace_Invocation]^getNativeType ( p.second )  ) ;^107^^^^^104^108^getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P14_Delete_Statement]^^107^^^^^104^108^getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P11_Insert_Donor_Statement]^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;getRestrictedWithoutUndefined ( p.second )  ) ;^107^^^^^104^108^getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P11_Insert_Donor_Statement]^getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;getRestrictedWithoutUndefined ( p.second )  ) ;^107^^^^^104^108^getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[P2_Replace_Operator]^if  ( left.getType (  )  == Token.TYPEOF || right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  <= Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  > Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  >= Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( typeOfNode.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( left.getType (  )  == Token.TYPEOF && typeOfNode.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( left.getType (  )  == Token.TYPEOF ) {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  (  right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( left.getType (  )  == TYPEOF )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( right.getType (  )  == STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( right.getType() == TYPEOF && left.getType() == STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( right.getType (  )  == TYPEOF )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( left.getType (  )  == STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  (  typeOfNode.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^} else if  ( right.getType (  )  == Token.TYPEOF || left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^} else if  ( right.getType (  )  >= Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^} else if  ( right.getType (  )  != Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^} else if  ( typeOfNode.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^} else if  ( right.getType (  )  == Token.TYPEOF && typeOfNode.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^} else if  ( right.getType (  )  == Token.3 && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.this )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^} else if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^} else if  ( right.getType (  )  == Token.TYPEOF ) {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^} else if  (  left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^} else if  ( right.getType (  )  == TYPEOF )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^} else if  ( left.getType (  )  == STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^} else {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^} else if  ( right .getJSType (  )   == Token.TYPEOF && left^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^typeOfNode = right; stringNode = left;^134^135^136^137^138^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  { typeOfNode = right; stringNode = left; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^134^135^136^137^138^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  { typeOfNode = right; stringNode = left; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^typeOfNode = stringNode;^136^^^^^134^138^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^typeOfNode = left;typeOfNode = right;^136^^^^^134^138^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^stringNode = right;typeOfNode = right;^136^^^^^134^138^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P12_Insert_Condition]^if  ( typeOfNode != null && stringNode != null )  { typeOfNode = right; stringNode = left; }^136^137^^^^134^138^typeOfNode = right; stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^stringNode = typeOfNode;^137^^^^^134^138^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^typeOfNode = left;stringNode = left;^137^^^^^134^138^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^stringNode = right;stringNode = left;^137^^^^^134^138^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^typeOfNode = typeOfNode;^136^^^^^121^151^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^typeOfNode =  stringNode;^136^^^^^121^151^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^typeOfNode = left;typeOfNode = right;^136^^^^^121^151^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^stringNode = right;typeOfNode = right;^136^^^^^121^151^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P12_Insert_Condition]^if  ( typeOfNode != null && stringNode != null )  { typeOfNode = right; stringNode = left; }^136^137^^^^121^151^typeOfNode = right; stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^stringNode = stringNode;^137^^^^^122^152^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^stringNode =  typeOfNode;^137^^^^^122^152^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^typeOfNode = left;stringNode = left;^137^^^^^122^152^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^stringNode = right;stringNode = left;^137^^^^^122^152^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^} else if  ( stringNode.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^left .getJSType (  )   == Token.STRING )  {^135^^^^^120^150^left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^135^136^^^^120^150^left.getType (  )  == Token.STRING )  { typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^typeOfNode = typeOfNode;^132^^^^^117^147^typeOfNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^typeOfNode =  stringNode;^132^^^^^117^147^typeOfNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^stringNode = left;typeOfNode = left;^132^^^^^117^147^typeOfNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^typeOfNode = right;typeOfNode = left;^132^^^^^117^147^typeOfNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P12_Insert_Condition]^if  ( typeOfNode != null && stringNode != null )  { typeOfNode = left; stringNode = right; }^132^133^^^^117^147^typeOfNode = left; stringNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^stringNode = typeOfNode;^133^^^^^118^148^stringNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^stringNode = left;stringNode = right;^133^^^^^118^148^stringNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^typeOfNode = right;stringNode = right;^133^^^^^118^148^stringNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^typeOfNode = typeOfNode;^136^^^^^134^138^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( typeOfNode != null || stringNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( typeOfNode == null && stringNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( typeOfNode != null && stringNode == null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( stringNode != null && stringNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( typeOfNode != null && typeOfNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( stringNode != null && typeOfNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( typeOfNode != null ) {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  (  stringNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( operandType != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getType() == EQ || condition.getType() == SHEQ )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getType (  )  == EQ )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getType (  )  == SHEQ )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( stringNode != this && stringNode != this )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( operandType == null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getType() == EQ || condition.getType() == SHEQ )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getType (  )  == EQ )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getType (  )  == SHEQ )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( operandType != false )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( objectType != null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( rightType != null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( leftType != null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( leftType == null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( type != null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( leftVar == null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^boolean resultEqualsValue = ((condition.getType()) == (com.google.javascript.rhino.Token.EQ)) || ((condition.getType()) == (com.google.javascript.rhino.Token.SHEQ)); if (!outcome) {    resultEqualsValue = !resultEqualsValue;}; return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);^142^143^144^145^146^127^157^if  ( operandType != null )  { boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ; if  ( !outcome )  { resultEqualsValue = !resultEqualsValue; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^142^143^144^145^146^127^157^if  ( operandType != null )  { boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ; if  ( !outcome )  { resultEqualsValue = !resultEqualsValue; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( outcome )  {^145^^^^^130^160^if  ( !outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^resultEqualsValue = !resultEqualsValue;^145^146^147^^^130^160^if  ( !outcome )  { resultEqualsValue = !resultEqualsValue; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^145^146^147^^^130^160^if  ( !outcome )  { resultEqualsValue = !resultEqualsValue; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^outcome = !resultEqualsValue;^146^^^^^131^161^resultEqualsValue = !resultEqualsValue;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^resultEqualsValue =  !outcome;^146^^^^^131^161^resultEqualsValue = !resultEqualsValue;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( !outcome )  {     resultEqualsValue = !resultEqualsValue; }^146^^^^^131^161^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( typeOfNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType, typeOfNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , outcome, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf (  operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode,  stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) ,  blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( resultEqualsValue, operandType, stringNode.getString (  ) , operandNode, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, stringNode, operandType.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( stringNode, operandType, operandNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType, blindScope.getString (  ) , resultEqualsValue, stringNode ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseTypeOf ( operandNode, operandType, stringNode .getLastChild (  )  , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^boolean resultEqualsValue = condition.getType (  )  == Token.EQ && condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^boolean resultEqualsValue = condition.getType (  )  > Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^boolean resultEqualsValue = condition.getType (  )  != Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^boolean resultEqualsValue = typeOfNode.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^boolean resultEqualsValue = condition .getJSType (  )   == Token.EQ || condition^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^boolean resultEqualsValue = stringNode.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^condition .getJSType (  )   == Token.SHEQ;^144^^^^^129^159^condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^144^^^^^129^159^condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , blindScope, resultEqualsValue ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( blindScope, operandType, stringNode.getString (  ) , resultEqualsValue, operandNode ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, blindScope, stringNode.getString (  ) , resultEqualsValue, operandType ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseTypeOf ( operandNode, operandType, stringNode .getLastChild (  )  , outcome, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^Node operandNode = stringNode.getFirstChild (  ) ;^140^^^^^125^155^Node operandNode = typeOfNode.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node right = condition.getLastChild (  ) ;Node operandNode = typeOfNode.getFirstChild (  ) ;^140^^^^^125^155^Node operandNode = typeOfNode.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node left = condition.getFirstChild (  ) ;Node operandNode = typeOfNode.getFirstChild (  ) ;^140^^^^^125^155^Node operandNode = typeOfNode.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^JSType operandType = getTypeIfRefinable ( typeOfNode, blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^JSType operandType = getTypeIfRefinable (  blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^JSType operandType = getTypeIfRefinable ( operandNode ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^JSType operandType = getTypeIfRefinable ( blindScope, operandNode ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^JSType type = getTypeIfRefinable ( name, blindScope ) ;JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^boolean resultEqualsValue = condition.getType (  )  < Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^140^141^^^^125^155^Node operandNode = typeOfNode.getFirstChild (  ) ; JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( operandType != true )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^boolean resultEqualsValue = condition.getType (  )  <= Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^boolean resultEqualsValue = condition.getType (  )  >= Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, operandType, right.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandNode, resultEqualsValue, stringNode.getString (  ) , operandType, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^typeOfNode =  null;^132^^^^^117^147^typeOfNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^stringNode = stringNode;^133^^^^^118^148^stringNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^stringNode =  null;^133^^^^^118^148^stringNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^Node left = typeOfNode.getFirstChild (  ) ;^127^^^^^112^142^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^Node left = condition .getLastChild (  )  ;^127^^^^^112^142^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node right = condition.getLastChild (  ) ;Node left = condition.getFirstChild (  ) ;^127^^^^^112^142^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node operandNode = typeOfNode.getFirstChild (  ) ;Node left = condition.getFirstChild (  ) ;^127^^^^^112^142^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^Node right = typeOfNode.getLastChild (  ) ;^128^^^^^113^143^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^Node right = condition .getFirstChild (  )  ;^128^^^^^113^143^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node operandNode = typeOfNode.getFirstChild (  ) ;Node right = condition.getLastChild (  ) ;^128^^^^^113^143^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node left = condition.getFirstChild (  ) ;Node right = condition.getLastChild (  ) ;^128^^^^^113^143^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node stringNode = null;Node typeOfNode = null;^129^^^^^114^144^Node typeOfNode = null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node typeOfNode = null;Node stringNode = null;^130^^^^^115^145^Node stringNode = null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^switch  ( stringNode.getType (  )  )  {^122^^^^^107^137^switch  ( condition.getType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^127^128^^^^112^142^Node left = condition.getFirstChild (  ) ; Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^Node right = stringNode .getFirstChild (  )  ;^128^^^^^113^143^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^128^^^^^113^143^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( stringNode.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( typeOfNode .getJSType (  )   == Token.TYPEOF && right^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( left.getType (  )  == Token.TYPEOF && stringNode.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^Node operandNode = stringNode .getLastChild (  )  ;^140^^^^^125^155^Node operandNode = typeOfNode.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^JSType operandType = getTypeIfRefinable ( stringNode, blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseTypeOf ( operandType, operandNode, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( resultEqualsValue )  {^155^^^^^140^170^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( !outcome )  {^155^^^^^140^170^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P3_Replace_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrMaybeShortCircuiting ( condition .getLastChild (  )  , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrMaybeShortCircuiting ( condition .getLastChild (  )  , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition .getFirstChild (  )  , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^condition .getFirstChild (  )  , blindScope, true ) ;^160^^^^^155^161^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^160^^^^^155^161^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^155^161^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , blindScope, !outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^155^161^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^155^161^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^155^161^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getLastChild (  ) , blindScope, false ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^155^161^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P3_Replace_Literal]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition .getLastChild (  )  , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition .getFirstChild (  )  , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition .getFirstChild (  )  , blindScope, true ) ;^157^^^^^142^172^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^157^^^^^142^172^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;condition.getLastChild (  ) , blindScope, true ) ;^157^^^^^142^172^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , blindScope, !outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^157^^^^^142^172^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^157^^^^^142^172^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^157^^^^^142^172^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getLastChild (  ) , blindScope, false ) ;condition.getLastChild (  ) , blindScope, true ) ;^157^^^^^142^172^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( !resultEqualsValue )  {^164^^^^^149^179^if  ( !outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( outcome )  {^164^^^^^149^179^if  ( !outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P3_Replace_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrMaybeShortCircuiting ( condition .getLastChild (  )  , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition .getFirstChild (  )  , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^169^^^^^164^170^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^164^170^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , blindScope, !outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^164^170^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^164^170^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^164^170^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getLastChild (  ) , blindScope, true ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^164^170^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P3_Replace_Literal]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrNotShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition .getLastChild (  )  , condition.getLastChild (  ) , blindScope, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^166^^^^^151^181^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;condition.getLastChild (  ) , blindScope, false ) ;^166^^^^^151^181^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , blindScope, !outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^166^^^^^151^181^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^166^^^^^151^181^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^166^^^^^151^181^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getLastChild (  ) , blindScope, true ) ;condition.getLastChild (  ) , blindScope, false ) ;^166^^^^^151^181^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( resultEqualsValue )  {^173^^^^^158^188^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( !outcome )  {^173^^^^^158^188^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^return caseEquality(condition, blindScope, com.google.javascript.jscomp.SemanticReverseAbstractInterpreter.EQ);^173^174^175^176^177^158^188^if  ( outcome )  { return caseEquality ( condition, blindScope, EQ ) ; } else { return caseEquality ( condition, blindScope, NE ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^173^174^175^176^177^158^188^if  ( outcome )  { return caseEquality ( condition, blindScope, EQ ) ; } else { return caseEquality ( condition, blindScope, NE ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, SHNE ) ; }else {     return caseEquality ( condition, blindScope, SHEQ ) ; }^173^^^^^158^188^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, SHEQ ) ; }else {     return caseEquality ( condition, blindScope, SHNE ) ; }^173^^^^^158^188^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, NE ) ; }else {     return caseEquality ( condition, blindScope, EQ ) ; }^173^^^^^158^188^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, NE, blindScope ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( NE, blindScope, condition ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope, 3 ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( EQ, blindScope, condition ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( resultEqualsValue )  {^180^^^^^165^195^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( !outcome )  {^180^^^^^165^195^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^return caseEquality(condition, blindScope, com.google.javascript.jscomp.SemanticReverseAbstractInterpreter.NE);^180^181^182^183^184^165^195^if  ( outcome )  { return caseEquality ( condition, blindScope, NE ) ; } else { return caseEquality ( condition, blindScope, EQ ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^180^181^182^183^184^165^195^if  ( outcome )  { return caseEquality ( condition, blindScope, NE ) ; } else { return caseEquality ( condition, blindScope, EQ ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, SHNE ) ; }else {     return caseEquality ( condition, blindScope, SHEQ ) ; }^180^^^^^165^195^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, SHEQ ) ; }else {     return caseEquality ( condition, blindScope, SHNE ) ; }^180^^^^^165^195^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, EQ ) ; }else {     return caseEquality ( condition, blindScope, NE ) ; }^180^^^^^165^195^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope, null ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( EQ, blindScope, condition ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, EQ, blindScope ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, NE, blindScope ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( resultEqualsValue )  {^187^^^^^172^202^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( !outcome )  {^187^^^^^172^202^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^return caseEquality(condition, blindScope, com.google.javascript.jscomp.SemanticReverseAbstractInterpreter.SHEQ);^187^188^189^190^191^172^202^if  ( outcome )  { return caseEquality ( condition, blindScope, SHEQ ) ; } else { return caseEquality ( condition, blindScope, SHNE ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^187^188^189^190^191^172^202^if  ( outcome )  { return caseEquality ( condition, blindScope, SHEQ ) ; } else { return caseEquality ( condition, blindScope, SHNE ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, SHNE, blindScope ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( SHNE, blindScope, condition ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseEquality ( condition, blindScope, null ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, SHEQ, blindScope ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( stringNode, blindScope, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( typeOfNode, blindScope, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( resultEqualsValue )  {^194^^^^^179^209^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( !outcome )  {^194^^^^^179^209^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^return caseEquality(condition, blindScope, com.google.javascript.jscomp.SemanticReverseAbstractInterpreter.SHNE);^194^195^196^197^198^179^209^if  ( outcome )  { return caseEquality ( condition, blindScope, SHNE ) ; } else { return caseEquality ( condition, blindScope, SHEQ ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^194^195^196^197^198^179^209^if  ( outcome )  { return caseEquality ( condition, blindScope, SHNE ) ; } else { return caseEquality ( condition, blindScope, SHEQ ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, SHEQ ) ; }else {     return caseEquality ( condition, blindScope, SHNE ) ; }^194^^^^^179^209^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, EQ ) ; }else {     return caseEquality ( condition, blindScope, NE ) ; }^194^^^^^179^209^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, NE ) ; }else {     return caseEquality ( condition, blindScope, EQ ) ; }^194^^^^^179^209^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( SHEQ, blindScope, condition ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, SHEQ, blindScope ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope, null ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( SHNE, blindScope, condition ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, SHNE, blindScope ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( typeOfNode, blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( resultEqualsValue )  {^219^^^^^204^234^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( !outcome )  {^219^^^^^204^234^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^return caseEquality(condition, blindScope, INEQ);^219^220^221^^^204^234^if  ( outcome )  { return caseEquality ( condition, blindScope, INEQ ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^219^220^221^^^204^234^if  ( outcome )  { return caseEquality ( condition, blindScope, INEQ ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( INEQ, blindScope, condition ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( typeOfNode, blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, INEQ ) ; }^220^^^^^205^235^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( outcome || condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( outcome && condition.getFirstChild (  ) .getType (  )  <= Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( resultEqualsValue && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( outcome && typeOfNode.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( condition && outcome.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( outcome ) {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  (  condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getFirstChild (  ) .getType (  )  == STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^if  ( outcome && condition.getFirstChild (  ) .getNativeType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  (  condition.getFirstChild (  )  .getJSType (  )   == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P15_Unwrap_Block]^return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);^230^231^232^233^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  { return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P16_Remove_Block]^^230^231^232^233^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  { return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseIn ( typeOfNode.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseIn ( condition.getLastChild (  ) .getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  )  ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseIn ( blindScope.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , condition ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseNameOrGetProp ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getNativeType (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseIn ( stringNode.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseIn ( condition .getFirstChild (  )  , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition.getFirstChild (  ) .getNativeType (  ) , blindScope ) ;^232^^^^^217^247^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition.getFirstChild (  )  .getLastChild (  )  , blindScope ) ;^232^^^^^217^247^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^232^^^^^217^247^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P12_Insert_Condition]^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  { condition.getFirstChild (  ) .getString (  ) , blindScope ) ; }^232^^^^^217^247^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition .getLastChild (  )  .getString (  ) , blindScope ) ;^232^^^^^217^247^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P3_Replace_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition .getFirstChild (  )  , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P3_Replace_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrMaybeShortCircuiting ( condition .getLastChild (  )  , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( stringNode, blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( NE, blindScope, condition ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, NE, blindScope ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( NE, blindScope, condition ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( typeOfNode, blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( EQ, blindScope, condition ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( SHNE, blindScope, condition ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, SHNE, blindScope ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality (  blindScope, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition,  SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( SHEQ, blindScope, condition ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, SHEQ, blindScope ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return SemanticReverseAbstractInterpreter ( condition, blindScope, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( typeOfNode, blindScope, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( condition, blindScope, resultEqualsValue ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp (  blindScope, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( condition,  outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( condition, blindScope ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( blindScope, condition, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( condition, outcome, blindScope ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, resultEqualsValue ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) ,  outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( outcome.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, condition ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( blindScope.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , condition, outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return nextPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNativeType (  ) , blindScope, outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  )  .getType (  )  , blindScope, outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return firstPreciserScopeKnowingConditionOutcome ( condition .getLastChild (  )  , firstPreciserScopeKnowingConditionOutcome ( condition^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) , blindScope, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !resultEqualsValue ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) ,  !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( blindScope.getFirstChild (  ) , condition, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return nextPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return nextPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !resultEqualsValue ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, blindScope, 2 ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, INEQ, blindScope ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, resultEqualsValue ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , outcome, blindScope ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  )  .getLastChild (  )  , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseIn ( condition.getLastChild (  ) , condition .getLastChild (  )  .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^switch  ( typeOfNode.getType (  )  )  {^153^^^^^138^168^switch  ( condition.getType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^condition .getFirstChild (  )  , blindScope, true ) ;^160^^^^^145^175^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^160^^^^^145^175^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^145^175^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , blindScope, !outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^145^175^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^145^175^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^145^175^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getLastChild (  ) , blindScope, false ) ;condition.getLastChild (  ) , blindScope, true ) ;^160^^^^^145^175^condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^condition .getFirstChild (  )  , blindScope, false ) ;^166^^^^^151^181^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition .getFirstChild (  )  , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition .getFirstChild (  )  , blindScope, false ) ;^169^^^^^154^184^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^169^^^^^154^184^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getString (  ) , blindScope ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^154^184^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , blindScope, !outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^154^184^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^154^184^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^154^184^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^condition.getLastChild (  ) , blindScope, true ) ;condition.getLastChild (  ) , blindScope, false ) ;^169^^^^^154^184^condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, EQ, blindScope ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( stringNode, blindScope, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( condition, EQ, blindScope ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( SHEQ, blindScope, condition ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( condition, blindScope, this ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseEquality ( blindScope, condition, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return SemanticReverseAbstractInterpreter ( typeOfNode, blindScope, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( stringNode, blindScope, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseNameOrGetProp ( outcome, blindScope, condition ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , outcome, blindScope ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^206^207^208^209^^191^221^condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition .getLastChild (  )  , firstPreciserScopeKnowingConditionOutcome ( condition^206^207^208^209^^191^221^condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^condition .getLastChild (  )  , firstPreciserScopeKnowingConditionOutcome ( stringNode^206^207^208^209^^191^221^condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, resultEqualsValue ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) ,  outcome ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^firstPreciserScopeKnowingConditionOutcome ( blindScope.getFirstChild (  ) .getNext (  ) , condition, outcome ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , outcome, blindScope ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^firstPreciserScopeKnowingConditionOutcome ( outcome.getFirstChild (  ) .getNext (  ) , blindScope, condition ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNativeType (  ) , blindScope, outcome ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition.getFirstChild (  ) .getNativeType (  ) , blindScope, outcome ) , outcome ) ;^208^209^^^^193^223^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition.getFirstChild (  )  .getType (  )  , blindScope, outcome ) , outcome ) ;^208^209^^^^193^223^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^208^209^^^^193^223^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^condition .getLastChild (  )  .getNext (  ) , blindScope, outcome ) , outcome ) ;^208^209^^^^193^223^condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return firstPreciserScopeKnowingConditionOutcome ( condition .getLastChild (  )  , blindScope, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return nextPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) , blindScope, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^213^^^^^198^228^condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return caseInstanceOf ( outcome.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, condition ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseInstanceOf ( condition .getLastChild (  )  , condition.getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return caseInstanceOf ( condition.getFirstChild (  ) , condition .getFirstChild (  )  , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^condition.getFirstChild (  ) , stringNode.getLastChild (  ) , blindScope, outcome ) ;^226^227^^^^211^241^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^condition.getFirstChild (  ) , typeOfNode.getLastChild (  ) , blindScope, outcome ) ;^226^227^^^^211^241^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^226^227^^^^211^241^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^if  ( outcome && condition .getLastChild (  )  .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( outcome && stringNode.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return caseIn ( typeOfNode.getLastChild (  ) , condition.getFirstChild (  ) .getNativeType (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( stringNode, blindScope, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, resultEqualsValue ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome (  blindScope, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( condition,  outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( condition, outcome, blindScope ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P7_Replace_Invocation]^return firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P8_Replace_Mix]^return firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, resultEqualsValue ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( typeOfNode, blindScope, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P14_Delete_Statement]^^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[P5_Replace_Variable]^Node left = right.getFirstChild (  ) ;^242^^^^^227^257^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^Node left = right .getLastChild (  )  ;^242^^^^^227^257^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^Node right = condition.getLastChild (  ) ;Node left = condition.getFirstChild (  ) ;^242^^^^^227^257^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^Node operandNode = typeOfNode.getFirstChild (  ) ;Node left = condition.getFirstChild (  ) ;^242^^^^^227^257^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^Node left = condition .getLastChild (  )  ;^242^^^^^227^257^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^242^^^^^227^257^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Node right = left.getLastChild (  ) ;^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^Node right = condition .getFirstChild (  )  ;^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^Node operandNode = typeOfNode.getFirstChild (  ) ;Node right = condition.getLastChild (  ) ;^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^Node left = condition.getFirstChild (  ) ;Node right = condition.getLastChild (  ) ;^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Node right = right.getLastChild (  ) ;^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable (  blindScope ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( left ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType type = getTypeIfRefinable ( name, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^246^247^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ; boolean leftIsRefineable;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^boolean rightIsRefineable;boolean leftIsRefineable;^247^^^^^232^262^boolean leftIsRefineable;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( leftType == null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^if  ( rightType != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^if  ( left != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^if  ( leftTypeType != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^if  ( leftType != this )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( objectType != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( operandType != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( type != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftVar == null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P15_Unwrap_Block]^leftIsRefineable = true;^248^249^250^251^252^233^263^if  ( leftType != null )  { leftIsRefineable = true; } else { leftIsRefineable = false; leftType = left.getJSType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P16_Remove_Block]^^248^249^250^251^252^233^263^if  ( leftType != null )  { leftIsRefineable = true; } else { leftIsRefineable = false; leftType = left.getJSType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightType != null )  {     rightIsRefineable = true; }else {     rightIsRefineable = false;     rightType = right.getJSType (  ) ; }^248^^^^^233^263^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftType != null )  {     leftIsRefineable = true; }else {     leftIsRefineable = false;     leftType = left.getJSType (  ) ;     blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ; }^248^^^^^233^263^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P3_Replace_Literal]^leftIsRefineable = true;^251^^^^^248^253^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;leftIsRefineable = false;^251^^^^^248^253^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;leftIsRefineable = false;^251^^^^^248^253^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;leftIsRefineable = false;^251^^^^^248^253^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^leftType = right.getJSType (  ) ;^252^^^^^248^253^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^leftType =  null.getJSType (  ) ;^252^^^^^248^253^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^252^^^^^248^253^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^252^^^^^248^253^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^252^^^^^248^253^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;leftType = left.getJSType (  ) ;^252^^^^^248^253^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P3_Replace_Literal]^leftIsRefineable = false;^249^^^^^234^264^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;leftIsRefineable = true;^249^^^^^234^264^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;leftIsRefineable = true;^249^^^^^234^264^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;leftIsRefineable = true;^249^^^^^234^264^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P3_Replace_Literal]^leftIsRefineable = true;^251^^^^^236^266^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;leftIsRefineable = false;^251^^^^^236^266^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;leftIsRefineable = false;^251^^^^^236^266^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;leftIsRefineable = false;^251^^^^^236^266^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^leftType = right.getJSType (  ) ;^252^^^^^237^267^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^252^^^^^237^267^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^252^^^^^237^267^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^252^^^^^237^267^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;leftType = left.getJSType (  ) ;^252^^^^^237^267^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( right, blindScope ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable ( right, informed ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable (  blindScope ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable ( right ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType blindScopeType = getTypeIfRefinable ( right, right ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType type = getTypeIfRefinable ( name, blindScope ) ;JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^boolean leftIsRefineable;boolean rightIsRefineable;^257^^^^^242^272^boolean rightIsRefineable;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( rightType == null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^if  ( leftType != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^if  ( right != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^if  ( rightTypeType != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^if  ( rightType != false )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( objectType != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( operandType != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftType == null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( type != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftVar == null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P15_Unwrap_Block]^rightIsRefineable = true;^258^259^260^261^262^243^273^if  ( rightType != null )  { rightIsRefineable = true; } else { rightIsRefineable = false; rightType = right.getJSType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P16_Remove_Block]^^258^259^260^261^262^243^273^if  ( rightType != null )  { rightIsRefineable = true; } else { rightIsRefineable = false; rightType = right.getJSType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftType != null )  {     leftIsRefineable = true; }else {     leftIsRefineable = false;     leftType = left.getJSType (  ) ; }^258^^^^^243^273^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightType != null )  {     rightIsRefineable = true; }else {     rightIsRefineable = false;     rightType = right.getJSType (  ) ;     blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ; }^258^^^^^243^273^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P3_Replace_Literal]^rightIsRefineable = true;^261^^^^^258^263^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;rightIsRefineable = false;^261^^^^^258^263^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;rightIsRefineable = false;^261^^^^^258^263^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;rightIsRefineable = false;^261^^^^^258^263^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^rightType = left.getJSType (  ) ;^262^^^^^258^263^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^rightType = right .getType (  )  ;^262^^^^^258^263^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftType = left.getJSType (  ) ;rightType = right.getJSType (  ) ;^262^^^^^258^263^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^262^^^^^258^263^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;rightType = right.getJSType (  ) ;^262^^^^^258^263^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;rightType = right.getJSType (  ) ;^262^^^^^258^263^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P3_Replace_Literal]^rightIsRefineable = false;^259^^^^^244^274^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;rightIsRefineable = true;^259^^^^^244^274^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;rightIsRefineable = true;^259^^^^^244^274^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;rightIsRefineable = true;^259^^^^^244^274^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P3_Replace_Literal]^rightIsRefineable = true;^261^^^^^246^276^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;rightIsRefineable = false;^261^^^^^246^276^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;rightIsRefineable = false;^261^^^^^246^276^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;rightIsRefineable = false;^261^^^^^246^276^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^rightType = left.getJSType (  ) ;^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^rightType = right .getType (  )  ;^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^leftType = left.getJSType (  ) ;rightType = right.getJSType (  ) ;^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^rightType = left .getType (  )  ;^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;rightType = right.getJSType (  ) ;^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;rightType = right.getJSType (  ) ;^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( rightType, rightType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, leftType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Pair<JSType, JSType> merged = merging.apply ( Pair.of (  rightType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Pair<JSType, JSType> merged = leftType.apply ( Pair.of ( merging, rightType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( rightType, leftType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^Pair<JSType, JSType> merged = rightType.apply ( Pair.of ( leftType, merging )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( merged != null || (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( merged == null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  && ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first == null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second == null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( merged != null && (  ( leftIsRefineable || merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable || merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  ) {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  (  ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( merged != null )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( (leftIsRefineable && (merged.first != null) || rightIsRefineable && (merged.second != null)) )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( (leftIsRefineable && merged.first != null) )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( merged.first != null )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( (rightIsRefineable && merged.second != null) )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( merged.second != null )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( leftIsRefineable && merged.first != null )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( rightIsRefineable && merged.second != null )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^if  (  ( rightIsRefineable && merged.second != false )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( leftIsRefineable || merged.first != null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( leftIsRefineable && merged.first == null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( leftIsRefineable ) {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  (  merged.first != null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^if  (  merged.first != false )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftIsRefineable && leftType != null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( rightIsRefineable && merged.second != null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( rightIsRefineable && rightType != null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P15_Unwrap_Block]^declareNameInScope(informed, left, merged.first);^273^274^275^^^269^280^if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P16_Remove_Block]^^273^274^275^^^269^280^if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftIsRefineable &&  ( leftType != null )  )  {     declareNameInScope ( informed, left, leftType ) ; }^273^^^^^269^280^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightIsRefineable &&  ( rightType != null )  )  {     declareNameInScope ( informed, right, rightType ) ; }^273^^^^^269^280^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightIsRefineable &&  (  ( merged.second )  != null )  )  {     declareNameInScope ( informed, right, merged.second ) ; }^273^^^^^269^280^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope (  left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed,  merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, left.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, left ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^274^275^^^^269^280^declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^269^280^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( rightIsRefineable || merged.second != null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( rightIsRefineable && merged.second == null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( rightIsRefineable ) {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  (  merged.second != null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftIsRefineable && leftType != null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( rightIsRefineable && rightType != null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftIsRefineable && merged.first != null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P15_Unwrap_Block]^declareNameInScope(informed, right, merged.second);^276^277^278^^^269^280^if  ( rightIsRefineable && merged.second != null )  { declareNameInScope ( informed, right, merged.second ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P16_Remove_Block]^^276^277^278^^^269^280^if  ( rightIsRefineable && merged.second != null )  { declareNameInScope ( informed, right, merged.second ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftIsRefineable &&  ( leftType != null )  )  {     declareNameInScope ( informed, left, leftType ) ; }^276^^^^^269^280^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftIsRefineable &&  (  ( merged.first )  != null )  )  {     declareNameInScope ( informed, left, merged.first ) ; }^276^^^^^269^280^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightIsRefineable &&  ( rightType != null )  )  {     declareNameInScope ( informed, right, rightType ) ; }^276^^^^^269^280^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope (  right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed,  merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, right.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, right ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^277^278^^^^269^280^declareNameInScope ( informed, right, merged.second ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^269^280^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^return blindScope;^279^^^^^269^280^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^272^^^^^269^280^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^269^280^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( leftType )  ;^272^^^^^269^280^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^272^273^274^275^^269^280^FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( leftIsRefineable || merged.first != null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( leftIsRefineable && merged.first == null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( leftIsRefineable ) {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  (  merged.first != null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^if  (  merged.first != this )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftIsRefineable && leftType != null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( rightIsRefineable && merged.second != null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( rightIsRefineable && rightType != null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P15_Unwrap_Block]^declareNameInScope(informed, left, merged.first);^273^274^275^^^258^288^if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P16_Remove_Block]^^273^274^275^^^258^288^if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftIsRefineable &&  ( leftType != null )  )  {     declareNameInScope ( informed, left, leftType ) ; }^273^^^^^258^288^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightIsRefineable &&  ( rightType != null )  )  {     declareNameInScope ( informed, right, rightType ) ; }^273^^^^^258^288^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightIsRefineable &&  (  ( merged.second )  != null )  )  {     declareNameInScope ( informed, right, merged.second ) ; }^273^^^^^258^288^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope (  left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed,  merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, left.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, left ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^274^275^^^^259^289^declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, left, merged.first ) ;^274^^^^^259^289^declareNameInScope ( informed, left, merged.first ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( rightIsRefineable || merged.second != null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P2_Replace_Operator]^if  ( rightIsRefineable && merged.second == null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  ( rightIsRefineable ) {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P6_Replace_Expression]^if  (  merged.second != null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^if  ( rightIsRefineable && merged.second != true )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftIsRefineable && leftType != null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( rightIsRefineable && rightType != null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P9_Replace_Statement]^if  ( leftIsRefineable && merged.first != null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P15_Unwrap_Block]^declareNameInScope(informed, right, merged.second);^276^277^278^^^261^291^if  ( rightIsRefineable && merged.second != null )  { declareNameInScope ( informed, right, merged.second ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P16_Remove_Block]^^276^277^278^^^261^291^if  ( rightIsRefineable && merged.second != null )  { declareNameInScope ( informed, right, merged.second ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftIsRefineable &&  ( leftType != null )  )  {     declareNameInScope ( informed, left, leftType ) ; }^276^^^^^261^291^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( leftIsRefineable &&  (  ( merged.first )  != null )  )  {     declareNameInScope ( informed, left, merged.first ) ; }^276^^^^^261^291^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P13_Insert_Block]^if  ( rightIsRefineable &&  ( rightType != null )  )  {     declareNameInScope ( informed, right, rightType ) ; }^276^^^^^261^291^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope (  right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed,  merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, right.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^declareNameInScope ( informed, right ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^277^278^^^^262^292^declareNameInScope ( informed, right, merged.second ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, right, merged.second ) ;^277^^^^^262^292^declareNameInScope ( informed, right, merged.second ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^return blindScope;^279^^^^^264^294^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^272^^^^^257^287^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( leftType )  ;^272^^^^^257^287^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^257^287^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P8_Replace_Mix]^FlowScope informed = informed.getSlot (  ) ;^272^^^^^257^287^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P14_Delete_Statement]^^272^273^274^275^^257^287^FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^return informed;^281^^^^^266^296^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable (  blindScope ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( left ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType type = getTypeIfRefinable ( name, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^287^288^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ; boolean leftIsRefineable;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^boolean rightIsRefineable;boolean leftIsRefineable;^288^^^^^273^303^boolean leftIsRefineable;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( leftType == null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( leftType != this )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( objectType != null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightType != null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( type != null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftVar == null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftType != null )  {     leftIsRefineable = true; }else {     leftIsRefineable = false;     leftType = left.getJSType (  ) ; }^289^^^^^274^304^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightType != null )  {     rightIsRefineable = true; }else {     rightIsRefineable = false;     rightType = right.getJSType (  ) ;     blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ; }^289^^^^^274^304^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P3_Replace_Literal]^leftIsRefineable = true;^292^^^^^289^296^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;leftIsRefineable = false;^292^^^^^289^296^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;leftIsRefineable = false;^292^^^^^289^296^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;leftIsRefineable = false;^292^^^^^289^296^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^leftType = right.getJSType (  ) ;^293^^^^^289^296^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^293^^^^^289^296^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, informed, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, rightIsRefineable ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left,  condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^blindScope = nextPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( null, blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^293^^^^^289^296^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^293^^^^^289^296^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;leftType = left.getJSType (  ) ;^293^^^^^289^296^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P3_Replace_Literal]^leftIsRefineable = false;^290^^^^^275^305^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;leftIsRefineable = true;^290^^^^^275^305^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;leftIsRefineable = true;^290^^^^^275^305^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;leftIsRefineable = true;^290^^^^^275^305^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P3_Replace_Literal]^leftIsRefineable = true;^292^^^^^277^307^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;leftIsRefineable = false;^292^^^^^277^307^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;leftIsRefineable = false;^292^^^^^277^307^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;leftIsRefineable = false;^292^^^^^277^307^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^leftType = right.getJSType (  ) ;^293^^^^^278^308^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^leftType = left .getType (  )  ;^293^^^^^278^308^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^293^^^^^278^308^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, informed, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, rightIsRefineable ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left,  condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^blindScope = nextPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^293^^^^^278^308^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;leftType = left.getJSType (  ) ;^293^^^^^278^308^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;leftType = left.getJSType (  ) ;^293^^^^^278^308^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^leftType =  ( leftType != null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^leftType =  ( rightType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( rightIsRefineable ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^leftType =  ( condition == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( leftType ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^leftType =  ( leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^leftType =  ( leftType == null )  ? null : leftType .getGreatestSubtype (  )  ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^leftType =  ( leftType == false )  ? false : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^leftType.getRestrictedTypeGivenToBooleanOutcome ( rightIsRefineable ) ;^300^^^^^285^315^leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^300^^^^^285^315^leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^300^^^^^285^315^leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^300^^^^^285^315^leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( leftType != null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightType == null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( leftType == false )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( objectType != null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightType != null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( type != null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftVar == null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);^301^302^303^304^^286^316^if  ( leftType == null )  { return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^301^302^303^304^^286^316^if  ( leftType == null )  { return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( right, informed, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, rightIsRefineable ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( right,  condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^return nextPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftType == null )  {     return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ; }^302^^^^^287^317^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( right, blindScope ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable (  blindScope ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable ( right ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType blindScopeType = getTypeIfRefinable ( right, right ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^JSType rightType = getTypeIfRefinable ( right, informed ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType type = getTypeIfRefinable ( name, blindScope ) ;JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^boolean leftIsRefineable;boolean rightIsRefineable;^308^^^^^293^323^boolean rightIsRefineable;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( rightType == null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftType != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( leftType != true )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( objectType != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType == null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( type != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftVar == null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightType != null )  {     rightIsRefineable = true; }else {     rightIsRefineable = false;     rightType = right.getJSType (  ) ; }^309^^^^^294^324^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftType != null )  {     leftIsRefineable = true; }else {     leftIsRefineable = false;     leftType = left.getJSType (  ) ;     blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ; }^309^^^^^294^324^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P3_Replace_Literal]^rightIsRefineable = true;^312^^^^^309^316^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;rightIsRefineable = false;^312^^^^^309^316^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;rightIsRefineable = false;^312^^^^^309^316^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;rightIsRefineable = false;^312^^^^^309^316^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^rightType =  left.getJSType (  ) ;^313^^^^^309^316^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftType = left.getJSType (  ) ;rightType = right.getJSType (  ) ;^313^^^^^309^316^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, informed, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, rightIsRefineable ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right,  condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^blindScope = nextPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( null, blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^rightType = right .getType (  )  ;^313^^^^^309^316^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^313^^^^^309^316^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;rightType = right.getJSType (  ) ;^313^^^^^309^316^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;rightType = right.getJSType (  ) ;^313^^^^^309^316^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P3_Replace_Literal]^rightIsRefineable = false;^310^^^^^295^325^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;rightIsRefineable = true;^310^^^^^295^325^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;rightIsRefineable = true;^310^^^^^295^325^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = false;rightIsRefineable = true;^310^^^^^295^325^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P3_Replace_Literal]^rightIsRefineable = true;^312^^^^^297^327^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightIsRefineable = true;rightIsRefineable = false;^312^^^^^297^327^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = false;rightIsRefineable = false;^312^^^^^297^327^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftIsRefineable = true;rightIsRefineable = false;^312^^^^^297^327^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^rightType = left.getJSType (  ) ;^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^rightType =  null.getJSType (  ) ;^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftType = left.getJSType (  ) ;rightType = right.getJSType (  ) ;^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, informed, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, rightIsRefineable ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right,  condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^blindScope = nextPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( null, blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^rightType = right .getType (  )  ;^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;rightType = right.getJSType (  ) ;^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;rightType = right.getJSType (  ) ;^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightIsRefineable )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( (leftType != null) && leftIsRefineable || (rightType != null) && rightIsRefineable )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( (leftType != null && leftIsRefineable) )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( leftType != null )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( (rightType != null && rightIsRefineable) )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( rightType != null )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( leftIsRefineable && leftType != null )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( rightIsRefineable && rightType != null )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  (  ( leftType != null && leftIsRefineable )  && ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  (  ( leftType != null || leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  (  ( leftType == null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  (  ( leftType != null && leftIsRefineable )  || ( rightType == null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( rightType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( leftType != null && rightIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( leftType != null && leftIsRefineable )  || ( leftType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( rightType != null && leftIsRefineable )  || ( leftType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( leftType != null && rightType )  || ( leftIsRefineable != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( leftType != null && rightIsRefineable )  || ( rightType != null && leftIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( leftTypeType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  (  ( leftType != null && leftIsRefineable )  ) {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  (  ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( leftType != null )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( rightType != null )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( leftIsRefineable && leftType != null )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( rightIsRefineable && rightType != null )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  (  ( rightType != true && leftIsRefineable )  ) {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^com.google.javascript.jscomp.FlowScope informed = blindScope.createChildFlowScope(); if (leftIsRefineable && (leftType != null)) {    declareNameInScope(informed, left, leftType);}; if (rightIsRefineable && (rightType != null)) {    declareNameInScope(informed, right, rightType);}; return informed;^323^324^325^326^327^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^323^324^325^326^327^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( leftIsRefineable || leftType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( leftIsRefineable && leftType == null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightIsRefineable && leftType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftIsRefineable && rightType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftType && leftIsRefineable != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftIsRefineableIsRefineable && leftType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( leftIsRefineable ) {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  (  leftType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( leftIsRefineable && rightType != false )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightIsRefineable && merged.second != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightIsRefineable && rightType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftIsRefineable && merged.first != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^declareNameInScope(informed, left, leftType);^326^327^328^^^323^333^if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^326^327^328^^^323^333^if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftIsRefineable &&  (  ( merged.first )  != null )  )  {     declareNameInScope ( informed, left, merged.first ) ; }^326^^^^^323^333^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightIsRefineable &&  ( rightType != null )  )  {     declareNameInScope ( informed, right, rightType ) ; }^326^^^^^323^333^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightIsRefineable &&  (  ( merged.second )  != null )  )  {     declareNameInScope ( informed, right, merged.second ) ; }^326^^^^^323^333^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, right, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left, rightType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( leftType, left, informed ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, leftType, left ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^327^328^^^^323^333^declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( rightIsRefineable || rightType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( rightIsRefineable && rightType == null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftIsRefineable && rightType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightIsRefineable && leftType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightType && rightIsRefineable != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightTypeIsRefineable && right != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( rightIsRefineable ) {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  (  rightType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  (  rightType != true )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftIsRefineable && leftType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightIsRefineable && merged.second != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftIsRefineable && merged.first != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^declareNameInScope(informed, right, rightType);^329^330^331^^^323^333^if  ( rightIsRefineable && rightType != null )  { declareNameInScope ( informed, right, rightType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^329^330^331^^^323^333^if  ( rightIsRefineable && rightType != null )  { declareNameInScope ( informed, right, rightType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftIsRefineable &&  ( leftType != null )  )  {     declareNameInScope ( informed, left, leftType ) ; }^329^^^^^323^333^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftIsRefineable &&  (  ( merged.first )  != null )  )  {     declareNameInScope ( informed, left, merged.first ) ; }^329^^^^^323^333^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightIsRefineable &&  (  ( merged.second )  != null )  )  {     declareNameInScope ( informed, right, merged.second ) ; }^329^^^^^323^333^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, right, leftType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, right ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( right, informed, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, rightType, right ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( rightType, right, informed ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^330^331^^^^323^333^declareNameInScope ( informed, right, rightType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return blindScope;^332^^^^^323^333^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^325^^^^^323^333^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( leftType )  ;^325^^^^^323^333^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^323^333^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^325^326^327^328^^323^333^FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( left, informed, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( leftIsRefineable || leftType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( leftIsRefineable && leftType == null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightIsRefineable && leftType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftIsRefineable && rightType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftTypeIsRefineable && left != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftIsRefineableIsRefineable && leftType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( leftIsRefineable ) {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  (  leftType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( leftIsRefineable && leftType != true )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightIsRefineable && merged.second != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightIsRefineable && rightType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftIsRefineable && merged.first != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^declareNameInScope(informed, left, leftType);^326^327^328^^^311^341^if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^326^327^328^^^311^341^if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftIsRefineable &&  (  ( merged.first )  != null )  )  {     declareNameInScope ( informed, left, merged.first ) ; }^326^^^^^311^341^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightIsRefineable &&  ( rightType != null )  )  {     declareNameInScope ( informed, right, rightType ) ; }^326^^^^^311^341^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightIsRefineable &&  (  ( merged.second )  != null )  )  {     declareNameInScope ( informed, right, merged.second ) ; }^326^^^^^311^341^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, right, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( left, informed, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( leftType, left, informed ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^327^328^^^^312^342^declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( rightIsRefineable || rightType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( rightIsRefineable && rightType == null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftIsRefineable && rightType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightIsRefineable && leftType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightTypeIsRefineable && right != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( rightIsRefineable ) {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  (  rightType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( rightIsRefineable && rightType != true )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftIsRefineable && leftType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightIsRefineable && merged.second != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftIsRefineable && merged.first != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^declareNameInScope(informed, right, rightType);^329^330^331^^^314^344^if  ( rightIsRefineable && rightType != null )  { declareNameInScope ( informed, right, rightType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^329^330^331^^^314^344^if  ( rightIsRefineable && rightType != null )  { declareNameInScope ( informed, right, rightType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftIsRefineable &&  ( leftType != null )  )  {     declareNameInScope ( informed, left, leftType ) ; }^329^^^^^314^344^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftIsRefineable &&  (  ( merged.first )  != null )  )  {     declareNameInScope ( informed, left, merged.first ) ; }^329^^^^^314^344^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( rightIsRefineable &&  (  ( merged.second )  != null )  )  {     declareNameInScope ( informed, right, merged.second ) ; }^329^^^^^314^344^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, right, leftType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, right ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( right, informed, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, rightType, right ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^330^331^^^^315^345^declareNameInScope ( informed, right, rightType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^rightType =  ( rightType != null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^rightType =  ( leftType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^rightType =  ( condition == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( rightType ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^rightType =  ( rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^rightType =  ( rightType == false )  ? false : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return blindScope;^332^^^^^317^347^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^325^^^^^310^340^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^rightType.getRestrictedTypeGivenToBooleanOutcome ( rightIsRefineable ) ;^320^^^^^305^335^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^rightType .getGreatestSubtype (  )  ;^320^^^^^305^335^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^320^^^^^305^335^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^320^^^^^305^335^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^320^^^^^305^335^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^310^340^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( leftType )  ;^325^^^^^310^340^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^325^326^327^328^^310^340^FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left, rightType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, leftType, left ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( rightType, right, informed ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && leftIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( left != null && leftTypeIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  (  ( right != null && leftIsRefineable )  || ( leftTypeType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  (  ( leftType != false && leftIsRefineable )  || ( rightType != false && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( left && leftIsRefineableType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( rightIsRefineable && leftType != this )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( leftIsRefineable && rightType != false )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( rightType )  ;^325^^^^^323^333^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^nextPreciserScopeKnowingConditionOutcome ( informed, right, leftType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  (  leftType != true )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^nextPreciserScopeKnowingConditionOutcome ( blindScope, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( right && rightIsRefineableType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightIsRefineableIsRefineable && rightType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( rightIsRefineable ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^rightType =  ( rightType == null )  ? null : rightType .getGreatestSubtype (  )  ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^rightType =  ( rightType == true )  ? true : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return informed;^335^^^^^320^350^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, rightScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left,  !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope blindScopeScope = firstPreciserScopeKnowingConditionOutcome ( left, left, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^FlowScope leftScope = nextPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P11_Insert_Donor_Statement]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P8_Replace_Mix]^FlowScope rightScope = nextPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^StaticSlot<JSType> leftVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( rightScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^StaticSlot<JSType> leftVar = blindScope.findUniqueRefinedSlot ( leftScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P11_Insert_Donor_Statement]^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P2_Replace_Operator]^if  ( leftVar != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P8_Replace_Mix]^if  ( leftVar == true )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P9_Replace_Statement]^if  ( objectType != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P9_Replace_Statement]^if  ( rightType != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P9_Replace_Statement]^if  ( operandType != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P9_Replace_Statement]^if  ( leftType != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P9_Replace_Statement]^if  ( leftType == null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P9_Replace_Statement]^if  ( type != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P15_Unwrap_Block]^return blindScope;^343^344^345^^^338^358^if  ( leftVar == null )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P16_Remove_Block]^^343^344^345^^^338^358^if  ( leftVar == null )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P13_Insert_Block]^if  ( restrictedType == null )  {     return blindScope; }^343^^^^^338^358^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P13_Insert_Block]^if  ( leftType == null )  {     return blindScope; }^343^^^^^338^358^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^return rightScope;^344^^^^^338^358^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, leftScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left,  condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^FlowScope rightScope = nextPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P11_Insert_Donor_Statement]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, rightScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^rightScope = firstPreciserScopeKnowingConditionOutcome ( left, rightScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, leftScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^rightScope = firstPreciserScopeKnowingConditionOutcome (  rightScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right,  !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^rightScope = firstPreciserScopeKnowingConditionOutcome ( rightScope, right, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^rightScope = nextPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P8_Replace_Mix]^rightScope =  firstPreciserScopeKnowingConditionOutcome ( left, leftScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P11_Insert_Donor_Statement]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P11_Insert_Donor_Statement]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P8_Replace_Mix]^rightScope = nextPreciserScopeKnowingConditionOutcome ( right, leftScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^StaticSlot<JSType> rightVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( rightScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^StaticSlot<JSType> rightVar = blindScope.findUniqueRefinedSlot ( rightScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P11_Insert_Donor_Statement]^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( leftScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P2_Replace_Operator]^if  ( rightVar == null && !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P2_Replace_Operator]^if  ( rightVar != null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^if  ( null == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P6_Replace_Expression]^if  ( rightVar == null ) {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P6_Replace_Expression]^if  (  !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^if  ( rightVar == null || !leftVar.getName (  ) .getTypeIfRefinable ( rightVar.getName (  )  )  )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^if  ( rightVar == null || !leftVar.getName (  )  .equals (  )   )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^if  ( rightVar == null || !leftVar .getType (  )  .equals ( rightVar^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P15_Unwrap_Block]^return blindScope;^351^352^353^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P16_Remove_Block]^^351^352^353^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^return rightScope;^352^^^^^338^358^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^JSType type = rightVar.getType (  ) .getLeastSupertype ( leftVar.getType (  )  ) ;^354^^^^^338^358^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^JSType type = leftVar.getType (  ) .getTypeIfRefinable ( rightVar.getType (  )  ) ;^354^^^^^338^358^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^JSType type = leftVar .getJSType (  )  .getLeastSupertype ( rightVar^354^^^^^338^358^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^354^355^^^^338^358^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ; FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^354^^^^^338^358^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^FlowScope informed = rightScope.createChildFlowScope (  ) ;^355^^^^^338^358^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^355^^^^^338^358^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( type )  ;^355^^^^^338^358^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^355^356^357^358^^338^358^FlowScope informed = blindScope.createChildFlowScope (  ) ; informed.inferSlotType ( leftVar.getName (  ) , type ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^informed.inferSlotType ( leftVar.getName (  )  ) ;^356^^^^^338^358^informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^informed.inferQualifiedSlot ( leftVar.getName (  ) , type ) ;^356^^^^^338^358^informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P14_Delete_Statement]^^356^357^358^^^338^358^informed.inferSlotType ( leftVar.getName (  ) , type ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P7_Replace_Invocation]^informed.inferSlotType ( leftVar .getType (  )  , type ) ;^356^^^^^338^358^informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^return rightScope;^357^^^^^338^358^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[P5_Replace_Variable]^JSType type = getTypeIfRefinable ( name, informed ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType type = getTypeIfRefinable (  blindScope ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType type = getTypeIfRefinable ( name ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType type = getTypeIfRefinable ( blindScope, name ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;JSType type = getTypeIfRefinable ( name, blindScope ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;JSType type = getTypeIfRefinable ( name, blindScope ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;JSType type = getTypeIfRefinable ( name, blindScope ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( type == null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( type != true )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( objectType != null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightType != null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType != null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType == null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftVar == null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  (  ( restrictedLeftType != null )  &&  ( ! ( restrictedLeftType.equals ( leftType )  )  )  )  {     FlowScope informed = blindScope.createChildFlowScope (  ) ;     declareNameInScope ( informed, left, restrictedLeftType ) ;     return informed; }^363^^^^^360^371^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return blindScope;^368^^^^^360^371^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedType = outcome.getRestrictedTypeGivenToBooleanOutcome ( type ) ;^364^365^^^^360^371^JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P8_Replace_Mix]^JSType restrictedType = type .getGreatestSubtype (  )  ;^364^365^^^^360^371^JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^364^365^^^^360^371^JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^366^^^^^360^371^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( type )  ;^366^^^^^360^371^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^type .getGreatestSubtype (  )  ;^365^^^^^360^371^type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^365^366^^^^360^371^type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ; FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^365^^^^^360^371^type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^365^^^^^360^371^type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^366^^^^^360^371^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P8_Replace_Mix]^FlowScope informed = informed.getSlot (  ) ;^366^^^^^360^371^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^366^367^368^369^^360^371^FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, name, restrictedType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, name ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( restrictedType, name, informed ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( name, informed, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, restrictedType, name ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^367^368^369^^^360^371^declareNameInScope ( informed, name, restrictedType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^365^^^^^360^371^type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, name, type ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return informed;^370^^^^^360^371^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedType = getRestrictedByTypeOfResult (  value, resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedType = getRestrictedByTypeOfResult ( type,  resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedType = getRestrictedByTypeOfResult ( type, value ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedType = getRestrictedByTypeOfResult ( resultEqualsValue, value, type ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedType = getRestrictedByTypeOfResult ( value, type, resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^JSType restrictedType = nextPreciserScopeKnowingConditionOutcome ( type, value, resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^getRestrictedByTypeOfResult ( restrictedType, value, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^getRestrictedByTypeOfResult (  value, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^getRestrictedByTypeOfResult ( type,  resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^getRestrictedByTypeOfResult ( type, value ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^getRestrictedByTypeOfResult ( value, type, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^getRestrictedByTypeOfResult ( type, resultEqualsValue, value ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^getRestrictedByTypeOfResult ( resultEqualsValue, value, type ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( type, value, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P8_Replace_Mix]^nextPreciserScopeKnowingConditionOutcome ( restrictedType, value, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( restrictedType != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( type == null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( type == false )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( objectType != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightType != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType == null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( type != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^return blindScope;^377^378^379^^^373^383^if  ( restrictedType == null )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P16_Remove_Block]^^377^378^379^^^373^383^if  ( restrictedType == null )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftVar == null )  {     return blindScope; }^377^^^^^373^383^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftType == null )  {     return blindScope; }^377^^^^^373^383^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return informed;^378^^^^^373^383^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^380^^^^^373^383^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^380^^^^^373^383^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( restrictedType )  ;^380^^^^^373^383^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P8_Replace_Mix]^FlowScope informed = informed.getSlot (  ) ;^380^^^^^373^383^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^380^381^382^383^^373^383^FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, node, restrictedType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, node, type ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, node ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( node, informed, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, restrictedType, node ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( restrictedType, node, informed ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P8_Replace_Mix]^nextPreciserScopeKnowingConditionOutcome ( informed, node, type ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^381^382^383^^^373^383^declareNameInScope ( informed, node, restrictedType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, restrictedLeftType ) ;declareNameInScope ( informed, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P8_Replace_Mix]^return blindScope;^382^^^^^373^383^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable (  blindScope ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = getTypeIfRefinable ( left ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType type = getTypeIfRefinable ( name, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( leftType != null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightType == null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( leftType == this )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( objectType != null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightType != null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( type != null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftVar == null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^return blindScope;^388^389^390^^^385^410^if  ( leftType == null )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^388^389^390^^^385^410^if  ( leftType == null )  { return blindScope; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( leftVar == null )  {     return blindScope; }^388^^^^^385^410^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( restrictedType == null )  {     return blindScope; }^388^^^^^385^410^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return informed;^389^^^^^385^410^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType leftType = right.getJSType (  ) ;^391^^^^^385^410^JSType rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;JSType rightType = right.getJSType (  ) ;^391^^^^^385^410^JSType rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^JSType rightType = right .getType (  )  ;^391^^^^^385^410^JSType rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^391^^^^^385^410^JSType rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightType = right.getJSType (  ) ;JSType rightType = right.getJSType (  ) ;^391^^^^^385^410^JSType rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftType = left.getJSType (  ) ;JSType rightType = right.getJSType (  ) ;^391^^^^^385^410^JSType rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^ObjectType targetType = null.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^392^393^^^^385^410^ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^ObjectType targetType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^392^393^^^^385^410^ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^ObjectType targetType = typeRegistry .getNativeType (  )  ;^392^393^^^^385^410^ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^ObjectType targetType = 3.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^392^393^^^^385^410^ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^392^393^^^^385^410^ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^393^^^^^385^410^typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^typeRegistry .getNativeType (  )  ;^393^^^^^385^410^typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^393^^^^^385^410^typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^return getNativeType ( UNKNOWN_TYPE ) ;typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^393^^^^^385^410^typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^393^^^^^385^410^typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( rightType  ==  FunctionType )  {^394^^^^^385^410^if  ( rightType instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( restrictedLeftType instanceof FunctionType )  {^394^^^^^385^410^if  ( rightType instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( target instanceof FunctionType )  {^394^^^^^385^410^if  ( rightType instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^targetType = ((com.google.javascript.rhino.jstype.FunctionType) (rightType));^394^395^396^^^385^410^if  ( rightType instanceof FunctionType )  { targetType =  ( FunctionType )  rightType; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^394^395^396^^^385^410^if  ( rightType instanceof FunctionType )  { targetType =  ( FunctionType )  rightType; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^targetType =   ( FunctionType )  rightType;^395^^^^^385^410^targetType =  ( FunctionType )  rightType;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( !outcome )  {^398^^^^^385^410^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^visitor = new com.google.javascript.jscomp.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);^398^399^400^401^402^385^410^if  ( outcome )  { visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ; } else { visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^398^399^400^401^402^385^410^if  ( outcome )  { visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ; } else { visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( outcome )  {     return caseEquality ( condition, blindScope, SHEQ ) ; }else {     return caseEquality ( condition, blindScope, SHNE ) ; }^398^^^^^385^410^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P4_Replace_Constructor]^visitor = visitor =  new RestrictByTrueInstanceOfResultVisitor ( targetType )  ;^401^^^^^385^410^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^visitor = new RestrictByFalseInstanceOfResultVisitor ( target ) ;^401^^^^^385^410^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^401^^^^^385^410^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P4_Replace_Constructor]^visitor = visitor =  new RestrictByFalseInstanceOfResultVisitor ( targetType )  ;^399^^^^^385^410^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^visitor = new RestrictByTrueInstanceOfResultVisitor ( target ) ;^399^^^^^385^410^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;^399^^^^^385^410^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^visitor =   new RestrictByTrueInstanceOfResultVisitor ( targetType )  ;^401^^^^^385^410^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedLeftType = rightType.visit ( visitor ) ;^403^^^^^385^410^JSType restrictedLeftType = leftType.visit ( visitor ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType restrictedLeftType = visitor.visit ( leftType ) ;^403^^^^^385^410^JSType restrictedLeftType = leftType.visit ( visitor ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^JSType restrictedLeftType = leftType .getGreatestSubtype (  )  ;^403^^^^^385^410^JSType restrictedLeftType = leftType.visit ( visitor ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^403^^^^^385^410^JSType restrictedLeftType = leftType.visit ( visitor ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( restrictedLeftType != null || !restrictedLeftType.equals ( leftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( restrictedLeftType == null && !restrictedLeftType.equals ( leftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( rightType != null && !restrictedLeftType.equals ( leftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( rightType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( leftType != null && !restrictedLeftType.equals ( restrictedLeftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( restrictedLeftType != null ) {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  (  !restrictedLeftType.equals ( leftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^com.google.javascript.jscomp.FlowScope informed = blindScope.createChildFlowScope(); declareNameInScope(informed, left, restrictedLeftType); return informed;^404^405^406^407^408^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, left, restrictedLeftType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P16_Remove_Block]^^404^405^406^407^408^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, left, restrictedLeftType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( type != null )  {     JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;     FlowScope informed = blindScope.createChildFlowScope (  ) ;     declareNameInScope ( informed, name, restrictedType ) ;     return informed; }^404^^^^^385^410^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^405^^^^^385^410^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^405^^^^^385^410^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^405^406^407^408^^385^410^FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, left, restrictedLeftType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left, rightType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, left ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( restrictedLeftType, left, informed ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( left, informed, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^declareNameInScope ( informed, right, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^406^407^408^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, merged.first ) ;declareNameInScope ( informed, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, node, restrictedType ) ;declareNameInScope ( informed, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, merged.second ) ;declareNameInScope ( informed, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, name, restrictedType ) ;declareNameInScope ( informed, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, left, leftType ) ;declareNameInScope ( informed, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^declareNameInScope ( informed, right, rightType ) ;declareNameInScope ( informed, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return blindScope;^407^^^^^385^410^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( rightType )  ;^405^^^^^385^410^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, restrictedLeftType, left ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P8_Replace_Mix]^nextPreciserScopeKnowingConditionOutcome ( informed, right, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return informed;^409^^^^^385^410^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType rightType = right.getJSType (  ) ;JSType jsType = object.getJSType (  ) ;^420^^^^^419^444^JSType jsType = object.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^ObjectType objectType = ObjectType.cast ( jsType ) ;JSType jsType = object.getJSType (  ) ;^420^^^^^419^444^JSType jsType = object.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^420^^^^^419^444^JSType jsType = object.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^rightType = right.getJSType (  ) ;JSType jsType = object.getJSType (  ) ;^420^^^^^419^444^JSType jsType = object.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^leftType = left.getJSType (  ) ;JSType jsType = object.getJSType (  ) ;^420^^^^^419^444^JSType jsType = object.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^jsType = this.getRestrictedWithoutNull ( unknownType ) ;^421^^^^^419^444^jsType = this.getRestrictedWithoutNull ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^421^^^^^419^444^jsType = this.getRestrictedWithoutNull ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^jsType =  this.getRestrictedWithoutNull ( null ) ;^421^^^^^419^444^jsType = this.getRestrictedWithoutNull ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;jsType = this.getRestrictedWithoutNull ( jsType ) ;^421^^^^^419^444^jsType = this.getRestrictedWithoutNull ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^421^422^^^^419^444^jsType = this.getRestrictedWithoutNull ( jsType ) ; jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^jsType = this.getRestrictedWithoutUndefined ( unknownType ) ;^422^^^^^419^444^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^jsType = this.getRestrictedWithoutNull ( jsType ) ;^422^^^^^419^444^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^jsType = this.getRestrictedWithoutNull ( jsType ) ;jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^422^^^^^419^444^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^jsType = this.getRestrictedWithoutNull ( unknownType ) ;^422^^^^^419^444^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^422^^^^^419^444^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^getRestrictedWithoutUndefined ( p.second )  ) ;jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^422^^^^^419^444^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P3_Replace_Literal]^boolean hasProperty = true;^424^^^^^419^444^boolean hasProperty = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^ObjectType objectType = ObjectType.cast ( unknownType ) ;^425^^^^^419^444^ObjectType objectType = ObjectType.cast ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^ObjectType objectType = ObjectType.hasProperty ( jsType ) ;^425^^^^^419^444^ObjectType objectType = ObjectType.cast ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^JSType jsType = object.getJSType (  ) ;ObjectType objectType = ObjectType.cast ( jsType ) ;^425^^^^^419^444^ObjectType objectType = ObjectType.cast ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^ObjectType objectType = ObjectType.hasProperty ( unknownType ) ;^425^^^^^419^444^ObjectType objectType = ObjectType.cast ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^425^^^^^419^444^ObjectType objectType = ObjectType.cast ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( objectType == null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( targetType != null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( targetType != false )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightType != null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType != null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType == null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( type != null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftVar == null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P15_Unwrap_Block]^hasProperty = objectType.hasProperty(propertyName);^426^427^428^^^419^444^if  ( objectType != null )  { hasProperty = objectType.hasProperty ( propertyName ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P16_Remove_Block]^^426^427^428^^^419^444^if  ( objectType != null )  { hasProperty = objectType.hasProperty ( propertyName ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^hasProperty = targetType.hasProperty ( propertyName ) ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^hasProperty = objectType.hasProperty ( qualifiedName ) ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^hasProperty = propertyName.hasProperty ( objectType ) ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( objectType != null )  {     hasProperty = objectType.hasProperty ( propertyName ) ; }^427^^^^^419^444^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^hasProperty = objectType .cast ( jsType )  ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( qualifiedName + "." + propertyName )  {^429^^^^^419^444^if  ( !hasProperty )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( qualifiedName + "." )  {^429^^^^^419^444^if  ( !hasProperty )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( blindScope.getSlot(propertyQualifiedName) == null )  {^429^^^^^419^444^if  ( !hasProperty )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( hasProperty )  {^429^^^^^419^444^if  ( !hasProperty )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( qualifiedName == null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( propertyName != null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( qualifiedName + "." + propertyName )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( qualifiedName + "." )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P6_Replace_Expression]^if  ( blindScope.getSlot(propertyQualifiedName) == null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( qualifiedName != this )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restrictedType == null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( rightType != null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( operandType != null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType != null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftType == null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( leftVar == null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( blindScope.getSlot ( propertyQualifiedName )  != null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( blindScope.getSlot ( propertyQualifiedName )  == true )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( !hasProperty )  {     String qualifiedName = object.getQualifiedName (  ) ;     if  ( qualifiedName != null )  {         String propertyQualifiedName =  ( qualifiedName + "." )  + propertyName;         if  (  ( blindScope.getSlot ( propertyQualifiedName )  )  == null )  {             FlowScope informed = blindScope.createChildFlowScope (  ) ;             JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;             informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;             return informed;         }     } }^433^^^^^419^444^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P13_Insert_Block]^if  ( qualifiedName != null )  {     String propertyQualifiedName =  ( qualifiedName + "." )  + propertyName;     if  (  ( blindScope.getSlot ( propertyQualifiedName )  )  == null )  {         FlowScope informed = blindScope.createChildFlowScope (  ) ;         JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;         informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;         return informed;     } }^433^^^^^419^444^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return blindScope;^439^^^^^419^444^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope.getSlot (  ) ;^434^^^^^419^444^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( unknownType )  ;^434^^^^^419^444^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^JSType unknownType = this.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^435^436^^^^419^444^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^JSType unknownType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^435^436^^^^419^444^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^JSType unknownType = typeRegistry .getNativeType (  )  ;^435^436^^^^419^444^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^435^436^^^^419^444^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^434^^^^^419^444^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^FlowScope informed = informed.getSlot (  ) ;^434^^^^^419^444^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^435^436^^^^419^444^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P11_Insert_Donor_Statement]^typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^435^436^^^^419^444^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^informed.inferQualifiedSlot ( qualifiedName, unknownType, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^informed.inferQualifiedSlot (  unknownType, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^informed.inferQualifiedSlot ( propertyQualifiedName,  unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^informed .findUniqueRefinedSlot ( blindScope )  ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^437^438^439^440^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ; return informed; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P1_Replace_Type]^char propertyQualifiedName = qualifiedName + "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P2_Replace_Operator]^String propertyQualifiedName = qualifiedName  <  "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^String propertyQualifiedName = propertyName + "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^String propertyQualifiedName = qualifiedName + "." + qualifiedName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^String propertyQualifiedName = propertyName + "." + qualifiedName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( informed.getSlot ( propertyQualifiedName )  == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( blindScope.getSlot ( qualifiedName )  == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^if  ( propertyQualifiedName.getSlot ( blindScope )  == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^informed.inferQualifiedSlot ( propertyQualifiedName, jsType, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^informed.inferQualifiedSlot ( unknownType, propertyQualifiedName, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^if  ( blindScope .inferSlotType ( unknownType )   == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( blindScope.getSlot ( qualifiedName )  == false )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^FlowScope informed = blindScope .inferSlotType ( jsType )  ;^434^^^^^419^444^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^informed .findUniqueRefinedSlot ( informed )  ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P1_Replace_Type]^char qualifiedName = object.getQualifiedName (  ) ;^430^^^^^419^444^String qualifiedName = object.getQualifiedName (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^String qualifiedName = object .getLastChild (  )  ;^430^^^^^419^444^String qualifiedName = object.getQualifiedName (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P2_Replace_Operator]^String propertyQualifiedName = qualifiedName  !=  "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P3_Replace_Literal]^String propertyQualifiedName = qualifiedName + "" + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( qualifiedName != false )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P2_Replace_Operator]^String propertyQualifiedName = qualifiedName  <<  "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^if  ( blindScope .inferSlotType ( jsType )   == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( blindScope.getSlot ( propertyQualifiedName )  == false )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P8_Replace_Mix]^JSType unknownType = null.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^435^436^^^^419^444^JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P2_Replace_Operator]^String propertyQualifiedName = qualifiedName   instanceof   "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return informed;^443^^^^^419^444^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^459^^^^^458^460^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTopType [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  type  boolean  
[P14_Delete_Statement]^^459^^^^^458^460^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTopType [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  type  boolean  
[P2_Replace_Operator]^if  ( target  <=  FunctionType )  {^464^^^^^463^471^if  ( target instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( targetType instanceof FunctionType )  {^464^^^^^463^471^if  ( target instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( rightType instanceof FunctionType )  {^464^^^^^463^471^if  ( target instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^com.google.javascript.rhino.jstype.FunctionType funcTarget = ((com.google.javascript.rhino.jstype.FunctionType) (target)); if (funcTarget.hasInstanceType()) {    return funcTarget.getInstanceType();};^464^465^466^467^468^463^471^if  ( target instanceof FunctionType )  { FunctionType funcTarget =  ( FunctionType )  target; if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^464^465^466^467^468^463^471^if  ( target instanceof FunctionType )  { FunctionType funcTarget =  ( FunctionType )  target; if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^466^^^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return funcTarget.getInstanceType();^466^467^468^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^466^467^468^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^466^^^^^463^471^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^466^^^^^463^471^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {         return null;     }     return type; }^466^^^^^463^471^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( target.isUnknownType (  )  )  {     return type; }^466^^^^^463^471^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return funcTarget .hasInstanceType (  )  ;^467^^^^^463^471^return funcTarget.getInstanceType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return funcTarget.getInstanceType (  ) ; }^467^^^^^463^471^return funcTarget.getInstanceType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^467^^^^^463^471^return funcTarget.getInstanceType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P14_Delete_Statement]^^467^^^^^463^471^return funcTarget.getInstanceType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( rightType instanceof FunctionType )  {     targetType =  (  ( FunctionType )   ( rightType )  ) ; }^465^^^^^463^471^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( funcTarget .getInstanceType (  )   )  {^466^^^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^return getType ( UNKNOWN_TYPE ) ;^470^^^^^463^471^return getNativeType ( UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P14_Delete_Statement]^^470^^^^^463^471^return getNativeType ( UNKNOWN_TYPE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^return applyCommonRestriction ( targetType ) ;^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  
[P14_Delete_Statement]^^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^480^^^^^479^481^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  
[P14_Delete_Statement]^^480^^^^^479^481^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^485^^^^^484^486^return caseObjectType ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  type  
[P14_Delete_Statement]^^485^^^^^484^486^return caseObjectType ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  type  
[P5_Replace_Variable]^if  ( targetType.isUnknownType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( target.isSubtype (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( funcTarget.hasInstanceType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type;^489^490^491^^^488^499^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^489^490^491^^^488^499^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^489^^^^^488^499^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^489^^^^^488^499^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( type.isUnknownType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( funcTarget .getInstanceType (  )   )  {^494^^^^^488^499^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^494^^^^^488^499^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type.getGreatestSubtype(funcTarget.getInstanceType());^494^495^496^^^488^499^if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^494^495^496^^^488^499^if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^494^^^^^488^499^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {         return null;     }     return type; }^494^^^^^488^499^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^494^^^^^488^499^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^return funcTarget.getGreatestSubtype ( type.getInstanceType (  )  ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^495^^^^^488^499^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P14_Delete_Statement]^^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return type.getGreatestSubtype ( funcTarget .hasInstanceType (  )   ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return true;^498^^^^^488^499^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( targetType.isUnknownType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( target.isSubtype (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( funcTarget.hasInstanceType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type;^515^516^517^^^514^529^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^515^516^517^^^514^529^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^515^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^515^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^return targetType;^516^^^^^514^529^return type;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^if  ( type.isUnknownType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( funcTarget .getInstanceType (  )   )  {^520^^^^^514^529^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^520^^^^^514^529^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^if (type.isSubtype(funcTarget.getInstanceType())) {    return null;}; return type;^520^521^522^523^^514^529^if  ( funcTarget.hasInstanceType (  )  )  { if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^520^521^522^523^^514^529^if  ( funcTarget.hasInstanceType (  )  )  { if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^520^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^520^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^520^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( targetType.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( funcTarget.isSubtype ( type.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( type.isSubtype ( funcTarget .hasInstanceType (  )   )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^if  ( targetType.isSubtype ( funcTarget .hasInstanceType (  )   )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return null;^521^522^523^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^521^522^523^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {         return null;     }     return type; }^521^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( target.isUnknownType (  )  )  {     return type; }^521^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return true;^522^^^^^514^529^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^return targetType;^525^^^^^514^529^return type;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^521^^^^^514^529^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return false;^522^^^^^514^529^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return true;^528^^^^^514^529^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( target.isSubtype (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^if  ( targetType.isSubtype (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( funcTarget.hasInstanceType (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type;^533^534^535^^^532^543^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^533^534^535^^^532^543^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^533^^^^^532^543^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^533^^^^^532^543^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( type.isUnknownType (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^if  ( funcTarget .getInstanceType (  )   )  {^538^^^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^538^^^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type.getRestrictedUnion(funcTarget.getInstanceType());^538^539^540^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^538^539^540^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^538^^^^^532^543^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^538^^^^^532^543^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^return funcTarget.getRestrictedUnion ( type.getInstanceType (  )  ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^return type.getRestrictedUnion ( funcTarget .hasInstanceType (  )   ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( funcTarget.hasInstanceType (  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^539^^^^^532^543^[Delete]^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P14_Delete_Statement]^^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return this;^542^^^^^532^543^return null;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^return caseUnionType ( type ) ;^547^^^^^546^548^return caseObjectType ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  type  
[P14_Delete_Statement]^^547^^^^^546^548^return caseObjectType ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  type  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^if  ( p.first == true || p.second == true )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P15_Unwrap_Block]^return null;^50^51^52^^^49^54^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P16_Remove_Block]^^50^51^52^^^49^54^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return this;^51^^^^^49^54^return null;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return false;^51^^^^^49^54^return null;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^53^^^^^49^54^return p.first.getTypesUnderEquality ( p.second ) ;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^if  ( p.first == true || p.second == true )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P15_Unwrap_Block]^return null;^63^64^65^^^62^67^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P16_Remove_Block]^^63^64^65^^^62^67^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return this;^64^^^^^62^67^return null;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return true;^64^^^^^62^67^return null;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^66^^^^^62^67^return p.first.getTypesUnderInequality ( p.second ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^if  (  p.second == this )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P15_Unwrap_Block]^return null;^77^78^79^^^76^81^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P16_Remove_Block]^^77^78^79^^^76^81^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return false;^78^^^^^76^81^return null;^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return this;^78^^^^^76^81^return null;^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^80^^^^^76^81^return p.first.getTypesUnderShallowEquality ( p.second ) ;^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null && p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first != null || p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P2_Replace_Operator]^if  ( p.first == null || p.second != null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  ( p.first == null ) {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^if  (  p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^if  ( p.first == true || p.second == true )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P15_Unwrap_Block]^return null;^91^92^93^^^90^95^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P16_Remove_Block]^^91^92^93^^^90^95^if  ( p.first == null || p.second == null )  { return null; }^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return this;^92^^^^^90^95^return null;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return true;^92^^^^^90^95^return null;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^94^^^^^90^95^return p.first.getTypesUnderShallowInequality ( p.second ) ;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^106^107^^^^104^108^getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P11_Insert_Donor_Statement]^getRestrictedWithoutUndefined ( p.second )  ) ;getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^106^107^^^^104^108^getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^107^^^^^104^108^getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P11_Insert_Donor_Statement]^getRestrictedWithoutUndefined ( p.first ) , getRestrictedWithoutUndefined ( p.second )  ) ;getRestrictedWithoutUndefined ( p.second )  ) ;^107^^^^^104^108^getRestrictedWithoutUndefined ( p.second )  ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^private  ObjectType target;^451^^^^^446^456^private final ObjectType target;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^this.target =  null;^454^^^^^453^455^this.target = target;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] ObjectType)   ObjectType target [VARIABLES] ObjectType  target  boolean  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^459^^^^^458^460^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseTopType [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  JSType  type  boolean  
[P14_Delete_Statement]^^459^^^^^458^460^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseTopType [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  JSType  type  boolean  
[P2_Replace_Operator]^if  ( target  ^  FunctionType )  {^464^^^^^463^471^if  ( target instanceof FunctionType )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P15_Unwrap_Block]^com.google.javascript.rhino.jstype.FunctionType funcTarget = ((com.google.javascript.rhino.jstype.FunctionType) (target)); if (funcTarget.hasInstanceType()) {    return funcTarget.getInstanceType();};^464^465^466^467^468^463^471^if  ( target instanceof FunctionType )  { FunctionType funcTarget =  ( FunctionType )  target; if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P16_Remove_Block]^^464^465^466^467^468^463^471^if  ( target instanceof FunctionType )  { FunctionType funcTarget =  ( FunctionType )  target; if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P7_Replace_Invocation]^if  ( funcTarget .getInstanceType (  )   )  {^466^^^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^466^^^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P15_Unwrap_Block]^return funcTarget.getInstanceType();^466^467^468^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P16_Remove_Block]^^466^467^468^^^463^471^if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^466^^^^^463^471^[Delete]^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P13_Insert_Block]^if  ( target.isUnknownType (  )  )  {     return type; }^466^^^^^463^471^[Delete]^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P12_Insert_Condition]^if  ( funcTarget.hasInstanceType (  )  )  { return funcTarget.getInstanceType (  ) ; }^467^^^^^463^471^return funcTarget.getInstanceType (  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P14_Delete_Statement]^^467^^^^^463^471^return funcTarget.getInstanceType (  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P8_Replace_Mix]^return funcTarget .hasInstanceType (  )  ;^467^^^^^463^471^return funcTarget.getInstanceType (  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P14_Delete_Statement]^^470^^^^^463^471^return getNativeType ( UNKNOWN_TYPE ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[P5_Replace_Variable]^return applyCommonRestriction ( target ) ;^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  boolean  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  boolean  
[P14_Delete_Statement]^^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  boolean  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^480^^^^^479^481^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  
[P14_Delete_Statement]^^480^^^^^479^481^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  
[P7_Replace_Invocation]^return caseTopType ( type ) ;^485^^^^^484^486^return caseObjectType ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] ObjectType  target  type  FunctionType  type  boolean  
[P14_Delete_Statement]^^485^^^^^484^486^return caseObjectType ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] ObjectType  target  type  FunctionType  type  boolean  
[P9_Replace_Statement]^if  ( funcTarget.hasInstanceType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type;^489^490^491^^^488^499^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^489^490^491^^^488^499^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^489^^^^^488^499^[Delete]^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( type.isUnknownType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^494^^^^^488^499^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type.getGreatestSubtype(funcTarget.getInstanceType());^494^495^496^^^488^499^if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^494^495^496^^^488^499^if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return funcTarget.getInstanceType (  ) ; }^494^^^^^488^499^[Delete]^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^return funcTarget.getGreatestSubtype ( type.getInstanceType (  )  ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^return type.getGreatestSubtype ( funcTarget .hasInstanceType (  )   ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( funcTarget.hasInstanceType (  )  )  { return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ; }^495^^^^^488^499^[Delete]^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P14_Delete_Statement]^^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return false;^498^^^^^488^499^return null;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^private  ObjectType target;^507^^^^^502^512^private final ObjectType target;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^this.target =  null;^510^^^^^509^511^this.target = target;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] ObjectType)   ObjectType target [VARIABLES] ObjectType  target  boolean  
[P7_Replace_Invocation]^if  ( target.isSubtype (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P9_Replace_Statement]^if  ( funcTarget.hasInstanceType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P15_Unwrap_Block]^return type;^515^516^517^^^514^529^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P16_Remove_Block]^^515^516^517^^^514^529^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^515^^^^^514^529^[Delete]^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P5_Replace_Variable]^return target;^516^^^^^514^529^return type;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P5_Replace_Variable]^if  ( type.isUnknownType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P8_Replace_Mix]^if  ( type.isSubtype (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P7_Replace_Invocation]^if  ( funcTarget .getInstanceType (  )   )  {^520^^^^^514^529^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^520^^^^^514^529^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P15_Unwrap_Block]^if (type.isSubtype(funcTarget.getInstanceType())) {    return null;}; return type;^520^521^522^523^^514^529^if  ( funcTarget.hasInstanceType (  )  )  { if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P16_Remove_Block]^^520^521^522^523^^514^529^if  ( funcTarget.hasInstanceType (  )  )  { if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^520^^^^^514^529^[Delete]^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P5_Replace_Variable]^if  ( target.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P5_Replace_Variable]^if  ( funcTarget.isSubtype ( type.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P15_Unwrap_Block]^return null;^521^522^523^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P16_Remove_Block]^^521^522^523^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return null; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {         return null;     }     return type; }^521^^^^^514^529^[Delete]^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P13_Insert_Block]^if  ( target.isUnknownType (  )  )  {     return type; }^521^^^^^514^529^[Delete]^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P8_Replace_Mix]^return this;^522^^^^^514^529^return null;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P8_Replace_Mix]^return false;^522^^^^^514^529^return null;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P5_Replace_Variable]^return target;^525^^^^^514^529^return type;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P7_Replace_Invocation]^if  ( type .isUnknownType (  )   )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^521^^^^^514^529^[Delete]^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P8_Replace_Mix]^return true;^522^^^^^514^529^return null;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P7_Replace_Invocation]^if  ( type.isSubtype ( funcTarget .hasInstanceType (  )   )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P8_Replace_Mix]^return true;^528^^^^^514^529^return null;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[P7_Replace_Invocation]^if  ( target.isSubtype (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( funcTarget.hasInstanceType (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type;^533^534^535^^^532^543^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^533^534^535^^^532^543^if  ( target.isUnknownType (  )  )  { return type; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {     return null; }^533^^^^^532^543^[Delete]^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^if  ( type.isUnknownType (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^if  ( funcTarget .getInstanceType (  )   )  {^538^^^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P9_Replace_Statement]^if  ( target.isUnknownType (  )  )  {^538^^^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P15_Unwrap_Block]^return type.getRestrictedUnion(funcTarget.getInstanceType());^538^539^540^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P16_Remove_Block]^^538^539^540^^^532^543^if  ( funcTarget.hasInstanceType (  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P5_Replace_Variable]^return funcTarget.getRestrictedUnion ( type.getInstanceType (  )  ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return type.getRestrictedUnion ( funcTarget .hasInstanceType (  )   ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P12_Insert_Condition]^if  ( funcTarget.hasInstanceType (  )  )  { return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P13_Insert_Block]^if  ( funcTarget.hasInstanceType (  )  )  {     return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ; }^539^^^^^532^543^[Delete]^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P14_Delete_Statement]^^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P8_Replace_Mix]^return this;^542^^^^^532^543^return null;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[P7_Replace_Invocation]^return caseUnionType ( type ) ;^547^^^^^546^548^return caseObjectType ( type ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] ObjectType  target  type  FunctionType  type  boolean  
[P14_Delete_Statement]^^547^^^^^546^548^return caseObjectType ( type ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] ObjectType  target  type  FunctionType  type  boolean  
