[P8_Replace_Mix]^this.namer =  null;^66^^^^^65^67^this.namer = namer;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] <init> [RETURN_TYPE] AnonymousFunctionNamingCallback$FunctionNamer)   FunctionNamer namer [VARIABLES] FunctionNamer  namer  boolean  
[P2_Replace_Operator]^if  ( functionName.length (  )  != 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P2_Replace_Operator]^if  ( functionName.length (  )  <= 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P3_Replace_Literal]^if  ( functionName.length (  )  == 7 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P3_Replace_Literal]^if  ( functionName.length() + 7  == 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( name.length (  )  == 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P6_Replace_Expression]^if  ( parent.getType() == ASSIGN )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P6_Replace_Expression]^if  ( parent.getType() == NAME )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P9_Replace_Statement]^if  ( functionName.isEmpty (  )  )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  {     Node lhs = parent.getFirstChild (  ) ;     String name = namer.getName ( lhs ) ;     namer.setFunctionName ( name, n ) ; }else     if  (  ( parent.getType (  )  )  ==  ( NAME )  )  {         String name = namer.getName ( parent ) ;         namer.setFunctionName ( name, n ) ;     }^80^^^^^65^95^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( rhs.getType (  )  == Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P6_Replace_Expression]^if  ( parent.getType() == NAME )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P9_Replace_Statement]^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P13_Insert_Block]^if  (  ( functionName.length (  )  )  == 0 )  {     if  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  {         Node lhs = parent.getFirstChild (  ) ;         String name = namer.getName ( lhs ) ;         namer.setFunctionName ( name, n ) ;     }else         if  (  ( parent.getType (  )  )  ==  ( NAME )  )  {             String name = namer.getName ( parent ) ;             namer.setFunctionName ( name, n ) ;         }      }^81^^^^^66^96^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P13_Insert_Block]^if  ( type ==  ( FUNCTION )  )  {     Node functionNameNode = valueNode.getFirstChild (  ) ;     String functionName = functionNameNode.getString (  ) ;     if  ( functionName.isEmpty (  )  )  {         namer.setFunctionName ( name, valueNode ) ;     } }else     if  ( type ==  ( OBJECTLIT )  )  {         nameObjectLiteralMethods ( valueNode, name ) ;     }^81^^^^^66^96^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  <= Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^} else if  ( rhs.getType (  )  == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P6_Replace_Expression]^} else {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P15_Unwrap_Block]^java.lang.String name = namer.getName(parent); namer.setFunctionName(name, n);^89^90^^92^93^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {  String name = namer.getName ( parent ) ; namer.setFunctionName ( name, n ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P16_Remove_Block]^^89^90^^92^93^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {  String name = namer.getName ( parent ) ; namer.setFunctionName ( name, n ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P13_Insert_Block]^if  (  ( rhs.getType (  )  )  ==  ( OBJECTLIT )  )  {     nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ; }^89^^^^^74^104^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P1_Replace_Type]^char name = namer.getName ( parent ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^String name = parent.getName ( namer ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^String name = namer.getName ( n ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^String name = namer.getName ( lhs ) ;String name = namer.getName ( parent ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^String name = namer.getName ( rhs ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^92^93^^^^77^107^String name = namer.getName ( parent ) ; namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( functionName, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( rhsame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName (  n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( name ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( n, name ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( nameame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^namer.getCombinedName ( name, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^namer.getCombinedName ( functionName, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^namer.setFunctionName ( name, valueNode ) ;namer.setFunctionName ( name, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^String name = namer .getCombinedName ( name , functionName )  ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^String name = namer .getCombinedName ( functionName , name )  ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^Node lhs = parent .getString (  )  ;^86^^^^^71^101^Node lhs = parent.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^Node lhs = rhs.getFirstChild (  ) ;^86^^^^^71^101^Node lhs = parent.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P1_Replace_Type]^char name = namer.getName ( lhs ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^String name = namer.getName ( rhs ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^String name = lhs.getName ( namer ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^String name = namer.getName ( parent ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^String name = namer.getName ( parent ) ;String name = namer.getName ( lhs ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^Node lhs = n.getFirstChild (  ) ;^86^^^^^71^101^Node lhs = parent.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^86^87^^^^71^101^Node lhs = parent.getFirstChild (  ) ; String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^87^88^^^^72^102^String name = namer.getName ( lhs ) ; namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( functionName, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( parentame, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName (  n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( name ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^namer.getCombinedName ( name, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^namer.setFunctionName ( rhsame, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^namer.setFunctionName ( name, valueNode ) ;namer.setFunctionName ( name, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  != Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^} else if  ( parent .getString (  )   == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^}  if  ( rhs.getType (  )  == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^namer .getName ( rhs )  ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^namer.getCombinedName ( rhsame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^String name = namer .getCombinedName ( functionName , functionName )  ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^namer .getName ( parent )  ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^String name = namer .getCombinedName ( functionName , functionName )  ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( parentame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^namer .getName ( parent )  ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P2_Replace_Operator]^if  ( parent.getType (  )  > Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^if  ( rhs .getString (  )   == Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^}  if  ( n.getType (  )  == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^namer.getCombinedName ( parentame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^} else if  ( rhs .getString (  )   == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^String name = namer .getCombinedName ( name , functionName )  ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( n, name ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^namer.setFunctionName ( nameame, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^namer .getName ( rhs )  ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^String name = namer .getCombinedName ( name , name )  ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^namer .getName ( n )  ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P2_Replace_Operator]^if  ( rhs.getType (  )  != Token.OBJECTLIT )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.OBJECTLIT )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P9_Replace_Statement]^if  ( keyNode.getType (  )  == Token.STRING )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P15_Unwrap_Block]^nameObjectLiteralMethods(rhs, namer.getName(lhs));^105^106^107^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  { nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P16_Remove_Block]^^105^106^107^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  { nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P13_Insert_Block]^if  ( type ==  ( OBJECTLIT )  )  {     nameObjectLiteralMethods ( valueNode, name ) ; }^105^^^^^90^120^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( NAME )  )  {     String name = namer.getName ( parent ) ;     namer.setFunctionName ( name, n ) ; }^105^^^^^90^120^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^nameObjectLiteralMethods ( parent, namer.getName ( lhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^nameObjectLiteralMethods (  namer.getName ( lhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^nameObjectLiteralMethods ( rhs.getName ( lhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^nameObjectLiteralMethods ( lhs, namer.getName ( rhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^nameObjectLiteralMethods ( rhs, lhs.getName ( namer )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^nameObjectLiteralMethods ( rhs, namer.getName ( parent )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^nameObjectLiteralMethods ( rhs, namer.getName ( rhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^Node functionNameNode = rhs.getFirstChild (  ) ;^78^^^^^63^93^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P1_Replace_Type]^char functionName = functionNameNode.getchar (  ) ;^79^^^^^64^94^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^String functionName = rhs.getString (  ) ;^79^^^^^64^94^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^Node functionNameNode = valueNode.getFirstChild (  ) ;String functionName = functionNameNode.getString (  ) ;^79^^^^^64^94^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^Node lhs = rhs.getFirstChild (  ) ;^103^^^^^88^118^Node lhs = n.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^Node rhs = parent.getNext (  ) ;^104^^^^^89^119^Node rhs = lhs.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^Node lhs = parent.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^104^^^^^89^119^Node rhs = lhs.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^104^^^^^89^119^Node rhs = lhs.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P11_Insert_Donor_Statement]^Node valueNode = keyNode.getNext (  ) ;Node rhs = lhs.getNext (  ) ;^104^^^^^89^119^Node rhs = lhs.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^switch  ( rhs.getType (  )  )  {^70^^^^^55^85^switch  ( n.getType (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^70^^^^^55^85^switch  ( n.getType (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^78^^^^^63^93^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^79^^^^^64^94^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P3_Replace_Literal]^if  ( functionName.length() - 7  == 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^if  ( name .isEmpty (  )   == 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^86^^^^^71^101^Node lhs = parent.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^namer.getCombinedName ( functionName, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^103^^^^^88^118^Node lhs = n.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^Node rhs = rhs.getNext (  ) ;^104^^^^^89^119^Node rhs = lhs.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P14_Delete_Statement]^^104^^^^^89^119^Node rhs = lhs.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^if  ( rhs .getString (  )   == Token.OBJECTLIT )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P5_Replace_Variable]^nameObjectLiteralMethods ( namer, rhs.getName ( lhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P8_Replace_Mix]^nameObjectLiteralMethods ( parent, namer .getCombinedName ( name , name )   ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P7_Replace_Invocation]^nameObjectLiteralMethods ( rhs, namer .getCombinedName ( functionName , functionName )   ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[P2_Replace_Operator]^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 != 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^Preconditions.checkState ( objectLiteral.getChildCount (  )    instanceof   2 == 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P3_Replace_Literal]^Preconditions.checkState ( objectLiteral.getChildCount (  )  % type == 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P3_Replace_Literal]^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == type ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^Preconditions.checkState ( valueNode.getChildCount (  )  % 2 == 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^Preconditions.checkState ( objectLiteral .getFirstChild (  )   % 2 == 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^Preconditions.checkState ( valueNode .getFirstChild (  )   % 2 == 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( keyNode.getType (  )  != Token.STRING )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^if  ( type == FUNCTION )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^if  ( type == OBJECTLIT )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^if  ( keyNode .getString (  )   == Token.STRING )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^if  ( valueNode.getType (  )  == Token.STRING )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P9_Replace_Statement]^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( type <= Token.FUNCTION )  {^130^^^^^115^145^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( type != Token.FUNCTION )  {^130^^^^^115^145^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^if  ( type == OBJECTLIT )  {^130^^^^^115^145^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^} else if  ( type != Token.OBJECTLIT )  {^137^^^^^122^152^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^} else {^137^^^^^122^152^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^}  if  ( type == Token.OBJECTLIT )  {^137^^^^^122^152^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P15_Unwrap_Block]^nameObjectLiteralMethods(valueNode, name);^137^138^139^140^^122^152^} else if  ( type == Token.OBJECTLIT )  {  nameObjectLiteralMethods ( valueNode, name ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P16_Remove_Block]^^137^138^139^140^^122^152^} else if  ( type == Token.OBJECTLIT )  {  nameObjectLiteralMethods ( valueNode, name ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P13_Insert_Block]^if  (  ( rhs.getType (  )  )  ==  ( OBJECTLIT )  )  {     nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ; }^137^^^^^122^152^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods ( objectLiteral, name ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods ( valueNode, functionName ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods (  name ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods ( valueNode ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods ( name, valueNode ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;nameObjectLiteralMethods ( valueNode, name ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^if  ( context.isEmpty (  )  )  {^134^^^^^119^149^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P9_Replace_Statement]^if  ( functionName.length (  )  == 0 )  {^134^^^^^119^149^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P15_Unwrap_Block]^namer.setFunctionName(name, valueNode);^134^135^136^^^119^149^if  ( functionName.isEmpty (  )  )  { namer.setFunctionName ( name, valueNode ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P16_Remove_Block]^^134^135^136^^^119^149^if  ( functionName.isEmpty (  )  )  { namer.setFunctionName ( name, valueNode ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( functionName, valueNode ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( name, objectLiteral ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName (  valueNode ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( name ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^namer.getCombinedName ( name, valueNode ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P13_Insert_Block]^if  ( functionName.isEmpty (  )  )  {     namer.setFunctionName ( name, valueNode ) ; }^135^^^^^120^150^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^Node functionNameNode = objectLiteral.getFirstChild (  ) ;^132^^^^^117^147^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^char functionName = functionNameNode.getchar (  ) ;^133^^^^^118^148^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String functionName = valueNode.getString (  ) ;^133^^^^^118^148^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String functionName = functionNameNode .getFirstChild (  )  ;^133^^^^^118^148^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node functionNameNode = valueNode.getFirstChild (  ) ;String functionName = functionNameNode.getString (  ) ;^133^^^^^118^148^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^Node functionNameNode = objectLiteral .getString (  )  ;^132^^^^^117^147^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^132^^^^^117^147^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^133^^^^^118^148^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^if  ( name.isEmpty (  )  )  {^134^^^^^119^149^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^if  ( functionName .length (  )   )  {^134^^^^^119^149^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( valueNode, name ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^namer .getName ( valueNode )  ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^} else if  ( type >= Token.OBJECTLIT )  {^137^^^^^122^152^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^char name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( functionName, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( context, namer.getName ( valueNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName (  namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( context.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( keyNode, namer.getName ( context )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = keyNode.getCombinedName ( context, namer.getName ( namer )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer.setFunctionName ( context, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer.getCombinedName ( context, namer .getCombinedName ( functionName , functionName )   ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^String name = namer.setFunctionName ( functionName, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^short  type = valueNode.getType (  ) ;^129^^^^^114^144^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^int type = objectLiteral.getType (  ) ;^129^^^^^114^144^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^String functionName = valueNode .getFirstChild (  )  ;^133^^^^^118^148^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( name, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^int type = valueNode .getString (  )  ;^129^^^^^114^144^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^129^^^^^114^144^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^Node functionNameNode = valueNode .getString (  )  ;^132^^^^^117^147^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^132^133^^^^117^147^Node functionNameNode = valueNode.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( type >= Token.FUNCTION )  {^130^^^^^115^145^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^} else if  ( type <= Token.OBJECTLIT )  {^137^^^^^122^152^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^if  ( context .length (  )   )  {^134^^^^^119^149^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^namer .getName ( keyNode )  ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^for  ( Node keyNode = valueNode.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^for  ( Node valueNode = objectLiteral.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^for  ( Node objectLiteral = keyNode.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^for  ( Node keyNode = objectLiteral .getString (  )  ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( keyNode.getType (  )  >= Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( keyNode.getType (  )  <= Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( keyNode.getType (  )  != Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^if  ( valueNode.getType (  )  == Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^if  ( type == FUNCTION )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^if  ( type == OBJECTLIT )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^if  ( keyNode .getString (  )   == Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P9_Replace_Statement]^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( type != Token.FUNCTION )  {^130^^^^^117^142^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( type > Token.FUNCTION )  {^130^^^^^117^142^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^if  ( type == OBJECTLIT )  {^130^^^^^117^142^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^} else if  ( type != Token.OBJECTLIT )  {^137^^^^^117^142^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P6_Replace_Expression]^} else {^137^^^^^117^142^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^}  if  ( type == Token.OBJECTLIT )  {^137^^^^^117^142^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P15_Unwrap_Block]^nameObjectLiteralMethods(valueNode, name);^137^138^139^140^^117^142^} else if  ( type == Token.OBJECTLIT )  {  nameObjectLiteralMethods ( valueNode, name ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P16_Remove_Block]^^137^138^139^140^^117^142^} else if  ( type == Token.OBJECTLIT )  {  nameObjectLiteralMethods ( valueNode, name ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P13_Insert_Block]^if  (  ( rhs.getType (  )  )  ==  ( OBJECTLIT )  )  {     nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ; }^137^^^^^117^142^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods (  name ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods ( valueNode ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods ( name, valueNode ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^nameObjectLiteralMethods ( valueNode, functionName ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;nameObjectLiteralMethods ( valueNode, name ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^nameObjectLiteralMethods ( objectLiteral, name ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^if  ( context.isEmpty (  )  )  {^134^^^^^117^142^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P9_Replace_Statement]^if  ( functionName.length (  )  == 0 )  {^134^^^^^117^142^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P15_Unwrap_Block]^namer.setFunctionName(name, valueNode);^134^135^136^^^117^142^if  ( functionName.isEmpty (  )  )  { namer.setFunctionName ( name, valueNode ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P16_Remove_Block]^^134^135^136^^^117^142^if  ( functionName.isEmpty (  )  )  { namer.setFunctionName ( name, valueNode ) ; }^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( functionName, valueNode ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( name, objectLiteral ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName (  valueNode ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( name ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^namer.getCombinedName ( name, valueNode ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P13_Insert_Block]^if  ( functionName.isEmpty (  )  )  {     namer.setFunctionName ( name, valueNode ) ; }^135^^^^^117^142^[Delete]^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^Node functionNameNode = objectLiteral.getFirstChild (  ) ;^132^^^^^117^142^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^Node functionNameNode = valueNode .getString (  )  ;^132^^^^^117^142^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^char functionName = functionNameNode.getchar (  ) ;^133^^^^^117^142^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String functionName = valueNode.getString (  ) ;^133^^^^^117^142^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node functionNameNode = valueNode.getFirstChild (  ) ;String functionName = functionNameNode.getString (  ) ;^133^^^^^117^142^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^132^^^^^117^142^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String functionName = functionNameNode .getFirstChild (  )  ;^133^^^^^117^142^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^133^^^^^117^142^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^if  ( name.isEmpty (  )  )  {^134^^^^^117^142^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^namer.getCombinedName ( name, objectLiteral ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^if  ( functionName .length (  )   )  {^134^^^^^117^142^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^namer.setFunctionName ( valueNode, name ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^namer .getName ( functionNameNode )  ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^namer .getName ( keyNode )  ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^char name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( functionName, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( context, namer.getName ( valueNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName (  namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( context.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = context.getCombinedName ( namer, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( keyNode, namer.getName ( context )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = keyNode.getCombinedName ( context, namer.getName ( namer )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer.setFunctionName ( context, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^String name = namer.setFunctionName ( functionName, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^short  type = valueNode.getType (  ) ;^129^^^^^117^142^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^int type = objectLiteral.getType (  ) ;^129^^^^^117^142^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^int type = valueNode .getString (  )  ;^129^^^^^117^142^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = namer.getCombinedName ( name, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer .getName ( keyNode )  ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer.getCombinedName ( context, namer .getCombinedName ( context , functionName )   ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^129^^^^^117^142^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^if  ( name .length (  )   )  {^134^^^^^117^142^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P2_Replace_Operator]^if  ( type >= Token.FUNCTION )  {^130^^^^^117^142^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^Node functionNameNode = objectLiteral .getString (  )  ;^132^^^^^117^142^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^132^133^^^^117^142^Node functionNameNode = valueNode.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^namer.getCombinedName ( functionName, valueNode ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^Node valueNode = objectLiteral.getNext (  ) ;^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^Node valueNode = keyNode .getType (  )  ;^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node valueNode = keyNode.getNext (  ) ;^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node functionNameNode = valueNode.getFirstChild (  ) ;Node valueNode = keyNode.getNext (  ) ;^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer.getCombinedName ( context, namer .getCombinedName ( functionName , name )   ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^String name = namer.setFunctionName ( context, namer.getName ( valueNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^long  type = valueNode.getType (  ) ;^129^^^^^117^142^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^int type = objectLiteral .getString (  )  ;^129^^^^^117^142^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^Node valueNode = valueNode.getNext (  ) ;^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^keyNode = valueNode.getNext (  ) .getNext (  )  )  {^119^^^^^104^134^keyNode = keyNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^keyNode = keyNode .getType (  )^119^^^^^104^134^keyNode = keyNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node lhs = parent.getFirstChild (  ) ;for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node functionNameNode = n.getFirstChild (  ) ;for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node functionNameNode = valueNode.getFirstChild (  ) ;for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^Node valueNode = objectLiteral.getNext (  ) ;^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^Node valueNode = keyNode .getType (  )  ;^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node valueNode = keyNode.getNext (  ) ;^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P11_Insert_Donor_Statement]^Node functionNameNode = valueNode.getFirstChild (  ) ;Node valueNode = keyNode.getNext (  ) ;^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer .getName ( functionNameNode )  ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P1_Replace_Type]^long  type = valueNode.getType (  ) ;^129^^^^^114^144^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^119^120^121^^^104^134^keyNode = keyNode.getNext (  ) .getNext (  )  )  {  Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^Node valueNode = valueNode.getNext (  ) ;^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P14_Delete_Statement]^^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P5_Replace_Variable]^String name = context.getCombinedName ( namer, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P7_Replace_Invocation]^String name = namer .getName ( keyNode )  ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[P8_Replace_Mix]^namer.getCombinedName ( functionName, valueNode ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
