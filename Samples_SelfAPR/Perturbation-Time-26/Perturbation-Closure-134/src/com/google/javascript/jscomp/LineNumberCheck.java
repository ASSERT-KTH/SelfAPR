[P8_Replace_Mix]^static final DiagnosticType MISSING_LINE_INFO ;^31^32^33^^^31^33^static final DiagnosticType MISSING_LINE_INFO = DiagnosticType.error ( "JSC_MISSING_LINE_INFO", "No source line associated with {0}" ) ;^[CLASS] LineNumberCheck   [VARIABLES] 
[P3_Replace_Literal]^private boolean requiresLineNumbers = true;^36^^^^^31^41^private boolean requiresLineNumbers = false;^[CLASS] LineNumberCheck   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^39^^^^^38^40^this.compiler = compiler;^[CLASS] LineNumberCheck  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  
[P3_Replace_Literal]^requiresLineNumbers = true;^43^^^^^42^46^requiresLineNumbers = false;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[P11_Insert_Donor_Statement]^requiresLineNumbers = true;requiresLineNumbers = false;^43^^^^^42^46^requiresLineNumbers = false;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^45^^^^^42^46^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^45^^^^^42^46^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^45^^^^^42^46^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^45^^^^^42^46^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[P14_Delete_Statement]^^45^^^^^42^46^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.SCRIPT )  {^51^^^^^48^55^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.SCRIPT )  {^51^^^^^48^55^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P15_Unwrap_Block]^requiresLineNumbers = true;^51^52^53^^^48^55^if  ( n.getType (  )  == Token.SCRIPT )  { requiresLineNumbers = true; }^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P16_Remove_Block]^^51^52^53^^^48^55^if  ( n.getType (  )  == Token.SCRIPT )  { requiresLineNumbers = true; }^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P3_Replace_Literal]^requiresLineNumbers = false;^52^^^^^48^55^requiresLineNumbers = true;^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P11_Insert_Donor_Statement]^requiresLineNumbers = false;requiresLineNumbers = true;^52^^^^^48^55^requiresLineNumbers = true;^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P3_Replace_Literal]^return false;^54^^^^^48^55^return true;^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.SCRIPT )  {^58^^^^^57^69^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.SCRIPT )  {^58^^^^^57^69^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P6_Replace_Expression]^if  ( n.getLineno() == -1 )  {^58^^^^^57^69^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P13_Insert_Block]^if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {     compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ; }^58^^^^^57^69^[Delete]^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P13_Insert_Block]^if  ( requiresLineNumbers )  {     if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {         compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;     } }^58^^^^^57^69^[Delete]^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P6_Replace_Expression]^} else {^60^^^^^57^69^} else if  ( requiresLineNumbers )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P13_Insert_Block]^if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {     compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ; }^60^^^^^57^69^[Delete]^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( SCRIPT )  )  {     requiresLineNumbers = false; }else     if  ( requiresLineNumbers )  {         if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {             compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;         }     }^60^^^^^57^69^[Delete]^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getLineno (  )  != -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P3_Replace_Literal]^if  ( n.getLineno (  )  == --8 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getLineno (  )  == -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P8_Replace_Mix]^if  ( n.getLineno (  )  == -1 / 0 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( SCRIPT )  )  {     requiresLineNumbers = false; }else     if  ( requiresLineNumbers )  {         if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {             compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;         }     }^61^^^^^57^69^[Delete]^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P13_Insert_Block]^if  ( requiresLineNumbers )  {     if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {         compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;     } }^61^^^^^57^69^[Delete]^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, MISSING_LINE_INFO, n, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_LINE_INFO, n, t, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n .getType (  )   )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P14_Delete_Statement]^^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^JSError.make ( t, parent, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^JSError.make (  n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^JSError.make ( t,  MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^JSError.make ( t, n,  n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^JSError.make ( n, t, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^JSError.make ( t, MISSING_LINE_INFO, n, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P8_Replace_Mix]^JSError.make ( t, parent, MISSING_LINE_INFO, n .getType (  )   )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P14_Delete_Statement]^^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P7_Replace_Invocation]^n .getType (  )   )  ) ;^66^^^^^57^69^n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P14_Delete_Statement]^^66^^^^^57^69^n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P5_Replace_Variable]^JSError.make ( MISSING_LINE_INFO, n, t, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P3_Replace_Literal]^if  ( n.getLineno (  )  == -2 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P8_Replace_Mix]^if  ( n.getLineno (  )  == -4 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P3_Replace_Literal]^requiresLineNumbers = true;^59^^^^^57^69^requiresLineNumbers = false;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P11_Insert_Donor_Statement]^requiresLineNumbers = true;requiresLineNumbers = false;^59^^^^^57^69^requiresLineNumbers = false;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P8_Replace_Mix]^}  if  ( requiresLineNumbers )  {^60^^^^^57^69^} else if  ( requiresLineNumbers )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P3_Replace_Literal]^if  ( n.getLineno (  )  == --2 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P7_Replace_Invocation]^if  ( n .getType (  )   == -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P8_Replace_Mix]^if  ( parent.getLineno (  )  == -4 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P7_Replace_Invocation]^JSError.make ( t, n, MISSING_LINE_INFO, n .getType (  )   )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, parent, MISSING_LINE_INFO, n .getType (  )   )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getLineno (  )  <= -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[P8_Replace_Mix]^if  ( n.getLineno (  )  == -1 + 4 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
