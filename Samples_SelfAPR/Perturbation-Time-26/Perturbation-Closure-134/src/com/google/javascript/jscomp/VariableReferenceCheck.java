[P3_Replace_Literal]^static final DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning ( "R", "Variable referenced before declaration: {0}" ) ;^44^45^46^^^44^46^static final DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning ( "JSC_REFERENCE_BEFORE_DECLARE", "Variable referenced before declaration: {0}" ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning ( "JSC_REFERENCE_BEFORE_DECLARE", "ed before deariable referenced before declaration: {0}" ) ;^44^45^46^^^44^46^static final DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning ( "JSC_REFERENCE_BEFORE_DECLARE", "Variable referenced before declaration: {0}" ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning ( "JSC_REFERENCE_BEFORE_DECLARE", "Variable referenced before declaration: {0}" ) ;^44^45^46^^^44^46^static final DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning ( "JSC_REFERENCE_BEFORE_DECLARE", "Variable referenced before declaration: {0}" ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning ( "JSC_REDECLARED", "Redeclared variable: {0}" ) ;^48^49^50^^^48^50^static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning ( "JSC_REDECLARED_VARIABLE", "Redeclared variable: {0}" ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning ( "JSC_REDECLARED_VARIABLE", "are" ) ;^48^49^50^^^48^50^static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning ( "JSC_REDECLARED_VARIABLE", "Redeclared variable: {0}" ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P8_Replace_Mix]^final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning ( "JSC_REDECLARED_VARIABLE", "Redeclared variable: {0}" ) ;^48^49^50^^^48^50^static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning ( "JSC_REDECLARED_VARIABLE", "Redeclared variable: {0}" ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P3_Replace_Literal]^static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = true;^52^^^^^47^57^static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P8_Replace_Mix]^static  boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = true;^52^^^^^47^57^static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType AMBIGUOUS_FUNCTION_DECL = DiagnosticType.warning ( "AMBIGUIOUS_FUNCTION_DECLAMB", "Ambiguious use of a named function: {0}." ) ;^54^55^56^^^54^56^static final DiagnosticType AMBIGUOUS_FUNCTION_DECL = DiagnosticType.warning ( "AMBIGUIOUS_FUNCTION_DECL", "Ambiguious use of a named function: {0}." ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType AMBIGUOUS_FUNCTION_DECL = DiagnosticType.warning ( "AMBIGUIOUS_FUNCTION_DECL", "Ambiguious use of a named function: {0}.of a named func" ) ;^54^55^56^^^54^56^static final DiagnosticType AMBIGUOUS_FUNCTION_DECL = DiagnosticType.warning ( "AMBIGUIOUS_FUNCTION_DECL", "Ambiguious use of a named function: {0}." ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType AMBIGUOUS_FUNCTION_DECL = DiagnosticType.warning ( "AMBIGUIOUS_FUNCTION_DECL", "Ambiguious use of a named function: {0}." ) ;^54^55^56^^^54^56^static final DiagnosticType AMBIGUOUS_FUNCTION_DECL = DiagnosticType.warning ( "AMBIGUIOUS_FUNCTION_DECL", "Ambiguious use of a named function: {0}." ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P8_Replace_Mix]^private Set<BasicBlock> blocksWithDeclarations ;^63^^^^^58^68^private Set<BasicBlock> blocksWithDeclarations = Sets.newHashSet (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^67^^^^^65^69^this.compiler = compiler;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  
[P11_Insert_Donor_Statement]^this.checkLevel = checkLevel;this.compiler = compiler;^67^^^^^65^69^this.compiler = compiler;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  
[P8_Replace_Mix]^this.checkLevel =  null;^68^^^^^65^69^this.checkLevel = checkLevel;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.checkLevel = checkLevel;^68^^^^^65^69^this.checkLevel = checkLevel;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  
[P5_Replace_Variable]^callback.process (  root ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^callback.process ( externs ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^callback.process ( root, externs ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[P7_Replace_Invocation]^callback .process ( root , root )  ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[P14_Delete_Statement]^^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[P7_Replace_Invocation]^for  ( Iterator<Var> it = t.getScope (  )  .getParent (  )  ; it.hasNext (  ) ; )  {^89^^^^^85^93^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P7_Replace_Invocation]^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it .next (  )  ; )  {^89^^^^^85^93^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P8_Replace_Mix]^Var v = it .hasNext (  )  ;^90^^^^^85^93^Var v = it.next (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P14_Delete_Statement]^^90^^^^^85^93^Var v = it.next (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar (  v, referenceMap.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar ( t,  referenceMap.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar ( t, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P14_Delete_Statement]^^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar ( t, referenceMap, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P14_Delete_Statement]^^89^90^91^92^^85^93^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  { Var v = it.next (  ) ; checkVar ( t, v, referenceMap.get ( v ) .references ) ; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[P7_Replace_Invocation]^blocksWithDeclarations.add (  ) ;^102^^^^^87^117^blocksWithDeclarations.clear (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^102^103^^^^87^117^blocksWithDeclarations.clear (  ) ; boolean isDeclaredInScope = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( basicBlock ) ;blocksWithDeclarations.clear (  ) ;^102^^^^^87^117^blocksWithDeclarations.clear (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;blocksWithDeclarations.clear (  ) ;^102^^^^^87^117^blocksWithDeclarations.clear (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^boolean isDeclaredInScope = true;^103^^^^^88^118^boolean isDeclaredInScope = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^boolean isUnhoistedNamedFunction = false;boolean isDeclaredInScope = false;^103^^^^^88^118^boolean isDeclaredInScope = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^boolean isUnhoistedNamedFunction = true;^104^^^^^89^119^boolean isUnhoistedNamedFunction = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^boolean isDeclaredInScope = false;boolean isUnhoistedNamedFunction = false;^104^^^^^89^119^boolean isUnhoistedNamedFunction = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P12_Insert_Condition]^if  ( reference == hoistedFn )  { Reference hoistedFn = null; }^105^^^^^90^120^Reference hoistedFn = null;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( hoistedFn.isHoistedFunction (  )  )  {^109^^^^^94^124^if  ( reference.isHoistedFunction (  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^} else {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^isUnhoistedNamedFunction = true;^114^115^116^117^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  { isUnhoistedNamedFunction = true; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^114^115^116^117^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  { isUnhoistedNamedFunction = true; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isUnhoistedNamedFunction = false;^116^^^^^114^117^isUnhoistedNamedFunction = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isUnhoistedNamedFunction = false;^116^^^^^101^131^isUnhoistedNamedFunction = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  )  .getVars (  )   )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {     isUnhoistedNamedFunction = true; }^114^^^^^99^129^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^reference .getSourceName (  )  .getParent (  )  )  )  {^115^^^^^100^130^reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^115^116^^^^100^130^reference.getNameNode (  ) .getParent (  )  )  )  { isUnhoistedNamedFunction = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isDeclaredInScope = false;^111^^^^^96^126^isDeclaredInScope = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^hoistedFn = hoistedFn;^112^^^^^97^127^hoistedFn = reference;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^hoistedFn =  null;^112^^^^^97^127^hoistedFn = reference;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^blocksWithDeclarations.add ( hoistedFn.getBasicBlock (  )  ) ;^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^110^111^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ; isDeclaredInScope = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^if  ( reference .isDeclaration (  )   )  {^109^^^^^94^124^if  ( reference.isHoistedFunction (  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^blocksWithDeclarations.add ( reference .getScope (  )   ) ;^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference.getNameNode (  )  .getVars (  )   )  )  {^115^^^^^100^130^reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( reference <= hoistedFn )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( hoistedFn == reference )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^continue;^121^122^123^^^106^136^if  ( reference == hoistedFn )  { continue; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^121^122^123^^^106^136^if  ( reference == hoistedFn )  { continue; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P9_Replace_Statement]^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isDeclaration )  {     for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {         if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {             compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;             break;         }     } }^132^^^^^117^147^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^132^^^^^117^147^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^132^^^^^117^147^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^133^134^135^136^^118^148^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^133^134^135^136^^118^148^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel,^133^134^135^136^^118^148^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^133^134^135^136^^118^148^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^133^^^^^118^148^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^133^^^^^118^148^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^133^^^^^118^148^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^reference .getSourceName (  )  , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^135^136^137^^^120^150^reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^135^136^137^^^120^150^reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( basicBlock.provablyExecutesBefore ( declaredBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS || isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS ) {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  (  isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration) )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction) )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P9_Replace_Statement]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^143^157^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^148^^^^^143^157^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isDeclaration )  {     for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {         if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {             compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;             break;         }     } }^148^^^^^143^157^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^148^^^^^143^157^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^149^150^151^152^^143^157^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^149^150^151^152^^143^157^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^149^150^151^152^^143^157^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^149^^^^^143^157^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^149^^^^^143^157^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^149^^^^^143^157^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^151^152^153^^^143^157^reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^151^152^153^^^143^157^reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^133^163^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^148^^^^^133^163^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isDeclaration )  {     for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {         if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {             compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;             break;         }     } }^148^^^^^133^163^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^148^^^^^133^163^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^149^^^^^134^164^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^149^^^^^134^164^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^149^^^^^134^164^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^151^152^153^^^136^166^reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^151^152^153^^^136^166^reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( !isDeclaration || !isDeclaredInScope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( !isDeclaration ) {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  (  !isDeclaredInScope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType() == NAME && grandparent.getString() == v.name )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == NAME )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getString (  )  == v.name )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( reference.getScope() == v.scope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  == Token.NAME || grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  != Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  != v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == Token.NAME ) {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  (  grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == NAME )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^if  ( grandparent .getString (  )   == Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^continue;^162^163^164^165^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  { continue; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^162^163^164^165^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  { continue; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( reference.getScope (  )  != v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^170^^^^^155^185^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^170^^^^^155^185^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^170^^^^^155^185^[Delete]^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference .getSourceName (  )  , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^172^173^174^^^157^187^reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^172^173^174^^^157^187^reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^Node grandparent = hoistedFn.getGrandparent (  ) ;^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^Node grandparent = reference .getNameNode (  )  ;^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^&& grandparent .getType (  )   == v.name )  {^163^^^^^148^178^&& grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^163^164^^^^148^178^&& grandparent.getString (  )  == v.name )  { continue;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( hoistedFn.getScope (  )  == v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  < Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  <= v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^if  ( grandparent.getType (  )  == Token.NAME && grandparent .getType (  )   == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( reference.getScope (  )  > v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( isUnhoistedNamedFunction )  {^178^^^^^163^193^if  ( isDeclaration )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^blocksWithDeclarations.add(basicBlock); isDeclaredInScope = true;^178^179^180^181^^163^193^if  ( isDeclaration )  { blocksWithDeclarations.add ( basicBlock ) ; isDeclaredInScope = true; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^178^179^180^181^^163^193^if  ( isDeclaration )  { blocksWithDeclarations.add ( basicBlock ) ; isDeclaredInScope = true; }^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isDeclaredInScope = false;^180^^^^^165^195^isDeclaredInScope = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^blocksWithDeclarations.add ( declaredBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^179^180^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ; isDeclaredInScope = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.clear (  ) ;blocksWithDeclarations.add ( basicBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;blocksWithDeclarations.add ( basicBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^BasicBlock basicBlock = hoistedFn .getScope (  )  ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^boolean isDeclaration = hoistedFn.isDeclaration (  ) ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^boolean isDeclaration = reference .isHoistedFunction (  )  ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^BasicBlock basicBlock = hoistedFn.getBasicBlock (  ) ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^BasicBlock basicBlock = reference .getScope (  )  ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^125^126^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ; boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;BasicBlock basicBlock = reference.getBasicBlock (  ) ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;boolean isDeclaration = reference.isDeclaration (  ) ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^for  ( Iterator<Var> it = t.getScope (  )  .getParent (  )  ; it.hasNext (  ) ; )  {^89^^^^^85^93^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P7_Replace_Invocation]^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it .next (  )  ; )  {^89^^^^^85^93^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P7_Replace_Invocation]^Var v = it .hasNext (  )  ;^90^^^^^85^93^Var v = it.next (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P14_Delete_Statement]^^90^^^^^85^93^Var v = it.next (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar (  v, referenceMap.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar ( t,  referenceMap.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar ( t, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P14_Delete_Statement]^^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^checkVar ( t, referenceMap, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P8_Replace_Mix]^Var v = 0.next (  ) ;^90^^^^^85^93^Var v = it.next (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P14_Delete_Statement]^^89^90^91^92^^85^93^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  { Var v = it.next (  ) ; checkVar ( t, v, referenceMap.get ( v ) .references ) ; }^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P5_Replace_Variable]^for  ( Iterator<Var> 2 = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^89^^^^^85^93^for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P14_Delete_Statement]^^90^91^^^^85^93^Var v = it.next (  ) ; checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[P7_Replace_Invocation]^blocksWithDeclarations.add (  ) ;^102^^^^^87^117^blocksWithDeclarations.clear (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^102^103^^^^87^117^blocksWithDeclarations.clear (  ) ; boolean isDeclaredInScope = false;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( basicBlock ) ;blocksWithDeclarations.clear (  ) ;^102^^^^^87^117^blocksWithDeclarations.clear (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;blocksWithDeclarations.clear (  ) ;^102^^^^^87^117^blocksWithDeclarations.clear (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^boolean isDeclaredInScope = true;^103^^^^^88^118^boolean isDeclaredInScope = false;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^boolean isUnhoistedNamedFunction = false;boolean isDeclaredInScope = false;^103^^^^^88^118^boolean isDeclaredInScope = false;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^boolean isUnhoistedNamedFunction = true;^104^^^^^89^119^boolean isUnhoistedNamedFunction = false;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^boolean isDeclaredInScope = false;boolean isUnhoistedNamedFunction = false;^104^^^^^89^119^boolean isUnhoistedNamedFunction = false;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P12_Insert_Condition]^if  ( reference == hoistedFn )  { Reference hoistedFn = null; }^105^^^^^90^120^Reference hoistedFn = null;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^if  ( reference .isDeclaration (  )   )  {^109^^^^^94^124^if  ( reference.isHoistedFunction (  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^if  ( hoistedFn.isHoistedFunction (  )  )  {^109^^^^^94^124^if  ( reference.isHoistedFunction (  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^} else {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^isUnhoistedNamedFunction = true;^114^115^116^117^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  { isUnhoistedNamedFunction = true; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^114^115^116^117^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  { isUnhoistedNamedFunction = true; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isUnhoistedNamedFunction = false;^116^^^^^114^117^isUnhoistedNamedFunction = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isUnhoistedNamedFunction = false;^116^^^^^101^131^isUnhoistedNamedFunction = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {     isUnhoistedNamedFunction = true; }^114^^^^^99^129^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference.getNameNode (  )  .getVars (  )   )  )  {^115^^^^^100^130^reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^115^116^^^^100^130^reference.getNameNode (  ) .getParent (  )  )  )  { isUnhoistedNamedFunction = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference .getSourceName (  )  .getParent (  )  )  )  {^115^^^^^100^130^reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isDeclaredInScope = false;^111^^^^^96^126^isDeclaredInScope = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^hoistedFn = hoistedFn;^112^^^^^97^127^hoistedFn = reference;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^hoistedFn =  null;^112^^^^^97^127^hoistedFn = reference;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^blocksWithDeclarations.add ( hoistedFn.getBasicBlock (  )  ) ;^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^blocksWithDeclarations.add ( reference .getScope (  )   ) ;^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^110^111^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ; isDeclaredInScope = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isFunctionDeclaration ( reference .getSourceName (  )  .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunctionDeclaration ( hoistedFn .getSourceName (  )  .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  )  .getVars (  )   )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( reference != hoistedFn )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( hoistedFn == reference )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^continue;^121^122^123^^^106^136^if  ( reference == hoistedFn )  { continue; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^121^122^123^^^106^136^if  ( reference == hoistedFn )  { continue; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P9_Replace_Statement]^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isDeclaration )  {     for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {         if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {             compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;             break;         }     } }^132^^^^^117^147^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^132^^^^^117^147^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^132^^^^^117^147^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^133^134^135^136^^118^148^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^133^134^135^136^^118^148^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^133^134^135^136^^118^148^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^133^^^^^118^148^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^133^^^^^118^148^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^133^^^^^118^148^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^JSError.make ( hoistedFn .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference .getSourceName (  )  , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^135^136^137^^^120^150^reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^135^136^137^^^120^150^reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( basicBlock.provablyExecutesBefore ( declaredBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS || isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS ) {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  (  isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration) )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction) )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^143^157^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^148^^^^^143^157^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isDeclaration )  {     for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {         if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {             compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;             break;         }     } }^148^^^^^143^157^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^148^^^^^143^157^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^149^150^151^152^^143^157^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^149^150^151^152^^143^157^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel,^149^150^151^152^^143^157^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^149^^^^^143^157^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^149^^^^^143^157^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^149^^^^^143^157^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^151^152^153^^^143^157^reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^149^150^151^152^^143^157^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P9_Replace_Statement]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^148^^^^^133^163^if  ( !declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^148^^^^^133^163^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( isDeclaration )  {     for  ( BasicBlock declaredBlock : blocksWithDeclarations )  {         if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {             compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;             break;         }     } }^148^^^^^133^163^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^148^^^^^133^163^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^149^^^^^134^164^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^149^^^^^134^164^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^149^^^^^134^164^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^reference .getSourceName (  )  , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^151^152^153^^^136^166^reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^151^152^153^^^136^166^reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( !isDeclaration || !isDeclaredInScope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( !isDeclaration ) {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  (  !isDeclaredInScope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType() == NAME && grandparent.getString() == v.name )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == NAME )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getString (  )  == v.name )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( reference.getScope() == v.scope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^if  ( isDeclaration && isDeclaredInScope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  == Token.NAME || grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  < Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  > v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == Token.NAME ) {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  (  grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == NAME )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^if  ( grandparent .getString (  )   == Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^if  ( grandparent.getType (  )  == Token.NAME && grandparent .getType (  )   == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^continue;^162^163^164^165^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  { continue; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^162^163^164^165^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  { continue; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( reference.getScope (  )  != v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;     break; }^170^^^^^155^185^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  (  ( reference.getScope (  )  )  ==  ( v.scope )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ; }^170^^^^^155^185^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P13_Insert_Block]^if  ( ! ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  )  {     compiler.report ( make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;     break; }^170^^^^^155^185^[Delete]^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) .getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) ,  UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,  v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^reference .getSourceName (  )  , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^172^173^174^^^157^187^reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^172^173^174^^^157^187^reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^Node grandparent = hoistedFn.getGrandparent (  ) ;^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^Node grandparent = hoistedFn .getNameNode (  )  ;^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^163^164^^^^148^178^&& grandparent.getString (  )  == v.name )  { continue;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( hoistedFn.getScope (  )  == v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel,^170^171^172^173^^155^185^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^JSError.make ( reference.getSourceName (  ) , reference .getSourceName (  )  , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  != Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P2_Replace_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  != v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^JSError.make ( hoistedFn .getNameNode (  )  , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^if  ( isUnhoistedNamedFunction )  {^178^^^^^163^193^if  ( isDeclaration )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P15_Unwrap_Block]^blocksWithDeclarations.add(basicBlock); isDeclaredInScope = true;^178^179^180^181^^163^193^if  ( isDeclaration )  { blocksWithDeclarations.add ( basicBlock ) ; isDeclaredInScope = true; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P16_Remove_Block]^^178^179^180^181^^163^193^if  ( isDeclaration )  { blocksWithDeclarations.add ( basicBlock ) ; isDeclaredInScope = true; }^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P3_Replace_Literal]^isDeclaredInScope = false;^180^^^^^165^195^isDeclaredInScope = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^blocksWithDeclarations.add ( declaredBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^179^180^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ; isDeclaredInScope = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.clear (  ) ;blocksWithDeclarations.add ( basicBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;blocksWithDeclarations.add ( basicBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^BasicBlock basicBlock = hoistedFn.getBasicBlock (  ) ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^BasicBlock basicBlock = reference .getScope (  )  ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P5_Replace_Variable]^boolean isDeclaration = hoistedFn.isDeclaration (  ) ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^boolean isDeclaration = reference .isHoistedFunction (  )  ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P8_Replace_Mix]^boolean isDeclaration = hoistedFn .isHoistedFunction (  )  ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^125^126^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ; boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;BasicBlock basicBlock = reference.getBasicBlock (  ) ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P14_Delete_Statement]^^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P11_Insert_Donor_Statement]^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;boolean isDeclaration = reference.isDeclaration (  ) ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( reference .getNameNode (  )  , reference.getNameNode (  ) , checkLevel,^149^150^151^152^^134^164^compiler.report ( JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel,^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[P7_Replace_Invocation]^Node grandparent = reference .getNameNode (  )  ;^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
