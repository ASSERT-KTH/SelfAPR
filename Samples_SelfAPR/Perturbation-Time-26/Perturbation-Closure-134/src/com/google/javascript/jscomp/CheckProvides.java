[P8_Replace_Mix]^private  CodingConvention codingConvention;^36^^^^^31^41^private final CodingConvention codingConvention;^[CLASS] CheckProvides CheckProvidesCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_PROVIDEING_PROVID", "missing goog.provide ( ''{0}'' ) " ) ;^38^39^40^^^38^40^static final DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_PROVIDE", "missing goog.provide ( ''{0}'' ) " ) ;^[CLASS] CheckProvides CheckProvidesCallback   [VARIABLES] 
[P8_Replace_Mix]^final DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_PROVIDE", "missing goog.provide ( ''{0}'' ) " ) ;^38^39^40^^^38^40^static final DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_PROVIDE", "missing goog.provide ( ''{0}'' ) " ) ;^[CLASS] CheckProvides CheckProvidesCallback   [VARIABLES] 
[P8_Replace_Mix]^private final Map<String, Node> provides  = null ;^56^^^^^51^61^private final Map<String, Node> provides = Maps.newHashMap (  ) ;^[CLASS] CheckProvides CheckProvidesCallback   [VARIABLES] 
[P8_Replace_Mix]^private final Map<String, Node> ctors  = null ;^57^^^^^52^62^private final Map<String, Node> ctors = Maps.newHashMap (  ) ;^[CLASS] CheckProvides CheckProvidesCallback   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^43^^^^^42^46^this.compiler = compiler;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P11_Insert_Donor_Statement]^this.checkLevel = checkLevel;this.compiler = compiler;^43^^^^^42^46^this.compiler = compiler;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P8_Replace_Mix]^this.checkLevel =  null;^44^^^^^42^46^this.checkLevel = checkLevel;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.checkLevel = checkLevel;^44^^^^^42^46^this.checkLevel = checkLevel;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P8_Replace_Mix]^this.codingConvention =  null.getCodingConvention (  ) ;^45^^^^^42^46^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P8_Replace_Mix]^this.codingConvention = compiler .report (  )  ;^45^^^^^42^46^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P14_Delete_Statement]^^45^^^^^42^46^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P5_Replace_Variable]^this.convention = codingConvention;^61^^^^^60^62^this.convention = convention;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CodingConvention)   CodingConvention convention [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P8_Replace_Mix]^this.convention =  null;^61^^^^^60^62^this.convention = convention;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CodingConvention)   CodingConvention convention [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[P5_Replace_Variable]^new CheckProvidesCallback ( convention ) ;^51^^^^^49^53^new CheckProvidesCallback ( codingConvention ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P5_Replace_Variable]^CheckProvidesCallback callback = new CheckProvidesCallback ( convention ) ;^50^51^^^^49^53^CheckProvidesCallback callback = new CheckProvidesCallback ( codingConvention ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P5_Replace_Variable]^new NodeTraversal ( compiler ) .traverse ( root ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P5_Replace_Variable]^new NodeTraversal (  callback ) .traverse ( root ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P5_Replace_Variable]^new NodeTraversal ( callback, compiler ) .traverse ( root ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P5_Replace_Variable]^new NodeTraversal ( compiler, callback ) .traverse ( externs ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P5_Replace_Variable]^new NodeTraversal ( compiler, root ) .traverse ( callback ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P14_Delete_Statement]^^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[P2_Replace_Operator]^if  ( providedClassName == null )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^if  ( providedClassName != parentull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^if  ( n != providedClassNameull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P8_Replace_Mix]^if  ( providedClassName != false )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P15_Unwrap_Block]^provides.put(providedClassName, n);^70^71^72^^^65^80^if  ( providedClassName != null )  { provides.put ( providedClassName, n ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P16_Remove_Block]^^70^71^72^^^65^80^if  ( providedClassName != null )  { provides.put ( providedClassName, n ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^provides.put ( providedClassName, parent ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^provides.put (  n ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^provides.put ( providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^provides.put ( n, providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P14_Delete_Statement]^^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P12_Insert_Condition]^if  ( providedClassName != null )  { provides.put ( providedClassName, n ) ; }^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P1_Replace_Type]^char providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( n, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^String providedClassName = convention.extractClassNameIfProvide ( n, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide (  parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^String providedClassName = n.extractClassNameIfProvide ( codingConvention, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P7_Replace_Invocation]^String providedClassName = codingConvention .isPrivate ( providedClassName )  ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^66^^^^^65^80^switch  ( n.getType (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide ( n, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide (  parent ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide ( n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide ( parent, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P8_Replace_Mix]^codingConvention .isPrivate ( providedClassName )  ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P14_Delete_Statement]^^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^visitFunctionNode (  parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^visitFunctionNode ( n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^visitFunctionNode ( parent, n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P7_Replace_Invocation]^visitScriptNode ( n, parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P14_Delete_Statement]^^75^76^^^^65^80^visitFunctionNode ( n, parent ) ; break;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P11_Insert_Donor_Statement]^visitScriptNode ( t, n ) ;visitFunctionNode ( n, parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^visitScriptNode ( t, parent ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^visitScriptNode (  n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^visitScriptNode ( t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P5_Replace_Variable]^visitScriptNode ( n, t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P7_Replace_Invocation]^visitFunctionNode ( t, n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P14_Delete_Statement]^^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P11_Insert_Donor_Statement]^visitFunctionNode ( n, parent ) ;visitScriptNode ( t, n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[P8_Replace_Mix]^JSDocInfo info = name.getJSDocInfo (  ) ;^84^^^^^82^103^JSDocInfo info = parent.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^84^^^^^82^103^JSDocInfo info = parent.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^info = n.getJSDocInfo (  ) ;JSDocInfo info = parent.getJSDocInfo (  ) ;^84^^^^^82^103^JSDocInfo info = parent.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( n != infoull && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( info != null ) {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( info != null && info .getVisibility (  )   )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( n != infoull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( info != null ) {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( info != true && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P15_Unwrap_Block]^name = n.getFirstChild();^90^91^92^^^82^103^if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P16_Remove_Block]^^90^91^92^^^82^103^if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^name = parent.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^info = n.getJSDocInfo (  ) ;name = n.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^name = parent.getFirstChild (  ) ;name = n.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^info = parent.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^info = n .getQualifiedName (  )  ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^info =  parent.getJSDocIparentfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^name = n.getFirstChild (  ) ;info = n.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^name = n .getType (  )  ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^JSDocInfo info = parent.getJSDocInfo (  ) ;info = n.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( info != null && info .getVisibility (  )   )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^name = name.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^name =  n.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^name = n.getFirstChild (  ) ;name = parent.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( name != null || name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( name == null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( name != null ) {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  (  name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( name != this && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P13_Insert_Block]^if  ( ! ( isPrivate ( qualifiedName )  )  )  {     Visibility visibility = info.getVisibility (  ) ;     if  ( ! ( visibility.equals ( PRIVATE )  )  )  {         ctors.put ( qualifiedName, name ) ;     } }^94^^^^^82^103^[Delete]^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P15_Unwrap_Block]^com.google.javascript.rhino.JSDocInfo.Visibility visibility = info.getVisibility(); if (!(visibility.equals(JSDocInfo.Visibility.PRIVATE))) {    ctors.put(qualifiedName, name);};^96^97^98^99^100^82^103^if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P16_Remove_Block]^^96^97^98^99^100^82^103^if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P13_Insert_Block]^if  (  ( name != null )  &&  ( name.isQualifiedName (  )  )  )  {     String qualifiedName = name.getQualifiedName (  ) ;     if  ( ! ( isPrivate ( qualifiedName )  )  )  {         Visibility visibility = info.getVisibility (  ) ;         if  ( ! ( visibility.equals ( PRIVATE )  )  )  {             ctors.put ( qualifiedName, name ) ;         }     } }^96^^^^^82^103^[Delete]^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^98^^^^^82^103^if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P15_Unwrap_Block]^ctors.put(qualifiedName, name);^98^99^100^^^82^103^if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P16_Remove_Block]^^98^99^100^^^82^103^if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put (  name ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put ( qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put ( name, qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^99^100^^^^82^103^ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^Visibility visibility = info .isConstructor (  )  ;^97^^^^^82^103^Visibility visibility = info.getVisibility (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^97^^^^^82^103^Visibility visibility = info.getVisibility (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P13_Insert_Block]^if  ( ! ( visibility.equals ( PRIVATE )  )  )  {     ctors.put ( qualifiedName, name ) ; }^98^^^^^82^103^[Delete]^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P1_Replace_Type]^char qualifiedName = name.getQualifiedName (  ) ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^95^96^97^98^99^82^103^String qualifiedName = name.getQualifiedName (  ) ; if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^ctors .get ( qualifiedName )  ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^String qualifiedName = parent .isQualifiedName (  )  ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( parent != null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( name != null && name .getQualifiedName (  )   )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^String qualifiedName = name .isQualifiedName (  )  ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( !provides.get ( ctorName )  )  {^107^^^^^105^115^if  ( !provides.containsKey ( ctorName )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( !provides .keySet (  )   )  {^107^^^^^105^115^if  ( !provides.containsKey ( ctorName )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, ctors.get(ctorName), checkLevel, com.google.javascript.jscomp.CheckProvides.MISSING_PROVIDE_WARNING, ctorName));^107^108^109^110^111^105^115^if  ( !provides.containsKey ( ctorName )  )  { compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P16_Remove_Block]^^107^108^109^110^111^105^115^if  ( !provides.containsKey ( ctorName )  )  { compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , MISSING_PROVIDE_WARNING, checkLevel, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_PROVIDE_WARNING, ctors.get ( ctorName ) , checkLevel, t, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, ctors .put ( ctorName , n )  , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P14_Delete_Statement]^^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P13_Insert_Block]^if  ( ! ( provides.containsKey ( ctorName )  )  )  {     compiler.report ( make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^108^^^^^105^115^[Delete]^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( MISSING_PROVIDE_WARNING ) , checkLevel, ctorName, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P8_Replace_Mix]^JSError.make ( t, ctors .put ( ctorName , n )  , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P14_Delete_Statement]^^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P1_Replace_Type]^for  ( char ctorName : ctors.keySet (  )  )  {^106^^^^^105^115^for  ( String ctorName : ctors.keySet (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^for  ( String ctorName : ctors.clear (  )  )  {^106^^^^^105^115^for  ( String ctorName : ctors.keySet (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P14_Delete_Statement]^^106^107^108^109^110^105^115^for  ( String ctorName : ctors.keySet (  )  )  { if  ( !provides.containsKey ( ctorName )  )  { compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( MISSING_PROVIDE_WARNING ) , checkLevel, ctorName, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^compiler .getCodingConvention (  )   ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P5_Replace_Variable]^JSError.make ( t, 4.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P8_Replace_Mix]^JSError.make ( t, null.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^provides.keySet (  ) ;^113^^^^^105^115^provides.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^provides .get ( ctorName )  ;^113^^^^^105^115^provides.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P14_Delete_Statement]^^113^^^^^105^115^provides.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P11_Insert_Donor_Statement]^ctors.clear (  ) ;provides.clear (  ) ;^113^^^^^105^115^provides.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P7_Replace_Invocation]^ctors.keySet (  ) ;^114^^^^^105^115^ctors.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P8_Replace_Mix]^ctors .get ( ctorName )  ;^114^^^^^105^115^ctors.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P14_Delete_Statement]^^114^^^^^105^115^ctors.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P11_Insert_Donor_Statement]^provides.clear (  ) ;ctors.clear (  ) ;^114^^^^^105^115^ctors.clear (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P8_Replace_Mix]^private final Map<String, Node> provides ;^56^^^^^51^61^private final Map<String, Node> provides = Maps.newHashMap (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P8_Replace_Mix]^private final Map<String, Node> ctors  = null ;^57^^^^^52^62^private final Map<String, Node> ctors = Maps.newHashMap (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P8_Replace_Mix]^private  CodingConvention convention;^58^^^^^53^63^private final CodingConvention convention;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[P8_Replace_Mix]^this.convention =  null;^61^^^^^60^62^this.convention = convention;^[CLASS] CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CodingConvention)   CodingConvention convention [VARIABLES] Map  ctors  provides  CodingConvention  convention  boolean  
[P2_Replace_Operator]^if  ( providedClassName == null )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^if  ( providedClassName != parentull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P8_Replace_Mix]^if  ( providedClassName != this )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P15_Unwrap_Block]^provides.put(providedClassName, n);^70^71^72^^^65^80^if  ( providedClassName != null )  { provides.put ( providedClassName, n ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P16_Remove_Block]^^70^71^72^^^65^80^if  ( providedClassName != null )  { provides.put ( providedClassName, n ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^provides.put ( providedClassName, parent ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^provides.put (  n ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^provides.put ( providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P14_Delete_Statement]^^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P12_Insert_Condition]^if  ( providedClassName != null )  { provides.put ( providedClassName, n ) ; }^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P1_Replace_Type]^char providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( n, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^String providedClassName = convention.extractClassNameIfProvide ( n, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide (  parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^String providedClassName = parent.extractClassNameIfProvide ( n, codingConvention ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P7_Replace_Invocation]^String providedClassName = codingConvention .isPrivate ( providedClassName )  ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^66^^^^^65^80^switch  ( n.getType (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide ( parent, parent ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide ( n, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide (  parent ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide ( n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^codingConvention.extractClassNameIfProvide ( parent, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P14_Delete_Statement]^^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P7_Replace_Invocation]^provides .get ( providedClassName )  ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^visitFunctionNode (  parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^visitFunctionNode ( n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^visitFunctionNode ( parent, n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P7_Replace_Invocation]^visitScriptNode ( n, parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P14_Delete_Statement]^^75^76^^^^65^80^visitFunctionNode ( n, parent ) ; break;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P11_Insert_Donor_Statement]^visitScriptNode ( t, n ) ;visitFunctionNode ( n, parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^visitScriptNode ( t, parent ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^visitScriptNode (  n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^visitScriptNode ( t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^visitScriptNode ( n, t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P7_Replace_Invocation]^visitFunctionNode ( t, n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P8_Replace_Mix]^visitFunctionNode ( t, parent ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P14_Delete_Statement]^^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P11_Insert_Donor_Statement]^visitFunctionNode ( n, parent ) ;visitScriptNode ( t, n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[P5_Replace_Variable]^JSDocInfo info = name.getJSDocInfo (  ) ;^84^^^^^82^103^JSDocInfo info = parent.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^84^^^^^82^103^JSDocInfo info = parent.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^info = n.getJSDocInfo (  ) ;JSDocInfo info = parent.getJSDocInfo (  ) ;^84^^^^^82^103^JSDocInfo info = parent.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( info != null ) {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( info != null && info .getVisibility (  )   )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( info != true ) {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( n != infoull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( info != null ) {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P15_Unwrap_Block]^name = n.getFirstChild();^90^91^92^^^82^103^if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P16_Remove_Block]^^90^91^92^^^82^103^if  ( info != null && info.isConstructor (  )  )  { name = n.getFirstChild (  ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^name =  parent.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^info = n.getJSDocInfo (  ) ;name = n.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^name = parent.getFirstChild (  ) ;name = n.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^info = parent.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^info = n .getQualifiedName (  )  ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^info =  parent.getJSDocIparentfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^name = n.getFirstChild (  ) ;info = n.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^JSDocInfo info = parent.getJSDocInfo (  ) ;info = n.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^name = name.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^name =  n.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P11_Insert_Donor_Statement]^name = n.getFirstChild (  ) ;name = parent.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( info != null && info .getVisibility (  )   )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( info != this && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^name = name .getType (  )  ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( name != null || name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P2_Replace_Operator]^if  ( name == null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^if  ( parent != null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  ( name != null ) {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P6_Replace_Expression]^if  (  name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( name != null && name .getQualifiedName (  )   )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( name != this ) {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P13_Insert_Block]^if  ( ! ( isPrivate ( qualifiedName )  )  )  {     Visibility visibility = info.getVisibility (  ) ;     if  ( ! ( visibility.equals ( PRIVATE )  )  )  {         ctors.put ( qualifiedName, name ) ;     } }^94^^^^^82^103^[Delete]^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( this.convention.isPrivate ( qualifiedName )  )  {^96^^^^^82^103^if  ( !this.convention.isPrivate ( qualifiedName )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P15_Unwrap_Block]^com.google.javascript.rhino.JSDocInfo.Visibility visibility = info.getVisibility(); if (!(visibility.equals(JSDocInfo.Visibility.PRIVATE))) {    ctors.put(qualifiedName, name);};^96^97^98^99^100^82^103^if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P16_Remove_Block]^^96^97^98^99^100^82^103^if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P13_Insert_Block]^if  (  ( name != null )  &&  ( name.isQualifiedName (  )  )  )  {     String qualifiedName = name.getQualifiedName (  ) ;     if  ( ! ( isPrivate ( qualifiedName )  )  )  {         Visibility visibility = info.getVisibility (  ) ;         if  ( ! ( visibility.equals ( PRIVATE )  )  )  {             ctors.put ( qualifiedName, name ) ;         }     } }^96^^^^^82^103^[Delete]^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^98^^^^^82^103^if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P15_Unwrap_Block]^ctors.put(qualifiedName, name);^98^99^100^^^82^103^if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P16_Remove_Block]^^98^99^100^^^82^103^if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put (  name ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put ( qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^ctors.put ( name, qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^99^100^^^^82^103^ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^Visibility visibility = info .isConstructor (  )  ;^97^^^^^82^103^Visibility visibility = info.getVisibility (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^97^^^^^82^103^Visibility visibility = info.getVisibility (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P13_Insert_Block]^if  ( ! ( visibility.equals ( PRIVATE )  )  )  {     ctors.put ( qualifiedName, name ) ; }^98^^^^^82^103^[Delete]^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^ctors .get ( qualifiedName )  ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P1_Replace_Type]^char qualifiedName = name.getQualifiedName (  ) ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P5_Replace_Variable]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^String qualifiedName = name .isQualifiedName (  )  ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P14_Delete_Statement]^^95^96^97^98^99^82^103^String qualifiedName = name.getQualifiedName (  ) ; if  ( !this.convention.isPrivate ( qualifiedName )  )  { Visibility visibility = info.getVisibility (  ) ; if  ( !visibility.equals ( JSDocInfo.Visibility.PRIVATE )  )  { ctors.put ( qualifiedName, name ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P8_Replace_Mix]^if  ( !this.convention .extractClassNameIfProvide ( parent , name )   )  {^96^^^^^82^103^if  ( !this.convention.isPrivate ( qualifiedName )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[P7_Replace_Invocation]^if  ( !provides.get ( ctorName )  )  {^107^^^^^105^115^if  ( !provides.containsKey ( ctorName )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^if  ( !provides .keySet (  )   )  {^107^^^^^105^115^if  ( !provides.containsKey ( ctorName )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, ctors.get(ctorName), checkLevel, com.google.javascript.jscomp.CheckProvides.MISSING_PROVIDE_WARNING, ctorName));^107^108^109^110^111^105^115^if  ( !provides.containsKey ( ctorName )  )  { compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P16_Remove_Block]^^107^108^109^110^111^105^115^if  ( !provides.containsKey ( ctorName )  )  { compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( MISSING_PROVIDE_WARNING ) , checkLevel, ctorName, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_PROVIDE_WARNING, ctors.get ( ctorName ) , checkLevel, t, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P14_Delete_Statement]^^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P13_Insert_Block]^if  ( ! ( provides.containsKey ( ctorName )  )  )  {     compiler.report ( make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^108^^^^^105^115^[Delete]^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( MISSING_PROVIDE_WARNING, ctors.get ( ctorName ) , checkLevel, t, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t, ctors.get ( ctorName ) , MISSING_PROVIDE_WARNING, checkLevel, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^JSError.make ( t, ctors.containsKey ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P14_Delete_Statement]^^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t, null.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P1_Replace_Type]^for  ( char ctorName : ctors.keySet (  )  )  {^106^^^^^105^115^for  ( String ctorName : ctors.keySet (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^for  ( String ctorName : ctors.clear (  )  )  {^106^^^^^105^115^for  ( String ctorName : ctors.keySet (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P14_Delete_Statement]^^106^107^108^109^110^105^115^for  ( String ctorName : ctors.keySet (  )  )  { if  ( !provides.containsKey ( ctorName )  )  { compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ; }^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, checkLevel.get ( ctorName ) , ctors, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , MISSING_PROVIDE_WARNING, checkLevel, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P5_Replace_Variable]^JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^JSError.make ( t, ctors .put ( ctorName , n )  , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^provides.keySet (  ) ;^113^^^^^105^115^provides.clear (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^provides .get ( ctorName )  ;^113^^^^^105^115^provides.clear (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P14_Delete_Statement]^^113^114^^^^105^115^provides.clear (  ) ; ctors.clear (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P11_Insert_Donor_Statement]^ctors.clear (  ) ;provides.clear (  ) ;^113^^^^^105^115^provides.clear (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P7_Replace_Invocation]^ctors.keySet (  ) ;^114^^^^^105^115^ctors.clear (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P14_Delete_Statement]^^114^^^^^105^115^ctors.clear (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[P11_Insert_Donor_Statement]^provides.clear (  ) ;ctors.clear (  ) ;^114^^^^^105^115^ctors.clear (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
