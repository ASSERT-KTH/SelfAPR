[P8_Replace_Mix]^listeners ;^49^^^^^48^50^listeners = Lists.newArrayList (  ) ;^[CLASS] AstChangeProxy  [METHOD] <init> [RETURN_TYPE] AstChangeProxy()   [VARIABLES] List  listeners  boolean  
[P14_Delete_Statement]^^49^^^^^48^50^listeners = Lists.newArrayList (  ) ;^[CLASS] AstChangeProxy  [METHOD] <init> [RETURN_TYPE] AstChangeProxy()   [VARIABLES] List  listeners  boolean  
[P7_Replace_Invocation]^listeners.get ( listener ) ;^56^^^^^55^57^listeners.add ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] registerListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P14_Delete_Statement]^^56^^^^^55^57^listeners.add ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] registerListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P11_Insert_Donor_Statement]^listeners.remove ( listener ) ;listeners.add ( listener ) ;^56^^^^^55^57^listeners.add ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] registerListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P7_Replace_Invocation]^listeners.get ( listener ) ;^63^^^^^62^64^listeners.remove ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] unregisterListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P7_Replace_Invocation]^listeners .size (  )  ;^63^^^^^62^64^listeners.remove ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] unregisterListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P14_Delete_Statement]^^63^^^^^62^64^listeners.remove ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] unregisterListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P11_Insert_Donor_Statement]^listeners.add ( listener ) ;listeners.remove ( listener ) ;^63^^^^^62^64^listeners.remove ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] unregisterListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P11_Insert_Donor_Statement]^listener.nodeRemoved ( node ) ;listeners.remove ( listener ) ;^63^^^^^62^64^listeners.remove ( listener ) ;^[CLASS] AstChangeProxy  [METHOD] unregisterListener [RETURN_TYPE] void   ChangeListener listener [VARIABLES] List  listeners  ChangeListener  listener  boolean  
[P14_Delete_Statement]^^71^^^^^69^73^listener.nodeRemoved ( node ) ;^[CLASS] AstChangeProxy  [METHOD] notifyOfRemoval [RETURN_TYPE] void   Node node [VARIABLES] List  listeners  ChangeListener  listener  boolean  Node  node  
[P11_Insert_Donor_Statement]^parent.removeChild ( node ) ;listener.nodeRemoved ( node ) ;^71^^^^^69^73^listener.nodeRemoved ( node ) ;^[CLASS] AstChangeProxy  [METHOD] notifyOfRemoval [RETURN_TYPE] void   Node node [VARIABLES] List  listeners  ChangeListener  listener  boolean  Node  node  
[P11_Insert_Donor_Statement]^listeners.remove ( listener ) ;listener.nodeRemoved ( node ) ;^71^^^^^69^73^listener.nodeRemoved ( node ) ;^[CLASS] AstChangeProxy  [METHOD] notifyOfRemoval [RETURN_TYPE] void   Node node [VARIABLES] List  listeners  ChangeListener  listener  boolean  Node  node  
[P11_Insert_Donor_Statement]^notifyOfRemoval ( node ) ;listener.nodeRemoved ( node ) ;^71^^^^^69^73^listener.nodeRemoved ( node ) ;^[CLASS] AstChangeProxy  [METHOD] notifyOfRemoval [RETURN_TYPE] void   Node node [VARIABLES] List  listeners  ChangeListener  listener  boolean  Node  node  
[P7_Replace_Invocation]^parent.replaceChild ( node ) ;^79^^^^^78^82^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P7_Replace_Invocation]^parent .removeChild ( node )  ;^79^^^^^78^82^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P14_Delete_Statement]^^79^^^^^78^82^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P11_Insert_Donor_Statement]^parent.addChildBefore ( newChild, node ) ;parent.removeChild ( node ) ;^79^^^^^78^82^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, block ) ;parent.removeChild ( node ) ;^79^^^^^78^82^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P11_Insert_Donor_Statement]^listener.nodeRemoved ( node ) ;parent.removeChild ( node ) ;^79^^^^^78^82^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P11_Insert_Donor_Statement]^notifyOfRemoval ( node ) ;parent.removeChild ( node ) ;^79^^^^^78^82^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P5_Replace_Variable]^notifyOfRemoval ( parent ) ;^81^^^^^78^82^notifyOfRemoval ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P7_Replace_Invocation]^registerListener ( node ) ;^81^^^^^78^82^notifyOfRemoval ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P14_Delete_Statement]^^81^82^^^^78^82^notifyOfRemoval ( node ) ; }^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[P5_Replace_Variable]^replaceWith ( node, node, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P5_Replace_Variable]^replaceWith ( parent, parent, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P5_Replace_Variable]^replaceWith ( parent, node, Lists.newArrayList ( parent )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P5_Replace_Variable]^replaceWith (  node, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P5_Replace_Variable]^replaceWith ( parent,  Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P5_Replace_Variable]^replaceWith ( replacement, node, Lists.newArrayList ( parent )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P5_Replace_Variable]^replaceWith ( parent, replacement, Lists.newArrayList ( node )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P14_Delete_Statement]^^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[P3_Replace_Literal]^Preconditions.checkNotNull ( replacements, "" "replacements\" is null." ) ;^95^^^^^80^110^Preconditions.checkNotNull ( replacements, "\"replacements\" is null." ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^95^^^^^80^110^Preconditions.checkNotNull ( replacements, "\"replacements\" is null." ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P1_Replace_Type]^short  size = replacements.size (  ) ;^97^^^^^82^112^int size = replacements.size (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^int size = replacements.size() - 9 ;^97^^^^^82^112^int size = replacements.size (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^int size = replacements.get (  ) ;^97^^^^^82^112^int size = replacements.size (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^int size = replacements.size() + 4 ;^97^^^^^82^112^int size = replacements.size (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^97^^^^^82^112^int size = replacements.size (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P2_Replace_Operator]^if  (  ( size == 1 )  || node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P2_Replace_Operator]^if  (  ( size != 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^if  (  ( size == size )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( size )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^if  (  ( parentType == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^if  (  ( size == 1 )  && parent.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^if  (  ( node == 1 )  && size.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^if  (  ( size == 1 )  && replacements.checkTreeEqualsSilent ( node.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P6_Replace_Expression]^if  (  ( size == 1 )  ) {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P6_Replace_Expression]^if  (  node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P6_Replace_Expression]^if  ( size == 1 )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P15_Unwrap_Block]^return ;^99^100^101^102^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {  return; }^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P16_Remove_Block]^^99^100^101^102^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {  return; }^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( -3 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^if  (  ( size == 1 )  && node .getParent (  )   )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P13_Insert_Block]^if  (  ( size == 1 )  &&  ( node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  )  {     return ; }^99^^^^^84^114^[Delete]^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get (  )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P1_Replace_Type]^short  parentType = parent.getType (  ) ;^104^^^^^89^119^int parentType = parent.getType (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^int oldParentType = parent.getType (  ) ;^104^^^^^89^119^int parentType = parent.getType (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^int parentType = parent.removeChild (  ) ;^104^^^^^89^119^int parentType = parent.getType (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^int oldParentType = parent.removeChild (  ) ;^104^^^^^89^119^int parentType = parent.getType (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^104^^^^^89^119^int parentType = parent.getType (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P2_Replace_Operator]^Preconditions.checkState ( size == 1 && parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P2_Replace_Operator]^Preconditions.checkState ( size != 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^Preconditions.checkState ( size == parentType || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^Preconditions.checkState ( parentType == 1 || size == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^Preconditions.checkState ( parentType == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P2_Replace_Operator]^if  ( parentType == Token.LABEL || size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P2_Replace_Operator]^if  ( parentType >= Token.LABEL && size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P2_Replace_Operator]^if  ( parentType == Token.LABEL && size == 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P3_Replace_Literal]^if  ( parentType == Token.LABEL && size != -5 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^if  ( size == Token.LABEL && size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^if  ( parentType == Token.LABEL && parentType != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^if  ( size == Token.LABEL && parentType != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P6_Replace_Expression]^if  ( parentType == Token.LABEL ) {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P6_Replace_Expression]^if  (  size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P6_Replace_Expression]^if  ( parentType == LABEL )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^if  (  size != 0  )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node block = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BLOCK); for (com.google.javascript.rhino.Node newChild : replacements) {    com.google.javascript.rhino.Node oldParent = newChild.getParent();    block.addChildToBack(newChild);}; parent.replaceChild(node, block);^111^112^113^114^115^96^126^if  ( parentType == Token.LABEL && size != 1 )  { Node block = new Node ( Token.BLOCK ) ; for  ( Node newChild : replacements )  { Node oldParent = newChild.getParent (  ) ; block.addChildToBack ( newChild ) ; }^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P16_Remove_Block]^^111^112^113^114^115^96^126^if  ( parentType == Token.LABEL && size != 1 )  { Node block = new Node ( Token.BLOCK ) ; for  ( Node newChild : replacements )  { Node oldParent = newChild.getParent (  ) ; block.addChildToBack ( newChild ) ; }^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^Node oldParent = parent.getParent (  ) ;^122^^^^^111^127^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^Node oldParent = newChild.removeChild (  ) ;^122^^^^^111^127^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^Node oldParent = oldParent.getParent (  ) ;^122^^^^^111^127^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^122^123^^^^111^127^Node oldParent = newChild.getParent (  ) ; parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore ( newChild, oldParent ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore (  node ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore ( newChild ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore ( node, newChild ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^parent.addChildBefore ( parent, node ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^123^124^^^^111^127^parent.addChildBefore ( newChild, node ) ; }^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^block.addChildToBack ( newChild ) ;parent.addChildBefore ( newChild, node ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.removeChild ( node ) ;parent.addChildBefore ( newChild, node ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.removeChild ( oldParent ) ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^parent.replaceChild ( node ) ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^parent .removeChild ( node )  ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.addChildBefore ( newChild, node ) ;parent.removeChild ( node ) ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, block ) ;parent.removeChild ( node ) ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^listener.nodeRemoved ( node ) ;parent.removeChild ( node ) ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^notifyOfRemoval ( node ) ;parent.removeChild ( node ) ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^Node block = new Node ( Token.this ) ;^112^^^^^97^127^Node block = new Node ( Token.BLOCK ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^Node oldParent = parent.getParent (  ) ;^114^^^^^99^129^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^Node oldParent = newChild.removeChild (  ) ;^114^^^^^99^129^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^Node oldParent = newChild .getType (  )  ;^114^^^^^99^129^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^Node oldParent = parent.removeChild (  ) ;^114^^^^^99^129^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^114^^^^^99^129^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^block.addChildToBack ( parent ) ;^115^^^^^100^130^block.addChildToBack ( newChild ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^block.addChildBefore ( newChild ) ;^115^^^^^100^130^block.addChildToBack ( newChild ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^block .addChildBefore ( node , newChild )  ;^115^^^^^100^130^block.addChildToBack ( newChild ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^115^^^^^100^130^block.addChildToBack ( newChild ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.addChildBefore ( newChild, node ) ;block.addChildToBack ( newChild ) ;^115^^^^^100^130^block.addChildToBack ( newChild ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.replaceChild ( oldParent, block ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.replaceChild ( node, parent ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.replaceChild (  block ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.replaceChild ( node ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.replaceChild ( block, node ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^parent .removeChild ( node , node )  ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.removeChild ( node ) ;parent.replaceChild ( node, block ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^Node block = new Node ( Token.4 ) ;^112^^^^^97^127^Node block = new Node ( Token.BLOCK ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^Node oldParent = parent.getParent (  ) ;^122^^^^^107^137^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^Node oldParent = newChild.removeChild (  ) ;^122^^^^^107^137^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^Node oldParent = newChild .getType (  )  ;^122^^^^^107^137^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^114^115^^^^99^129^Node oldParent = newChild.getParent (  ) ; block.addChildToBack ( newChild ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.replaceChild ( node, oldParent ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^parent.replaceChild ( parent, block ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^122^^^^^107^137^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore ( newChild, oldParent ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore (  node ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore ( newChild ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.addChildBefore ( node, newChild ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^parent .addChildToBack ( oldParent )  ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^parent.addChildBefore ( parent, node ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^123^124^^^^108^138^parent.addChildBefore ( newChild, node ) ; }^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^block.addChildToBack ( newChild ) ;parent.addChildBefore ( newChild, node ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.removeChild ( node ) ;parent.addChildBefore ( newChild, node ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^parent.removeChild ( oldParent ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^parent.replaceChild ( node ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P8_Replace_Mix]^parent.replaceChild ( oldParent ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.addChildBefore ( newChild, node ) ;parent.removeChild ( node ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, block ) ;parent.removeChild ( node ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^listener.nodeRemoved ( node ) ;parent.removeChild ( node ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P11_Insert_Donor_Statement]^notifyOfRemoval ( node ) ;parent.removeChild ( node ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P5_Replace_Variable]^notifyOfRemoval ( parent ) ;^128^^^^^113^143^notifyOfRemoval ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P7_Replace_Invocation]^registerListener ( node ) ;^128^^^^^113^143^notifyOfRemoval ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[P14_Delete_Statement]^^128^129^^^^113^143^notifyOfRemoval ( node ) ; }^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
