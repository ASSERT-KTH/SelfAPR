[P8_Replace_Mix]^private  Map<Var, ReferenceCollection> referenceMap = Maps.newHashMap (  ) ;^52^53^^^^52^53^private final Map<Var, ReferenceCollection> referenceMap = Maps.newHashMap (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^private  Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock> (  ) ;^58^^^^^53^63^private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock> (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^68^^^^^63^73^private final AbstractCompiler compiler;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^Behavior DO_NOTHING_BEHAVIOR = new Behavior (  )  {^216^^^^^216^220^static Behavior DO_NOTHING_BEHAVIOR = new Behavior (  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^List<Reference> references  = null ;^228^^^^^223^233^List<Reference> references = Lists.newArrayList (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^private  final Set<Integer> DECLARATION_PARENTS = ImmutableSet.of ( Token.VAR, Token.FUNCTION, Token.CATCH ) ;^368^369^^^^368^369^private static final Set<Integer> DECLARATION_PARENTS = ImmutableSet.of ( Token.VAR, Token.FUNCTION, Token.CATCH ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^private  Node parent;^372^^^^^367^377^private final Node parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^private  Node grandparent;^373^^^^^368^378^private final Node grandparent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^private  BasicBlock basicBlock;^374^^^^^369^379^private final BasicBlock basicBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P1_Replace_Type]^private final char sourceName;^376^^^^^371^381^private final String sourceName;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P8_Replace_Mix]^private  boolean isHoisted;^494^^^^^489^499^private final boolean isHoisted;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [VARIABLES] 
[P5_Replace_Variable]^this ( compiler, DO_NOTHING_BEHAVIOR, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this (  behavior, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( compiler,  Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( behavior, compiler, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^this.compiler =  null;^90^^^^^88^93^this.compiler = compiler;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.varFilter = varFilter;this.compiler = compiler;^90^^^^^88^93^this.compiler = compiler;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.scope = scope;this.compiler = compiler;^90^^^^^88^93^this.compiler = compiler;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this.behavior = DO_NOTHING_BEHAVIOR;^91^^^^^88^93^this.behavior = behavior;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^this.varFilter =  null;^92^^^^^88^93^this.varFilter = varFilter;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.varFilter = varFilter;^92^^^^^88^93^this.varFilter = varFilter;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.parent = parent;this.varFilter = varFilter;^92^^^^^88^93^this.varFilter = varFilter;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( grandparent, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( nameNode, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( nameNode, parent, parent.getParent (  ) , parent, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this (  parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( nameNode,  parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( nameNode, parent, parent.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( nameNode, paren parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( parent, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( nameNode, basicBlock, parent.getParent (  ) , parent, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this ( nameNode, parent, parent.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^this ( nameNode, parent, parent .getString (  )  , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t .getSourceName (  )  , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t .getScope (  )   ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^this ( nameNode, grandparent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^t .getScope (  )   ) ;^381^^^^^378^382^t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^381^^^^^378^382^t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this.nameNode = parent;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.nameNode = nameNode;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.scope = scope;this.nameNode = nameNode;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.parent = parent;this.nameNode = nameNode;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this.parent = nameNode;^395^^^^^392^400^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.grandparent = grandparent;this.parent = parent;^395^^^^^392^400^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.parent = parent;^395^^^^^392^400^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.parent = parent;^395^^^^^392^400^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.varFilter = varFilter;this.parent = parent;^395^^^^^392^400^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this.grandparent = parent;^396^^^^^392^400^this.grandparent = grandparent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.parent = parent;this.grandparent = grandparent;^396^^^^^392^400^this.grandparent = grandparent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this.basicBlock = parent;^397^^^^^392^400^this.basicBlock = basicBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.scope = scope;this.basicBlock = basicBlock;^397^^^^^392^400^this.basicBlock = basicBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^this.scope =  null;^398^^^^^392^400^this.scope = scope;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.scope = scope;^398^^^^^392^400^this.scope = scope;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.scope = scope;^398^^^^^392^400^this.scope = scope;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.scope = scope;^398^^^^^392^400^this.scope = scope;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.basicBlock = basicBlock;this.scope = scope;^398^^^^^392^400^this.scope = scope;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^this.sourceName =  null;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.sourceName = sourceName;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.scope = scope;this.sourceName = sourceName;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.parent = parent;this.sourceName = sourceName;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this.parent = basicBlock;^502^^^^^501^506^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.grandparent = grandparent;this.parent = parent;^502^^^^^501^506^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.parent = parent;^502^^^^^501^506^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.parent = parent;^502^^^^^501^506^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this.varFilter = varFilter;this.parent = parent;^502^^^^^501^506^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^this.isHoisted = NodeUtil.isAssignmentOp ( root ) ;^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^this.isHoisted = NodeUtil .isAssignmentOp ( nameNode )  ;^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^this.isHoisted = NodeUtil.isAssignmentOp ( parent ) ;^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return v.get ( referenceMap ) ;^107^^^^^106^108^return referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getReferenceCollection [RETURN_TYPE] ReferenceCollectingCallback$ReferenceCollection   Var v [VARIABLES] Set  DECLARATION_PARENTS  Var  v  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return referenceMap .put ( v , this )  ;^107^^^^^106^108^return referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getReferenceCollection [RETURN_TYPE] ReferenceCollectingCallback$ReferenceCollection   Var v [VARIABLES] Set  DECLARATION_PARENTS  Var  v  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^107^^^^^106^108^return referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getReferenceCollection [RETURN_TYPE] ReferenceCollectingCallback$ReferenceCollection   Var v [VARIABLES] Set  DECLARATION_PARENTS  Var  v  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.NAME )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( v != null && varFilter.apply(v) )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( v != null )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.NAME )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.VAR )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^com.google.javascript.jscomp.Scope.Var v = t.getScope().getVar(n.getString()); if ((v != null) && (varFilter.apply(v))) {    addReference(t, v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, parent, t, blockStack.peek()));};^115^116^117^118^119^114^126^if  ( n.getType (  )  == Token.NAME )  { Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; if  ( v != null && varFilter.apply ( v )  )  { addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^115^116^117^118^119^114^126^if  ( n.getType (  )  == Token.NAME )  { Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; if  ( v != null && varFilter.apply ( v )  )  { addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( v != null )  &&  ( varFilter.apply ( v )  )  )  {     addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^115^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( v != null || varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( v == null && varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( n != vull && varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( varFilter != null && v.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( v != null ) {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  (  varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( v != this ) {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^addReference(t, v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, parent, t, blockStack.peek()));^117^118^119^120^^114^126^if  ( v != null && varFilter.apply ( v )  )  { addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^117^118^119^120^^114^126^if  ( v != null && varFilter.apply ( v )  )  { addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;     if  (  ( v != null )  &&  ( varFilter.apply ( v )  )  )  {         addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;     } }^117^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( referenceInfo == null )  {     referenceInfo = new ReferenceCollection (  ) ;     referenceMap.put ( v, referenceInfo ) ; }^117^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^new ReferenceCollection (  )   )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^new Reference (  parent, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^new Reference ( n,  t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^new Reference ( n, paren t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( root, parent, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( n, root, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( n, parent, t, null.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( n, parent, t.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( t, parent, n, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( parent, n, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( n, t, parent, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( n, parent, blockStack, t.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^new Reference ( n, parent, t, blockStack.pop (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^new Reference ( root, parent, t, blockStack.pop (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^addReference ( t, v, addnew ReferenceCollection (  )   )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^addReference (  v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^addReference ( t,  new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^addReference ( t, v, new Reference (  parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^addReference ( t, v, new Reference ( n,  t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, v, rootew Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, v, new Reference ( n, root, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, v, new Reference ( n, parent, t.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( parent, v, new Reference ( n, t, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, blockStack, new Reference ( n, parent, t, v.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, v, parentew Reference ( n, n, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, v, blockStackew Reference ( n, parent, t, n.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^addReference ( t, v, new Reference ( n, parent, t, blockStack.pop (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( referenceInfo == null )  {     referenceInfo = new ReferenceCollection (  ) ;     referenceMap.put ( v, referenceInfo ) ; }^118^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.pop (  ) ; }^118^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( v != null )  &&  ( varFilter.apply ( v )  )  )  {     addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^118^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^new Reference ( parent, parent, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Var v = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Var v = n.getScope (  ) .getVar ( t.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Var v = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Node n = t.getScope (  ) .getRootNode (  ) ;Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Var v = t.getScope (  ) .getVar ( root.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Var v = t .getSourceName (  )  .getVar ( n.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Var v = t.getScope (  )  .getRootNode (  )  ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( blockStack, v, new Reference ( n, parent, t, t.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, parent, new Reference ( n, v, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( n, v, tew Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^addReference ( t, v, rootew Reference ( n, parent, t, blockStack.pop (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( v != parentull && varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( v != varFilterull && n.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( v != false ) {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( n, parent, t, 0.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( n, blockStack, t, parent.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^new Reference ( n, nameNode, t, blockStack.pop (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( v, t, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^new Reference ( blockStack, parent, t, n.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Var v = t .getSourceName (  )  .getVar ( parent.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.NAME )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^addReference ( t, n, vew Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isBlockBoundary ( parent, parent )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isBlockBoundary ( n, root )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isBlockBoundary (  parent )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isBlockBoundary ( n )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isBlockBoundary ( parent, n )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( process ( n, parent )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( isBlockBoundary ( root, parent )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^blockStack.pop();^123^124^125^^^114^126^if  ( isBlockBoundary ( n, parent )  )  { blockStack.pop (  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^123^124^125^^^114^126^if  ( isBlockBoundary ( n, parent )  )  { blockStack.pop (  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ; }^123^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^blockStack.peek (  ) ;^124^^^^^114^126^blockStack.pop (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^124^^^^^114^126^blockStack.pop (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.pop (  ) ; }^123^^^^^114^126^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Node n = t .getSourceName (  )  .getRootNode (  ) ;^132^^^^^131^135^Node n = t.getScope (  ) .getRootNode (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;Node n = t.getScope (  ) .getRootNode (  ) ;^132^^^^^131^135^Node n = t.getScope (  ) .getRootNode (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^132^^^^^131^135^Node n = t.getScope (  ) .getRootNode (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;Node n = t.getScope (  ) .getRootNode (  ) ;^132^^^^^131^135^Node n = t.getScope (  ) .getRootNode (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^BasicBlock parent  =  blockStack.peek (  ) ;^133^^^^^131^135^BasicBlock parent = blockStack.isEmpty (  )  ? null : blockStack.peek (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^BasicBlock parent  =  null ;^133^^^^^131^135^BasicBlock parent = blockStack.isEmpty (  )  ? null : blockStack.peek (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^BasicBlock parent = blockStack.isEmpty (  )  ? null : blockStack.pop (  ) ;^133^^^^^131^135^BasicBlock parent = blockStack.isEmpty (  )  ? null : blockStack.peek (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^133^^^^^131^135^BasicBlock parent = blockStack.isEmpty (  )  ? null : blockStack.peek (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^133^134^^^^131^135^BasicBlock parent = blockStack.isEmpty (  )  ? null : blockStack.peek (  ) ; blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^blockStack.push ( blockStack.push (  new ReferenceCollection (  )   ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^blockStack.push ( new BasicBlock (  n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^blockStack.push ( new BasicBlock ( parent )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^blockStack.push ( rootew BasicBlock ( parent, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^blockStack.push ( parentew BasicBlock ( n, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^blockStack.push ( new BasicBlock ( basicBlock, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^blockStack .peek (  )  ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;blockStack.push ( new BasicBlock ( parent, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^blockStack.peek (  ) ;^141^^^^^140^143^blockStack.pop (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^141^^^^^140^143^blockStack.pop (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^behavior.afterExitScope (  referenceMap ) ;^142^^^^^140^143^behavior.afterExitScope ( t, referenceMap ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^behavior.afterExitScope ( t ) ;^142^^^^^140^143^behavior.afterExitScope ( t, referenceMap ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^behavior.afterExitScope ( referenceMap, t ) ;^142^^^^^140^143^behavior.afterExitScope ( t, referenceMap ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^142^^^^^140^143^behavior.afterExitScope ( t, referenceMap ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^if  ( isBlockBoundary (  parent )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^if  ( isBlockBoundary ( n )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isBlockBoundary ( n, root )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( process ( n, parent )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( isBlockBoundary ( root, parent )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));^151^152^153^^^148^155^if  ( isBlockBoundary ( n, parent )  )  { blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^151^152^153^^^148^155^if  ( isBlockBoundary ( n, parent )  )  { blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.pop (  ) ; }^151^^^^^148^155^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^blockStack.push ( blockStack.push (  new Reference ( n, parent, t, blockStack.peek (  )  )  , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^blockStack.push ( parentew BasicBlock ( blockStack.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^blockStack.push ( new BasicBlock ( blockStack.peek (  )  )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^blockStack.push ( blockStackew BasicBlock ( n.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^blockStack.push ( new BasicBlock ( blockStack.pop (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^blockStack.push ( rootew BasicBlock ( blockStack.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.pop (  ) ; }^152^^^^^148^155^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ; }^152^^^^^148^155^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^blockStack.push ( rootew BasicBlock ( blockStack.pop (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isBlockBoundary ( parent, n )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^blockStack.push ( new BasicBlock ( null.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return false;^154^^^^^148^155^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( parent == null )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( root != null )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( parent != rootull )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( n != parentull )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( n != parent.getFirstChild() )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( parent != true )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( init == null )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( referenceInfo == null )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return false;^177^^^^^160^190^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return n <= parent.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return root != parent.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return n != root.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return parent != n.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return n != parent .getString (  )  ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return false ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^switch  ( root.getType (  )  )  {^162^^^^^160^190^switch  ( parent.getType (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return n != nameNode.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return n == parent.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return n.getType (  )  != Token.CASE;^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return parent.getType (  )  == Token.CASE;^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return n.getType (  )   &&  Token.CASE;^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { return n.getType (  )  == Token.CASE; }^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.VAR )  { return n.getType (  )  == Token.CASE; }^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return root.getType (  )  == Token.CASE;^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^ReferenceCollection referenceInfo = v.get ( referenceMap ) ;^194^^^^^192^202^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P7_Replace_Invocation]^ReferenceCollection referenceInfo = referenceMap .put ( v , referenceInfo )  ;^194^^^^^192^202^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^194^^^^^192^202^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^194^^^^^192^202^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P14_Delete_Statement]^^194^^^^^192^202^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P2_Replace_Operator]^if  ( referenceInfo != null )  {^195^^^^^192^202^if  ( referenceInfo == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P8_Replace_Mix]^if  ( referenceInfo == true )  {^195^^^^^192^202^if  ( referenceInfo == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P9_Replace_Statement]^if  ( parent != null )  {^195^^^^^192^202^if  ( referenceInfo == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P9_Replace_Statement]^if  ( init == null )  {^195^^^^^192^202^if  ( referenceInfo == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P15_Unwrap_Block]^referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection(); referenceMap.put(v, referenceInfo);^195^196^197^198^^192^202^if  ( referenceInfo == null )  { referenceInfo = new ReferenceCollection (  ) ; referenceMap.put ( v, referenceInfo ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P16_Remove_Block]^^195^196^197^198^^192^202^if  ( referenceInfo == null )  { referenceInfo = new ReferenceCollection (  ) ; referenceMap.put ( v, referenceInfo ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P13_Insert_Block]^if  (  ( v != null )  &&  ( varFilter.apply ( v )  )  )  {     addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^195^^^^^192^202^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P4_Replace_Constructor]^referenceInfo = referenceInfo =  new Reference ( n, parent, t, blockStack.peek (  )  )  ;^196^^^^^192^202^referenceInfo = new ReferenceCollection (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P8_Replace_Mix]^referenceInfo =  new Reference ( n, parent, t, blockStack.peek (  )  )  ;^196^^^^^192^202^referenceInfo = new ReferenceCollection (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P13_Insert_Block]^if  ( referenceInfo == null )  {     referenceInfo = new ReferenceCollection (  ) ;     referenceMap.put ( v, referenceInfo ) ; }^196^^^^^192^202^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.pop (  ) ; }^196^^^^^192^202^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P5_Replace_Variable]^referenceMap.put (  referenceInfo ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P5_Replace_Variable]^referenceMap.put ( v ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P5_Replace_Variable]^referenceMap.put ( referenceInfo, v ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P14_Delete_Statement]^^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;referenceMap.put ( v, referenceInfo ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^referenceInfo.add ( reference, t, v ) ;referenceMap.put ( v, referenceInfo ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;referenceMap.put ( v, referenceInfo ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;referenceMap.put ( v, referenceInfo ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P5_Replace_Variable]^referenceInfo.add (  t, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P5_Replace_Variable]^referenceInfo.add ( reference,  v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P5_Replace_Variable]^referenceInfo.add ( reference, t ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P7_Replace_Invocation]^referenceInfo .add ( reference , t , v )  ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P14_Delete_Statement]^^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;referenceInfo.add ( reference, t, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;referenceInfo.add ( reference, t, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^referenceMap.put ( v, referenceInfo ) ;referenceInfo.add ( reference, t, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;referenceInfo.add ( reference, t, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;referenceInfo.add ( reference, t, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[P7_Replace_Invocation]^references.get ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^references .add ( reference , t , v )  ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceInfo.add ( reference, t, v ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceMap.put ( v, referenceInfo ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Reference  reference  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^long  size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() + 5 ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() + 0 ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^int size = this.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return referenceMap.get ( v ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( size != 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( size ==  )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( i == 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( init == null )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return false;^245^246^247^^^243^266^if  ( size == 0 )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^245^246^247^^^243^266^if  ( size == 0 )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( init == null )  {     return false; }^245^^^^^243^266^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( currentBlock.isHoisted )  {     return false; }^245^^^^^243^266^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^246^^^^^243^266^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Reference init = ReferenceCollection (  ) ;^251^^^^^243^266^Reference init = getInitializingReference (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^251^^^^^243^266^Reference init = getInitializingReference (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( init != null )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( init == this )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( parent != null )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( size == 0 )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( referenceInfo == null )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return false;^252^253^254^^^243^266^if  ( init == null )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^252^253^254^^^243^266^if  ( init == null )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( currentBlock.isHoisted )  {     return false; }^252^^^^^243^266^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( !assigned )  {     assigned = true; }else {     return false; }^252^^^^^243^266^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( size == 0 )  {     return false; }^252^^^^^243^266^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^253^^^^^243^266^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^Preconditions.checkState ( references.get ( size ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Preconditions.checkState ( references.get ( 0 ) .isLhsOfForInExpression (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Preconditions.checkState ( references.add ( 0 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^Preconditions.checkState ( references.get ( -3 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Preconditions.checkState ( references.get ( 0 )  .isVarDeclaration (  )   ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^Preconditions.checkState ( references.get ( 8 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^256^257^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ; BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^BasicBlock initBlock = init.isLhsOfForInExpression (  ) ;^257^^^^^243^266^BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^BasicBlock initBlock = init .getNameNode (  )  ;^257^^^^^243^266^BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^257^^^^^243^266^BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;BasicBlock initBlock = init.getBasicBlock (  ) ;^257^^^^^243^266^BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( !initBlock.BasicBlock ( references.get ( i ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .isLhsOfForInExpression (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( !initBlock.provablyExecutesBefore ( references.get ( i )  .getNameNode (  )   )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( !initBlock.provablyExecutesBefore ( references.add ( i ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( !initBlock .BasicBlock ( parent , root )   )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return false;^259^260^261^262^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^259^260^261^262^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^261^^^^^243^266^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^for  (  short  i = 1; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^for  ( int i = 1; i > size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^for  ( int i = i; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( sizent i = 1; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( sizent i = 1; i < i; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( !initBlock.provablyExecutesBefore ( references.get ( size ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( !initBlock .BasicBlock ( parent , nameNode )   )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( !initBlock.provablyExecutesBefore ( i.get ( references ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( ! ( initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  )  {     return false; }^259^^^^^243^266^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^references.get ( i ) .isLhsOfForInExpression (  )  )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^references.add ( i ) .getBasicBlock (  )  )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^references.get ( size ) .getBasicBlock (  )  )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^260^261^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  { return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^references.add ( size ) .getBasicBlock (  )  )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^for  ( int i = 5; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( !initBlock .BasicBlock ( parent , parent )   )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return false;^265^^^^^243^266^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Reference maybeInit = index.get ( references ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Reference maybeInit = references.add ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceInfo.add ( reference, t, v ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceMap.put ( v, referenceInfo ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( maybeInit.isLhsOfForInExpression (  )  )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( isInitializingDeclarationAt ( 0 )  )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( maybeDecl.isVarDeclaration (  )  )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return true;^277^278^^^281^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {  return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^277^278^^^281^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {  return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( size > 0 )  &&  ( references.get ( 0 ) .isInitializingDeclaration (  )  )  )  {     return true; }^277^^^^^275^284^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {     return true; }^277^^^^^275^284^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return false;^281^^^^^275^284^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( maybeInit .isVarDeclaration (  )   )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^277^^^^^275^284^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^283^^^^^275^284^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( index < references.size (  )  || index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( index <= references.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( index < references.size (  )  && index >= 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( index < references.size (  )  && index > 1 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( index < references.size() - 4  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( index < references.size (  )  ) {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  (  index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( index - 1 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( index < references.size (  )  && index > 0  )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeDecl.isVarDeclaration (  )  )  {     checkState (  ( ! ( maybeDecl.isInitializingDeclaration (  )  )  )  ) ;     Reference maybeInit = references.get ( index ) ;     if  ( maybeInit.isSimpleAssignmentToName (  )  )  {         return true;     } }^293^^^^^292^304^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( maybeDecl.isLhsOfForInExpression (  )  )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( maybeInit.isInitializingDeclaration (  )  )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState((!(maybeDecl.isInitializingDeclaration()))); com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index); if (maybeInit.isSimpleAssignmentToName()) {    return true;};^295^296^297^298^299^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ; if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^295^296^297^298^299^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ; if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( index <  ( references.size (  )  )  )  &&  ( index > 0 )  )  {     Reference maybeDecl = references.get (  ( index - 1 )  ) ;     if  ( maybeDecl.isVarDeclaration (  )  )  {         checkState (  ( ! ( maybeDecl.isInitializingDeclaration (  )  )  )  ) ;         Reference maybeInit = references.get ( index ) ;         if  ( maybeInit.isSimpleAssignmentToName (  )  )  {             return true;         }     } }^295^^^^^292^304^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( maybeDecl.isSimpleAssignmentToName (  )  )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( maybeInit.isLhsOfForInExpression (  )  )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return true;^298^299^300^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^298^299^300^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^298^^^^^292^304^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^298^^^^^292^304^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return false;^299^^^^^292^304^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Reference maybeInit = 0.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Reference maybeInit = index.get ( references ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Reference maybeInit = references.add ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Preconditions.checkState ( !maybeDecl.isLhsOfForInExpression (  )  ) ;^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^296^^^^^292^304^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceInfo.add ( reference, t, v ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceMap.put ( v, referenceInfo ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( maybeDecl.isLhsOfForInExpression (  )  )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {     return true; }^298^^^^^292^304^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^Reference maybeDecl = references.get ( index--2 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Reference maybeDecl = index.get ( references-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.pop (  ) ; }^294^^^^^292^304^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^Reference maybeDecl = references.get ( index-index ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Reference maybeDecl = 3.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceInfo.add ( reference, t, v ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceMap.put ( v, referenceInfo ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( maybeInit.isVarDeclaration (  )  )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( maybeDecl .isDeclaration (  )   )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; }^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( maybeInit.isInitializingDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; }^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^296^297^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Reference maybeInit = 1.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Reference maybeInit = 4.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( maybeInit .isDeclaration (  )   )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( index < references.size() - 1  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( index < null.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Reference maybeDecl = 0.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Preconditions.checkState ( !maybeDecl .isVarDeclaration (  )   ) ;^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^303^^^^^292^304^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( isInitializingDeclarationAt ( -2 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( isInitializingAssignmentAt ( 0 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( isInitializingDeclarationAt ( 4 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( maybeInit.isInitializingDeclaration (  )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return references.get(0);^314^315^316^317^318^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  { return references.get ( 0 ) ; } else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^314^315^316^317^318^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  { return references.get ( 0 ) ; } else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( isInitializingDeclarationAt ( i )  )  ||  ( isInitializingAssignmentAt ( i )  )  )  {     return references.get ( i ) ; }^314^^^^^313^320^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 4 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 2 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^} else {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^} else if  ( isInitializingDeclarationAt ( 1 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^} else if  ( isInitializingAssignmentAt ( 1 % 0 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return references.get(1);^316^317^318^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^316^317^318^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {     return true; }^316^^^^^313^320^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( isInitializingDeclarationAt ( i )  )  ||  ( isInitializingAssignmentAt ( i )  )  )  {     return references.get ( i ) ; }^316^^^^^313^320^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get (  ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return this.get ( 1 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return references.add ( 1 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( 0 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( 4 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( -1 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( 3 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( -5 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return references.add ( 0 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( -9 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 6 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 7 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( 6 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return references.add ( 4 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( -7 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return null.get ( 1 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( -7 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( isInitializingDeclarationAt ( 2 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( -2 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( -8 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return references.get ( 9 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return 0.get ( 1 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return this;^319^^^^^313^320^return null;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^short  size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() + 6 ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() + 5 ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return referenceMap.get ( v ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( isInitializingDeclarationAt ( i )  && isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( sizesInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( isInitializingDeclarationAt ( i )  ) {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  (  isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( isInitializingAssignmentAt ( i )  || isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( isInitializingDeclarationAt ( i )  || isInitializingDeclarationAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( sizesInitializingDeclarationAt ( i )  ) {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return references.get(i);^328^329^330^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  { return references.get ( i ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^328^329^330^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  { return references.get ( i ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^328^^^^^325^333^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isInitializingDeclarationAt ( 0 )  )  {     return references.get ( 0 ) ; }else     if  ( isInitializingAssignmentAt ( 1 )  )  {         return references.get ( 1 ) ;     }^328^^^^^325^333^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return references.get ( size ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return i.get ( references ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return references.add ( i ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^for  (  short  i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^for  ( int i = 0; i <= size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( sizent i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( sizent i = 0; i < i; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return null.get ( i ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return references.add ( size ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^for  (  long  i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^for  ( int i = size; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( sizesInitializingDeclarationAt ( i )  || isInitializingDeclarationAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return true;^332^^^^^325^333^return null;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^boolean assigned = true;^339^^^^^338^352^boolean assigned = false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^long  size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() + 4 ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() - 8 ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^int size = 1.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return referenceMap.get ( v ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( ref.isLvalue (  )  && ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( ref.isLvalue (  )  ) {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  (  ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( ref.isLhsOfForInExpression (  )  || ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( ref.isLvalue (  )  || ref.isLhsOfForInExpression (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( maybeInit.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^if (!assigned) {    assigned = true;}else {    return false;};^343^344^345^346^347^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^343^344^345^346^347^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( !isHoisted )  {^344^^^^^338^352^if  ( !assigned )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^assigned = true;^344^345^346^347^348^338^352^if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^344^345^346^347^348^338^352^if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( init == null )  {     return false; }^344^^^^^338^352^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^347^^^^^338^352^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^assigned = false;^345^^^^^338^352^assigned = true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^for  (  short  i = 0; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^for  ( int i = 0; i <= size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^for  ( int i = size; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( sizent i = 0; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( sizent i = 0; i < i; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Reference ref = i.get ( references ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Reference ref = references.add ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Reference ref = references.get ( size ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^int size = references.size (  ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return referenceMap.get ( v ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^referenceInfo.add ( reference, t, v ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( ref .isDeclaration (  )   || ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^if  ( ref.isLvalue (  )  || ref .isVarDeclaration (  )   )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^for  (  long  i = 0; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^for  ( int i = i; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Reference ref = references.add ( size ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return isHoisted;^351^^^^^338^352^return assigned;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^short  size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() + 6 ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^int size = references.size() - 6 ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return referenceMap.get ( v ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( size > 0 || references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( size == 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( size > -9 && references.get ( -9 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( size > -4 && references.get ( -4 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( size > 0 && 1.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( references > 0 && size.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  ( size > 0 ) {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P6_Replace_Expression]^if  (  references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( size > 0 && references.get ( 0 ) .isLhsOfForInExpression (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( size > 0 && references.get ( 0 )  .isVarDeclaration (  )   )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^if  ( size > 0 && references.add ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return true;^356^357^358^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  { return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^356^357^358^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  { return true; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^356^^^^^354^360^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return false;^357^^^^^354^360^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( size > 1 && references.get ( 1 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( size > 0 )  &&  ( references.get ( 0 ) .isInitializingDeclaration (  )  )  )  {     return true; }^356^^^^^354^360^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^if  ( size > size && references.get ( size ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^359^^^^^354^360^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^return new Reference ( func.getFirstChild (  ) ,  func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P4_Replace_Constructor]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return new Reference ( nameNode.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , parent, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return new Reference ( t.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, func.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t .getScope (  )   ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return new Reference ( root.getFirstChild (  ) , func, func .getString (  )  , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return new Reference ( parent.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return new Reference ( basicBlock.getFirstChild (  ) , func, func.getParent (  ) , func, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return new Reference ( func .getString (  )  , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t .getSourceName (  )  , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return new Reference ( parent .getString (  )  , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return new Reference ( func.getFirstChild (  ) , func, func .getString (  )  , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Node n = t.getScope (  ) .getRootNode (  ) ;basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^BasicBlock initBlock = init.getBasicBlock (  ) ;basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^basicBlock, t.getScope (  ) , t .getScope (  )   ) ;^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  && parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP || grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  >= Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return DECLARATION_PARENTS.contains ( root.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && nameNode.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return DECLARATION_PARENTS.contains ( grandparent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return DECLARATION_PARENTS.contains ( parent.getString (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return DECLARATION_PARENTS.contains ( parent .getString (  )   )  || parent^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return parent.contains ( DECLARATION_PARENTS.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return DECLARATION_PARENTS.contains ( n.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return DECLARATION_PARENTS.contains ( n.getString (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^parent.getString (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^grandparent.getType (  )  == Token.FUNCTION;parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^grandparent.getString (  )  == Token.FUNCTION;^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return parent.getType (  )  == Token.VAR;grandparent.getType (  )  == Token.FUNCTION;^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return n.getType (  )  == Token.CASE;grandparent.getType (  )  == Token.FUNCTION;^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;grandparent.getType (  )  == Token.FUNCTION;^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { grandparent.getType (  )  == Token.FUNCTION; }^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.VAR )  { grandparent.getType (  )  == Token.FUNCTION; }^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return parent.getType (  )  != Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return parent.getString (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return root.getString (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { return parent.getType (  )  == Token.VAR; }^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.VAR )  { return parent.getType (  )  == Token.VAR; }^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return n.getType (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return NodeUtil.isHoistedFunctionDeclaration ( nameNode ) ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return NodeUtil .isAssignmentOp ( parent )  ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return NodeUtil.isHoistedFunctionDeclaration ( root ) ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return isDeclaration (  )  || ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR && nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return isDeclaration (  )  && ( parent.getType (  )  == Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  == null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || root.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return isVarDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return isDeclaration (  )  && ( parent.getString (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getString (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return isVarDeclaration (  )  || ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^( n.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^( parent.getString (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^( parent.getType (  )  != Token.VAR || nameNode.getString (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^( parent.getType (  )  != Token.VAR || root.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return NodeUtil.getAssignedValue ( getBasicBlock (  )  ) ;^431^^^^^430^432^return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getAssignedValue [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^431^^^^^430^432^return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getAssignedValue [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return parent;^435^^^^^434^436^return basicBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getBasicBlock [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return root;^439^^^^^438^440^return parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getParent [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return root;^443^^^^^442^444^return nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return nameNode;^447^^^^^446^448^return grandparent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getGrandparent [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return root;^447^^^^^446^448^return grandparent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getGrandparent [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^Node parent = root.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;Node parent = n.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^Node parent = n .getString (  )  ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^Node parent = root .getString (  )  ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^if  ( parent.getType (  )  > Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);^452^453^454^^^450^456^if  ( parent.getType (  )  == Token.VAR )  { return isLhsOfForInExpression ( parent ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^452^453^454^^^450^456^if  ( parent.getType (  )  == Token.VAR )  { return isLhsOfForInExpression ( parent ) ; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return isLhsOfForInExpression ( root ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return isLhsOfForInExpression ( nameNode ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( VAR )  )  {     return isLhsOfForInExpression ( parent ) ; }^453^^^^^450^456^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( isBlockBoundary ( n, parent )  )  {     blockStack.pop (  ) ; }^453^^^^^450^456^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return isLhsOfForInExpression ( n ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return NodeUtil.isForIn ( parent )  || parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  != n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return NodeUtil.isForIn ( root )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == nameNode;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == parent;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return NodeUtil.isForIn ( parent )  && parent .getString (  )   == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return NodeUtil.isForIn ( nameNode )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return parent.getType (  )  < Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return parent.getType (  )  <= Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return parent.getString (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return parent.getType (  )  == Token.ASSIGN && parent.getString (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return root.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^&& root.getFirstChild (  )  == nameNode;^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^&& parent.getString (  )  == nameNode;^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^&& nameNode .getString (  )   == nameNode;^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P1_Replace_Type]^short  parentType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^int nType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^int parentType = parent.getString (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^int nType = parent.getString (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;int parentType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^int nameNodeType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) && parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return  ( parentType == Token.VAR || nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return  ( parentType != Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  == null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return  ( parentType == Token.VAR && root.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.null || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return  ( nameNodeType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return  ( nameNodeType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return  ( parentTypeType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parent == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return  ( parentType == Token.VAR && nameNode.getString (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil .getAssignedValue ( grandparent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return  ( nType == Token.VAR && nameNode.getString (  )  != this ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return  ( parentType == Token.VAR && n.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return  ( parentType == Token.VAR && root.getString (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^||  ( NodeUtil.isAssignmentOp ( root ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^468^469^470^^^463^471^||  ( NodeUtil.isAssignmentOp ( parent ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^||  ( NodeUtil .getAssignedValue ( func )  && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^468^469^470^^^463^471^||  ( NodeUtil.isAssignmentOp ( parent ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^468^469^470^^^463^471^||  ( NodeUtil.isAssignmentOp ( parent ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^&& n.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^&& parent.getString (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^&& nameNode.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^|| isLhsOfForInExpression ( n ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^|| isInitializingDeclaration ( nameNode ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^|| isLhsOfForInExpression ( root ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P11_Insert_Donor_Statement]^return isLhsOfForInExpression ( parent ) ;|| isLhsOfForInExpression ( nameNode ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return initBlock;^509^^^^^508^510^return parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getParent [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( thatBlock.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( currentBlock.isHoisted.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^if  ( currentBlock )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P15_Unwrap_Block]^return false;^523^524^525^^^516^529^if  ( currentBlock.isHoisted )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P16_Remove_Block]^^523^524^525^^^516^529^if  ( currentBlock.isHoisted )  { return false; }^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( init == null )  {     return false; }^523^^^^^516^529^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P13_Insert_Block]^if  ( size == 0 )  {     return false; }^523^^^^^516^529^[Delete]^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P3_Replace_Literal]^return true;^524^^^^^516^529^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( currentBlock = initBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( parent = thatBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( thatBlock = currentBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^for  ( currentBlock = parent;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^currentBlock = currentBlock.provablyExecutesBefore (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P7_Replace_Invocation]^currentBlock = currentBlock .getString (  )   )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^currentBlock =  parent.getParent (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^currentBlock = thatBlock.getParent (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P14_Delete_Statement]^^522^523^524^^^516^529^currentBlock = currentBlock.getParent (  )  )  { if  ( currentBlock.isHoisted )  { return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P2_Replace_Operator]^return currentBlock <= this;^528^^^^^516^529^return currentBlock == this;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P5_Replace_Variable]^return thatBlock == this;^528^^^^^516^529^return currentBlock == this;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^return currentBlock  ||  this;^528^^^^^516^529^return currentBlock == this;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[P8_Replace_Mix]^List<Reference> references  = null ;^228^^^^^223^233^List<Reference> references = Lists.newArrayList (  ) ;^[CLASS] ReferenceCollection  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Map  referenceMap  
[P7_Replace_Invocation]^references.get ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollection  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] List  references  boolean  NodeTraversal  t  Reference  reference  Var  v  
[P14_Delete_Statement]^^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollection  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] List  references  boolean  NodeTraversal  t  Reference  reference  Var  v  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollection  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] List  references  boolean  NodeTraversal  t  Reference  reference  Var  v  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollection  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] List  references  boolean  NodeTraversal  t  Reference  reference  Var  v  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;references.add ( reference ) ;^231^^^^^230^232^references.add ( reference ) ;^[CLASS] ReferenceCollection  [METHOD] add [RETURN_TYPE] void   Reference reference NodeTraversal t Var v [VARIABLES] List  references  boolean  NodeTraversal  t  Reference  reference  Var  v  
[P1_Replace_Type]^short  size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^int size = references.size() - 3 ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^int size = 1.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^int size = references.size() + 8 ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P8_Replace_Mix]^int size = this.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P14_Delete_Statement]^^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P2_Replace_Operator]^if  ( size <= 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^if  ( size == i )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^if  ( i == 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P8_Replace_Mix]^if  ( size == 0  )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P9_Replace_Statement]^if  ( init == null )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P15_Unwrap_Block]^return false;^245^246^247^^^243^266^if  ( size == 0 )  { return false; }^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P16_Remove_Block]^^245^246^247^^^243^266^if  ( size == 0 )  { return false; }^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P13_Insert_Block]^if  ( init == null )  {     return false; }^245^^^^^243^266^[Delete]^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^return true;^246^^^^^243^266^return false;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P14_Delete_Statement]^^251^^^^^243^266^Reference init = getInitializingReference (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P2_Replace_Operator]^if  ( init != null )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P8_Replace_Mix]^if  ( init == false )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P9_Replace_Statement]^if  ( size == 0 )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P15_Unwrap_Block]^return false;^252^253^254^^^243^266^if  ( init == null )  { return false; }^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P16_Remove_Block]^^252^253^254^^^243^266^if  ( init == null )  { return false; }^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P13_Insert_Block]^if  ( !assigned )  {     assigned = true; }else {     return false; }^252^^^^^243^266^[Delete]^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P13_Insert_Block]^if  ( size == 0 )  {     return false; }^252^^^^^243^266^[Delete]^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^return true;^253^^^^^243^266^return false;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^Preconditions.checkState ( references.get ( i ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P7_Replace_Invocation]^Preconditions.checkState ( references.get ( 0 )  .isVarDeclaration (  )   ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P14_Delete_Statement]^^256^257^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ; BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^Preconditions.checkState ( references.get ( -7 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^Preconditions.checkState ( references.get ( size ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^Preconditions.checkState ( null.get ( 0 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P8_Replace_Mix]^BasicBlock initBlock = init .isSimpleAssignmentToName (  )  ;^257^^^^^243^266^BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P14_Delete_Statement]^^257^^^^^243^266^BasicBlock initBlock = init.getBasicBlock (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^if  ( !initBlock.provablyExecutesBefore ( references.get ( size ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^if  ( !initBlock.provablyExecutesBefore ( null.get ( i ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^if  ( !initBlock.provablyExecutesBefore ( i.get ( references ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P8_Replace_Mix]^if  ( !initBlock.provablyExecutesBefore ( null.get ( i )  .isSimpleAssignmentToName (  )   )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P15_Unwrap_Block]^return false;^259^260^261^262^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  { return false; }^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P16_Remove_Block]^^259^260^261^262^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  { return false; }^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^return true;^261^^^^^243^266^return false;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P1_Replace_Type]^for  (  long  i = 1; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P2_Replace_Operator]^for  ( int i = 1; i <= size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^for  ( int i = -5; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^for  ( sizent i = 1; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^for  ( sizent i = 1; i < i; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P7_Replace_Invocation]^if  ( !initBlock.provablyExecutesBefore ( references.get ( i )  .isSimpleAssignmentToName (  )   )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P13_Insert_Block]^if  ( ! ( initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  )  {     return false; }^259^^^^^243^266^[Delete]^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^references.get ( size ) .getBasicBlock (  )  )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P7_Replace_Invocation]^references.get ( i )  .isSimpleAssignmentToName (  )   )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P14_Delete_Statement]^^260^261^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  { return false;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^for  ( int i = -4; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P3_Replace_Literal]^return false;^265^^^^^243^266^return true;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[P5_Replace_Variable]^Reference maybeInit = index.get ( references ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P14_Delete_Statement]^^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference maybeInit = references.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P9_Replace_Statement]^if  ( isInitializingDeclarationAt ( 0 )  )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P9_Replace_Statement]^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P9_Replace_Statement]^if  ( maybeDecl.isVarDeclaration (  )  )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P15_Unwrap_Block]^return true;^277^278^^^281^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {  return true; }^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P16_Remove_Block]^^277^278^^^281^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {  return true; }^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P13_Insert_Block]^if  (  ( size > 0 )  &&  ( references.get ( 0 ) .isInitializingDeclaration (  )  )  )  {     return true; }^277^^^^^275^284^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P13_Insert_Block]^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {     return true; }^277^^^^^275^284^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P3_Replace_Literal]^return false;^281^^^^^275^284^return true;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P7_Replace_Invocation]^if  ( maybeInit .isVarDeclaration (  )   )  {^277^^^^^275^284^if  ( maybeInit.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^277^^^^^275^284^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P3_Replace_Literal]^return true;^283^^^^^275^284^return false;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[P2_Replace_Operator]^if  ( index < references.size (  )  || index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P2_Replace_Operator]^if  ( index <= references.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P2_Replace_Operator]^if  ( index < references.size (  )  && index >= 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P3_Replace_Literal]^if  ( index < references.size() + 2  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P6_Replace_Expression]^if  ( index < references.size (  )  ) {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P6_Replace_Expression]^if  (  index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P6_Replace_Expression]^if  ( index - 1 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P8_Replace_Mix]^if  ( index < references.size (  )  && index > 0  )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P13_Insert_Block]^if  ( maybeDecl.isVarDeclaration (  )  )  {     checkState (  ( ! ( maybeDecl.isInitializingDeclaration (  )  )  )  ) ;     Reference maybeInit = references.get ( index ) ;     if  ( maybeInit.isSimpleAssignmentToName (  )  )  {         return true;     } }^293^^^^^292^304^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P8_Replace_Mix]^if  ( maybeDecl .isDeclaration (  )   )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P9_Replace_Statement]^if  ( maybeInit.isInitializingDeclaration (  )  )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState((!(maybeDecl.isInitializingDeclaration()))); com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index); if (maybeInit.isSimpleAssignmentToName()) {    return true;};^295^296^297^298^299^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ; if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P16_Remove_Block]^^295^296^297^298^299^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ; if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P13_Insert_Block]^if  (  ( index <  ( references.size (  )  )  )  &&  ( index > 0 )  )  {     Reference maybeDecl = references.get (  ( index - 1 )  ) ;     if  ( maybeDecl.isVarDeclaration (  )  )  {         checkState (  ( ! ( maybeDecl.isInitializingDeclaration (  )  )  )  ) ;         Reference maybeInit = references.get ( index ) ;         if  ( maybeInit.isSimpleAssignmentToName (  )  )  {             return true;         }     } }^295^^^^^292^304^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P5_Replace_Variable]^if  ( maybeDecl.isSimpleAssignmentToName (  )  )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P15_Unwrap_Block]^return true;^298^299^300^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P16_Remove_Block]^^298^299^300^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^298^^^^^292^304^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P13_Insert_Block]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^298^^^^^292^304^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P3_Replace_Literal]^return false;^299^^^^^292^304^return true;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P5_Replace_Variable]^Reference maybeInit = index.get ( references ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P8_Replace_Mix]^Reference maybeInit = 4.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P8_Replace_Mix]^Preconditions.checkState ( !maybeDecl .isVarDeclaration (  )   ) ;^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P14_Delete_Statement]^^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P12_Insert_Condition]^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; }^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P12_Insert_Condition]^if  ( maybeInit.isInitializingDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; }^296^^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^296^^^^^292^304^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P14_Delete_Statement]^^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference maybeInit = references.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P7_Replace_Invocation]^if  ( maybeInit .isDeclaration (  )   )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P8_Replace_Mix]^if  ( maybeDecl .isDeclaration (  )   )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P13_Insert_Block]^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {     return true; }^298^^^^^292^304^[Delete]^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P3_Replace_Literal]^Reference maybeDecl = references.get ( index-index ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P5_Replace_Variable]^Reference maybeDecl = 4.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P5_Replace_Variable]^Reference maybeDecl = index.get ( references-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P3_Replace_Literal]^Reference maybeDecl = references.get ( index-0 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P14_Delete_Statement]^^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference maybeDecl = references.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P5_Replace_Variable]^if  ( maybeInit.isVarDeclaration (  )  )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P14_Delete_Statement]^^296^297^^^^292^304^Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P3_Replace_Literal]^if  ( index < references.size() - 2  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P8_Replace_Mix]^Reference maybeDecl = this.get ( index-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P8_Replace_Mix]^Reference maybeInit = null.get ( index ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P3_Replace_Literal]^return true;^303^^^^^292^304^return false;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[P3_Replace_Literal]^if  ( isInitializingDeclarationAt ( 5 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^if  ( isInitializingDeclarationAt ( 9 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P7_Replace_Invocation]^if  ( isInitializingAssignmentAt ( 0 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^if  ( isInitializingDeclarationAt ( 3 )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P9_Replace_Statement]^if  ( maybeInit.isInitializingDeclaration (  )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P15_Unwrap_Block]^return references.get(0);^314^315^316^317^318^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  { return references.get ( 0 ) ; } else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P16_Remove_Block]^^314^315^316^317^318^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  { return references.get ( 0 ) ; } else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P13_Insert_Block]^if  (  ( isInitializingDeclarationAt ( i )  )  ||  ( isInitializingAssignmentAt ( i )  )  )  {     return references.get ( i ) ; }^314^^^^^313^320^[Delete]^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 8 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 2 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P6_Replace_Expression]^} else {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P7_Replace_Invocation]^} else if  ( isInitializingDeclarationAt ( 1 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P15_Unwrap_Block]^return references.get(1);^316^317^318^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P16_Remove_Block]^^316^317^318^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P13_Insert_Block]^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {     return true; }^316^^^^^313^320^[Delete]^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P13_Insert_Block]^if  (  ( isInitializingDeclarationAt ( i )  )  ||  ( isInitializingAssignmentAt ( i )  )  )  {     return references.get ( i ) ; }^316^^^^^313^320^[Delete]^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( -7 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^return references.get ( 1L ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( -8 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P14_Delete_Statement]^^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( 2 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^return references.get ( 4 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt (  )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( 7 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^return references.get ( 2 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( 1 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P14_Delete_Statement]^^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( -4 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 3 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^}  if  ( isInitializingDeclarationAt ( 2 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( 9 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^return references.get ( 1 * 1 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( 6 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^return references.get ( 3 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( 7 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^return references.get ( 3 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( -2 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^} else if  ( isInitializingAssignmentAt ( 6 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P3_Replace_Literal]^return references.get ( 6 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P8_Replace_Mix]^return this;^319^^^^^313^320^return null;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[P1_Replace_Type]^short  size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P3_Replace_Literal]^int size = references.size() + 2 ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P8_Replace_Mix]^int size = this.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P3_Replace_Literal]^int size = references.size() - 8 ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P14_Delete_Statement]^^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^326^^^^^325^333^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P2_Replace_Operator]^if  ( isInitializingDeclarationAt ( i )  && isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P6_Replace_Expression]^if  ( isInitializingDeclarationAt ( i )  ) {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P6_Replace_Expression]^if  (  isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P7_Replace_Invocation]^if  ( isInitializingAssignmentAt ( i )  || isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P7_Replace_Invocation]^if  ( isInitializingDeclarationAt ( i )  || isInitializingDeclarationAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P8_Replace_Mix]^if  ( sizesInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P15_Unwrap_Block]^return references.get(i);^328^329^330^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  { return references.get ( i ) ; }^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P16_Remove_Block]^^328^329^330^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  { return references.get ( i ) ; }^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P13_Insert_Block]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^328^^^^^325^333^[Delete]^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P13_Insert_Block]^if  ( isInitializingDeclarationAt ( 0 )  )  {     return references.get ( 0 ) ; }else     if  ( isInitializingAssignmentAt ( 1 )  )  {         return references.get ( 1 ) ;     }^328^^^^^325^333^[Delete]^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P5_Replace_Variable]^return references.get ( size ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P5_Replace_Variable]^return i.get ( references ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P14_Delete_Statement]^^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P1_Replace_Type]^for  (  long  i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P2_Replace_Operator]^for  ( int i = 0; i <= size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P3_Replace_Literal]^for  ( int i = 2; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P5_Replace_Variable]^for  ( sizent i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P5_Replace_Variable]^for  ( sizent i = 0; i < i; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P8_Replace_Mix]^if  ( sizesInitializingDeclarationAt ( i )  || isInitializingDeclarationAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P1_Replace_Type]^for  (  short  i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P3_Replace_Literal]^for  ( int i = size; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P8_Replace_Mix]^return false;^332^^^^^325^333^return null;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[P3_Replace_Literal]^boolean assigned = true;^339^^^^^338^352^boolean assigned = false;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P1_Replace_Type]^short  size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P3_Replace_Literal]^int size = references.size() - 5 ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P5_Replace_Variable]^int size = null.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P3_Replace_Literal]^int size = references.size() - 9 ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P14_Delete_Statement]^^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P2_Replace_Operator]^if  ( ref.isLvalue (  )  && ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P6_Replace_Expression]^if  ( ref.isLvalue (  )  ) {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P6_Replace_Expression]^if  (  ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P7_Replace_Invocation]^if  ( ref .isDeclaration (  )   || ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P7_Replace_Invocation]^if  ( ref.isLvalue (  )  || ref .isVarDeclaration (  )   )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P9_Replace_Statement]^if  ( maybeInit.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P15_Unwrap_Block]^if (!assigned) {    assigned = true;}else {    return false;};^343^344^345^346^347^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P16_Remove_Block]^^343^344^345^346^347^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P15_Unwrap_Block]^assigned = true;^344^345^346^347^348^338^352^if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P16_Remove_Block]^^344^345^346^347^348^338^352^if  ( !assigned )  { assigned = true; } else { return false; }^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P13_Insert_Block]^if  ( init == null )  {     return false; }^344^^^^^338^352^[Delete]^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P3_Replace_Literal]^return true;^347^^^^^338^352^return false;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P3_Replace_Literal]^assigned = false;^345^^^^^338^352^assigned = true;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P8_Replace_Mix]^if  ( assigned )  {^344^^^^^338^352^if  ( !assigned )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P1_Replace_Type]^for  (  short  i = 0; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P2_Replace_Operator]^for  ( int i = 0; i == size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P3_Replace_Literal]^for  ( int i = 1; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P5_Replace_Variable]^for  ( sizent i = 0; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P5_Replace_Variable]^for  ( sizent i = 0; i < i; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P5_Replace_Variable]^Reference ref = references.get ( size ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P5_Replace_Variable]^Reference ref = null.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P5_Replace_Variable]^Reference ref = i.get ( references ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P8_Replace_Mix]^Reference ref = 4.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P14_Delete_Statement]^^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^references.add ( reference ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^int size = references.size (  ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^Reference maybeDecl = references.get ( index-1 ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P11_Insert_Donor_Statement]^Reference maybeInit = references.get ( index ) ;Reference ref = references.get ( i ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P3_Replace_Literal]^for  ( int i = i; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[P1_Replace_Type]^long  size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P3_Replace_Literal]^int size = references.size() - 8 ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P11_Insert_Donor_Statement]^Reference ref = references.get ( i ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P12_Insert_Condition]^if  ( index < references.size (  )  && index > 0 )  { int size = references.size (  ) ; }^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P3_Replace_Literal]^int size = references.size() - 4 ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P14_Delete_Statement]^^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P11_Insert_Donor_Statement]^return references.get ( 0 ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P11_Insert_Donor_Statement]^return references.get ( i ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P11_Insert_Donor_Statement]^return references.get ( 1 ) ;int size = references.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P2_Replace_Operator]^if  ( size > 0 || references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P2_Replace_Operator]^if  ( size >= 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P3_Replace_Literal]^if  ( size > -5 && references.get ( -5 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P5_Replace_Variable]^if  ( references > 0 && size.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P6_Replace_Expression]^if  ( size > 0 ) {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P6_Replace_Expression]^if  (  references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P7_Replace_Invocation]^if  ( size > 0 && references.get ( 0 )  .isVarDeclaration (  )   )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P15_Unwrap_Block]^return true;^356^357^358^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  { return true; }^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P16_Remove_Block]^^356^357^358^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  { return true; }^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P13_Insert_Block]^if  ( maybeInit.isInitializingDeclaration (  )  )  {     return true; }^356^^^^^354^360^[Delete]^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P3_Replace_Literal]^return false;^357^^^^^354^360^return true;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P3_Replace_Literal]^if  ( size > 1 && references.get ( 1 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P8_Replace_Mix]^if  ( size > 0 && 0.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P13_Insert_Block]^if  (  ( size > 0 )  &&  ( references.get ( 0 ) .isInitializingDeclaration (  )  )  )  {     return true; }^356^^^^^354^360^[Delete]^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P3_Replace_Literal]^if  ( size > size && references.get ( size ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P3_Replace_Literal]^return true;^359^^^^^354^360^return false;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P8_Replace_Mix]^private static final Set<Integer> DECLARATION_PARENTS  = null ;^368^369^^^^368^369^private static final Set<Integer> DECLARATION_PARENTS = ImmutableSet.of ( Token.VAR, Token.FUNCTION, Token.CATCH ) ;^[CLASS] Reference  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P8_Replace_Mix]^private  Node grandparent;^373^^^^^368^378^private final Node grandparent;^[CLASS] Reference  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P8_Replace_Mix]^private  BasicBlock basicBlock;^374^^^^^369^379^private final BasicBlock basicBlock;^[CLASS] Reference  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P1_Replace_Type]^private final char sourceName;^376^^^^^371^381^private final String sourceName;^[CLASS] Reference  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[P5_Replace_Variable]^this ( grandparent, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( nameNode, grandparent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this (  parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( nameNode,  parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( nameNode, parent, parent.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( nameNode, paren parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( parent, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( nameNode, parent, parent.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( t, parent, parent.getParent (  ) , basicBlock, nameNode.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P7_Replace_Invocation]^this ( nameNode, parent, parent .getType (  )  , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P7_Replace_Invocation]^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t .getScope (  )   ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P8_Replace_Mix]^this ( grandparent, parent, parent .getType (  )  , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P14_Delete_Statement]^^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P11_Insert_Donor_Statement]^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P11_Insert_Donor_Statement]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this ( nameNode, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P8_Replace_Mix]^t .getScope (  )   ) ;^381^^^^^378^382^t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P14_Delete_Statement]^^381^^^^^378^382^t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^this.nameNode = parent;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.nameNode = nameNode;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.scope = scope;this.nameNode = nameNode;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.parent = parent;this.nameNode = nameNode;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P5_Replace_Variable]^this.parent = nameNode;^395^^^^^392^400^this.parent = parent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.grandparent = grandparent;this.parent = parent;^395^^^^^392^400^this.parent = parent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.parent = parent;^395^^^^^392^400^this.parent = parent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.parent = parent;^395^^^^^392^400^this.parent = parent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P5_Replace_Variable]^this.grandparent = parent;^396^^^^^392^400^this.grandparent = grandparent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.parent = parent;this.grandparent = grandparent;^396^^^^^392^400^this.grandparent = grandparent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P8_Replace_Mix]^this.basicBlock =  null;^397^^^^^392^400^this.basicBlock = basicBlock;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.scope = scope;this.basicBlock = basicBlock;^397^^^^^392^400^this.basicBlock = basicBlock;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P8_Replace_Mix]^this.scope =  null;^398^^^^^392^400^this.scope = scope;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.scope = scope;^398^^^^^392^400^this.scope = scope;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.scope = scope;^398^^^^^392^400^this.scope = scope;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.basicBlock = basicBlock;this.scope = scope;^398^^^^^392^400^this.scope = scope;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P8_Replace_Mix]^this.sourceName =  null;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.sourceName = sourceName;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.scope = scope;this.sourceName = sourceName;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^this.parent = parent;this.sourceName = sourceName;^399^^^^^392^400^this.sourceName = sourceName;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[P4_Replace_Constructor]^return new Reference ( func.getFirstChild (  ) ,  func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P4_Replace_Constructor]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P4_Replace_Constructor]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^return new Reference ( parent.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^return new Reference ( t.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, func.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^return new Reference ( basicBlock.getFirstChild (  ) , func, func.getParent (  ) , func, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P5_Replace_Variable]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P7_Replace_Invocation]^return new Reference ( func .getParent (  )  , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P7_Replace_Invocation]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t .getScope (  )   ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P8_Replace_Mix]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t .getSourceName (  )  , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P7_Replace_Invocation]^return new Reference ( func.getFirstChild (  ) , func, func .getType (  )  , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P14_Delete_Statement]^^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P8_Replace_Mix]^return new Reference ( parent.getFirstChild (  ) , func, func .getType (  )  , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P8_Replace_Mix]^basicBlock, t .getSourceName (  )  , t.getSourceName (  )  ) ;^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P14_Delete_Statement]^^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P11_Insert_Donor_Statement]^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^389^^^^^386^390^basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[P2_Replace_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  && parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP || grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  != Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  < Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return 2.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return DECLARATION_PARENTS.contains ( nameNode.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return DECLARATION_PARENTS.contains ( grandparent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return DECLARATION_PARENTS.contains ( parent.getParent (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return DECLARATION_PARENTS.contains ( parent .getParent (  )   )  || parent^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P8_Replace_Mix]^return true ;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return parent.contains ( DECLARATION_PARENTS.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^parent.getParent (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^grandparent.getType (  )  == Token.FUNCTION;parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^404^405^^^^402^406^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^grandparent.getParent (  )  == Token.FUNCTION;^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^return parent.getType (  )  == Token.VAR;grandparent.getType (  )  == Token.FUNCTION;^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P11_Insert_Donor_Statement]^parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;grandparent.getType (  )  == Token.FUNCTION;^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.VAR )  { grandparent.getType (  )  == Token.FUNCTION; }^405^^^^^402^406^grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return parent.getType (  )  != Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return parent.getParent (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.VAR )  { return parent.getType (  )  == Token.VAR; }^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P8_Replace_Mix]^return nameNode.getParent (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return NodeUtil.isHoistedFunctionDeclaration ( nameNode ) ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] Reference  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P8_Replace_Mix]^return NodeUtil .isAssignmentOp ( parent )  ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] Reference  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return NodeUtil .isAssignmentOp ( grandparent )  ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] Reference  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] Reference  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return isDeclaration (  )  || ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR && nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return isDeclaration (  )  && ( parent.getType (  )  == Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P2_Replace_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  == null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return isDeclaration (  )  && ( grandparent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return getNameNode (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return isDeclaration (  )  && ( parent.getParent (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getParent (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P8_Replace_Mix]^return isDeclaration (  )  || ( parent.getType (  )  != Token.VAR || nameNode .getParent (  )   != null ) ;;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^( nameNode.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^( parent.getParent (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^( parent.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^( parent.getType (  )  != Token.VAR || nameNode.getParent (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P8_Replace_Mix]^( parent.getType (  )  != Token.VAR || parent.getParent (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return NodeUtil .isAssignmentOp ( func )  ;^431^^^^^430^432^return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[CLASS] Reference  [METHOD] getAssignedValue [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return NodeUtil.getAssignedValue ( isDeclaration (  )  ) ;^431^^^^^430^432^return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[CLASS] Reference  [METHOD] getAssignedValue [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P7_Replace_Invocation]^return NodeUtil .isAssignmentOp ( nameNode )  ;^431^^^^^430^432^return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[CLASS] Reference  [METHOD] getAssignedValue [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P8_Replace_Mix]^return NodeUtil .isAssignmentOp ( parent )  ;^431^^^^^430^432^return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[CLASS] Reference  [METHOD] getAssignedValue [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P14_Delete_Statement]^^431^^^^^430^432^return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[CLASS] Reference  [METHOD] getAssignedValue [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return nameNode;^439^^^^^438^440^return parent;^[CLASS] Reference  [METHOD] getParent [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return parent;^443^^^^^442^444^return nameNode;^[CLASS] Reference  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^return parent;^447^^^^^446^448^return grandparent;^[CLASS] Reference  [METHOD] getGrandparent [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[P5_Replace_Variable]^Node parent = nameNode.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;Node parent = n.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P14_Delete_Statement]^^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.null )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P7_Replace_Invocation]^if  ( parent .getParent (  )   == Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);^452^453^454^^^450^456^if  ( parent.getType (  )  == Token.VAR )  { return isLhsOfForInExpression ( parent ) ; }^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P16_Remove_Block]^^452^453^454^^^450^456^if  ( parent.getType (  )  == Token.VAR )  { return isLhsOfForInExpression ( parent ) ; }^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return isLhsOfForInExpression ( nameNode ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( VAR )  )  {     return isLhsOfForInExpression ( parent ) ; }^453^^^^^450^456^[Delete]^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return isLhsOfForInExpression ( n ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P14_Delete_Statement]^^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P2_Replace_Operator]^return NodeUtil.isForIn ( parent )  || parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P2_Replace_Operator]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  != n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return NodeUtil.isForIn ( nameNode )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == nameNode;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == parent;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P7_Replace_Invocation]^return NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P7_Replace_Invocation]^return NodeUtil.isForIn ( parent )  && parent .getParent (  )   == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P14_Delete_Statement]^^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P8_Replace_Mix]^return NodeUtil.isForIn ( nameNode )  && parent .getParent (  )   == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P2_Replace_Operator]^return parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P2_Replace_Operator]^return parent.getType (  )  <= Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P2_Replace_Operator]^return parent.getType (  )  >= Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P7_Replace_Invocation]^return parent.getParent (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P7_Replace_Invocation]^return parent.getType (  )  == Token.ASSIGN && parent.getParent (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P8_Replace_Mix]^return nameNode.getParent (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P14_Delete_Statement]^^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P5_Replace_Variable]^&& nameNode.getFirstChild (  )  == nameNode;^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P7_Replace_Invocation]^&& parent.getParent (  )  == nameNode;^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P14_Delete_Statement]^^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P1_Replace_Type]^short  parentType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^int nameNodeType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P7_Replace_Invocation]^int parentType = parent.getParent (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P8_Replace_Mix]^int nameNodeType = parent.getParent (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;int parentType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P14_Delete_Statement]^^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P2_Replace_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) && parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P2_Replace_Operator]^return  ( parentType == Token.VAR || nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P2_Replace_Operator]^return  ( parentType != Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P2_Replace_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  == null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^return  ( parentType == Token.VAR && n.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.2 ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^return  ( nType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^return  ( parentTypeType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parent == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P7_Replace_Invocation]^return  ( parentType == Token.VAR && nameNode.getParent (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P8_Replace_Mix]^return  ( parentType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^||  ( NodeUtil.isAssignmentOp ( nameNode ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^468^469^470^^^463^471^||  ( NodeUtil.isAssignmentOp ( parent ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P14_Delete_Statement]^^468^469^470^^^463^471^||  ( NodeUtil.isAssignmentOp ( parent ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^&& nameNode.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P7_Replace_Invocation]^&& parent.getParent (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P14_Delete_Statement]^^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P5_Replace_Variable]^|| isLhsOfForInExpression ( n ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P7_Replace_Invocation]^|| isDeclaration ( nameNode ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P8_Replace_Mix]^|| isLhsOfForInExpression ( parent ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P14_Delete_Statement]^^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P11_Insert_Donor_Statement]^return isLhsOfForInExpression ( parent ) ;|| isLhsOfForInExpression ( nameNode ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[P8_Replace_Mix]^private  boolean isHoisted;^494^^^^^489^499^private final boolean isHoisted;^[CLASS] BasicBlock  [METHOD] getSourceName [RETURN_TYPE] String   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[P8_Replace_Mix]^this.parent =  null;^502^^^^^501^506^this.parent = parent;^[CLASS] BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] BasicBlock  parent  boolean  isHoisted  Node  root  
[P8_Replace_Mix]^this.isHoisted =  NodeUtil.isHoistedFunctionDeclaration ( null ) ;^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] BasicBlock  parent  boolean  isHoisted  Node  root  
[P14_Delete_Statement]^^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] BasicBlock  parent  boolean  isHoisted  Node  root  
[P5_Replace_Variable]^if  ( thatBlock.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P5_Replace_Variable]^if  ( isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P5_Replace_Variable]^if  ( currentBlock.isHoisted.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P5_Replace_Variable]^if  ( currentBlock )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P15_Unwrap_Block]^return false;^523^524^525^^^516^529^if  ( currentBlock.isHoisted )  { return false; }^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P16_Remove_Block]^^523^524^525^^^516^529^if  ( currentBlock.isHoisted )  { return false; }^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P3_Replace_Literal]^return true;^524^^^^^516^529^return false;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P5_Replace_Variable]^for  ( currentBlock = parent;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P5_Replace_Variable]^for  ( thatBlock = currentBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P5_Replace_Variable]^currentBlock = thatBlock.getParent (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P7_Replace_Invocation]^currentBlock = currentBlock.provablyExecutesBefore (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P7_Replace_Invocation]^currentBlock = currentBlock .provablyExecutesBefore ( currentBlock )   )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P14_Delete_Statement]^^522^523^524^^^516^529^currentBlock = currentBlock.getParent (  )  )  { if  ( currentBlock.isHoisted )  { return false;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P2_Replace_Operator]^return currentBlock != this;^528^^^^^516^529^return currentBlock == this;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P5_Replace_Variable]^return thatBlock == this;^528^^^^^516^529^return currentBlock == this;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[P8_Replace_Mix]^return false ;^528^^^^^516^529^return currentBlock == this;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
